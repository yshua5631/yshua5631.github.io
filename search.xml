<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据结构之B+树</title>
    <url>/2020/10/18/B-plus-tree/</url>
    <content><![CDATA[<p>做应用开发的朋友大概这辈子不会遇到B+树这个数据结构,它的应用场景更多是在底层。<br>所有做技术的人有时候会面临一些困惑，有些技术或者理论离应用太远，有点曲高和寡，导致了我们会对这类技术丧失兴趣. 但B+树有时候就像一个幽灵一样出现在一些技术文章中，引起你的关注.<br>这篇文章主要是浅谈一下我记忆中的B+树.</p>
<ul>
<li>背景</li>
<li>什么是B+树？</li>
<li>B+树实践</li>
<li>拾遗</li>
</ul>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>要了解B+树先得说说B树, 1972年Bayer和mccreight发明了B树，但并没有说明B是什么意思, B可能代表Balance, Bayer或者Boeing,在这里就不深究B的具体含义了. B树首先它是一棵树，然后它是一颗平衡树，所有的结点都能存储数据。<br>B+树和B树的关系，大体上看就是iPhone6 plus和 iPhone6之间的关系.<br>注意：不存在B-树，这个“-”其实是个连接符，但会让人误解为是减号，如果出现B-tree其实就是B树.</p>
<span id="more"></span>
<h2 id="什么是B-树"><a href="#什么是B-树" class="headerlink" title="什么是B+树?"></a>什么是B+树?</h2><p>在讨论B+树之前，我们先要讨论一个阶的概念，就好比有些团队是大团队，有些团队是小团队，阶定义了B+树的规模。<br>满足如下条件的树，是一颗m阶的B+树</p>
<ul>
<li>根结点的数量在 [2, m] - 大Boss的下属数量范围</li>
<li>正常结点的子结点数量范围是[2/m, m] - 中层骨干的下属范围</li>
<li>一个结点的关键字数量和指针的数量是一致的，一个关键字代表了子结点的极值 - 老板眼里只有核心员工 </li>
<li>所有叶子结点都在同一层，叶子结点有指针指向兄弟结点 - 真正干活的只有底层，且底层团结一致<br><img src="/images/2020/bplus-tree.png"></li>
</ul>
<h2 id="B-树实践"><a href="#B-树实践" class="headerlink" title="B+树实践"></a>B+树实践</h2><h3 id="B-树与Mysql存储引擎InnoDB"><a href="#B-树与Mysql存储引擎InnoDB" class="headerlink" title="B+树与Mysql存储引擎InnoDB"></a>B+树与Mysql存储引擎InnoDB</h3><ul>
<li><p>一些基本事实</p>
<ul>
<li>数据库读取数据是以页(一般而言是4k)为单位将磁盘文件加载到内存（为了方便讨论，一个页上存储一个结点）</li>
<li>普通磁盘加载一个页的数据大概需要10ms(旋转，寻道等操作)</li>
<li>磁盘的顺序读取I/O比随机读取I/O要快10万个量级</li>
<li>内存的读取速度(纳秒级别)和磁盘的顺序读取读取大约是一个量级</li>
<li>查询优化的核心是减少I/O的访问次数</li>
</ul>
</li>
<li><p>为什么不选择B树？<br>B树的最大特点是是数据分布在所有的结点中，所有在进行范围查找时候，加载多个页的时候，会很耗时</p>
</li>
<li><p>B+树的优势<br>B+树存储数据的特点</p>
<ul>
<li>叶子节点存放了行数据</li>
<li>所有的叶子结点都在同一层</li>
<li>所有的叶子结点可以形成一个双向链表</li>
<li>叶子结点所在的页分布在不同的磁盘块上</li>
<li>非叶子结点不存储行数据，仅仅为了存储更多的索引键</li>
</ul>
<p>通过上面的特点，我们可以知道</p>
<ul>
<li>B+树相比B树很明显的一个特点是树的高度降低了，这样I/O访问就少了.</li>
<li>存储和索引被隔离开来，软件设计的一个原则就是分离关注点<br>回头再看看上面那个B+树的图，它有点像什么？对，像跳表. 跳表的核心思想是让链表具有二分查找能力.<br>所以跳表和B+树的源头思想是一致的.</li>
</ul>
</li>
</ul>
<h2 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h2><ul>
<li>由于B+树的读写会导致逻辑上相邻的数据实际在物理上相聚很远，LSM树(日志结构合并树)是对B+树的改进</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>浮浮沉沉 - DDD</title>
    <url>/2020/09/15/DDD/</url>
    <content><![CDATA[<p>现在谈到微服务，大多会提到DDD, 这两者之间有什么关系呢？让我在这篇文章里揭秘吧.</p>
<ul>
<li>DDD是什么？</li>
<li>DDD设计的一些原则?</li>
<li>如何基于DDD实现一个服务?</li>
<li>DDD的反面是什么？</li>
</ul>
<h2 id="DDD-是什么？"><a href="#DDD-是什么？" class="headerlink" title="DDD 是什么？"></a>DDD 是什么？</h2><p>  <img src="/images/2020/cow.png"><br>  DDD(Domain Driven Design)是一种设计方法论，它提供了一种拆解知识和问题的方式.</p>
<h3 id="DDD的背景"><a href="#DDD的背景" class="headerlink" title="DDD的背景"></a>DDD的背景</h3><p>  2004年Eric Evans 出版了《领域驱动设计》。微服务发迹于2014年。但这10年间DDD可以说是默默无闻，就好像一个妃子被打入冷宫一样，直到微服务出现，两者才喜结良缘，很难说谁成就了谁，两者是如此的契合.</p>
  <span id="more"></span>
<h3 id="DDD的核心概念"><a href="#DDD的核心概念" class="headerlink" title="DDD的核心概念"></a>DDD的核心概念</h3><p>  DDD有将近10个左右的概念。这些概念都是为了搞清楚一件事：业务的边界是什么？什么样的东西应该放在这个业务里？什么样的东西不应该放在这个业务里？</p>
<p>  人世间的争论大多数是名词之争。以前看《李敖有话说》，李敖提到了这样一个故事</p>
<blockquote>
<p>我想起《展望》（The Outlook）总编辑艾勃特（Lyman Abbott）自传中记他父亲的谈话：“自古以来，凡在哲学上和神学上的争论，十分之九都是名词之争。”艾勃特接着说：“我父亲的话是对的。但我年纪愈大，愈感到他老人家的算术还有点儿小错。——剩下的那十分之一，其实也是名词之争。”</p>
</blockquote>
<p>  一个人叫张三，无论它到世界任何角落，他还是张三，这是“实”。在公司里，张三是员工。在家里张三是父亲，父亲和员工是“形”；<br>  一瓶酒在仓库里叫库存，在运输的过程中叫货物。</p>
<p>  知识也是类似的。知识可以有不同的分类，可以按照规模大小来分，也可以按照重点和非重点分(二八法则)，所以大概有四种类型:</p>
<ul>
<li>总的知识</li>
<li>细分的知识</li>
<li>重点知识</li>
<li>非重点知识。</li>
</ul>
<p>   但不管是哪种知识，都属于知识，具有知识的共性：知识表达了一系列的事实，行为，最核心的组成成分是名词和动词。所以一系列的的名词和动词构成了一个完整的知识.</p>
<ul>
<li>领域 - 总的知识</li>
<li>子域 - 细分的知识</li>
<li>核心域 - 重点知识</li>
<li>支撑域 - 非重点知识</li>
<li>通用域 - 非重点知识</li>
<li>聚合 - 一系列名词和动词的集合。</li>
<li>聚合根 - 一系列名词和动词的集合，就像一个组织一样，得有一个老大负责对内对外的沟通.</li>
<li>实体 - 名词 + 动词，是一种充血模型，以DO的的形式存在.</li>
<li>值对象 - 名词</li>
</ul>
<h2 id="DDD设计的一些原则"><a href="#DDD设计的一些原则" class="headerlink" title="DDD设计的一些原则?"></a>DDD设计的一些原则?</h2><ul>
<li>应用层实现跨聚合的调用。</li>
<li>聚合之间的逻辑满足最终一致性。</li>
<li>领域层实现跨实体的调用</li>
<li>聚合内的逻辑满足强一致性</li>
<li>要访问聚合，先找到聚合根</li>
</ul>
<h2 id="如何基于DDD实现一个服务"><a href="#如何基于DDD实现一个服务" class="headerlink" title="如何基于DDD实现一个服务?"></a>如何基于DDD实现一个服务?</h2><h3 id="形成DDD的过程"><a href="#形成DDD的过程" class="headerlink" title="形成DDD的过程"></a>形成DDD的过程</h3><pre><code>* 收集信息
  * 项目负责人收集尽可能多的信息
  * 召集大家一起开会，分析一个领域内有多少User case
* 形成领域模型
  * 对所有的User case进行名词提取，汇总出有多少核心名词
  * 提取这些名词的核心行为
* 实现
  * 基于上面的名词设计实体和值对象
</code></pre>
<h3 id="一个简单的DDD例子"><a href="#一个简单的DDD例子" class="headerlink" title="一个简单的DDD例子"></a>一个简单的DDD例子</h3><h2 id="DDD的反面是什么？"><a href="#DDD的反面是什么？" class="headerlink" title="DDD的反面是什么？"></a>DDD的反面是什么？</h2>]]></content>
      <categories>
        <category>软件设计方法</category>
      </categories>
      <tags>
        <tag>软件设计方法</tag>
      </tags>
  </entry>
  <entry>
    <title>网络协议之靠谱邮差 - TCP</title>
    <url>/2020/11/03/TCP/</url>
    <content><![CDATA[<p>网络的信道是不稳定的，有时候施工队伍一不小就把光缆给挖断了，也有时候也有可能网络上连接太多了，导致弱网环境， 这些冰山一角的事情，充分说明了网络是不可靠的. TCP设计的初衷是保证数据能在网络上进行可靠的传输。 光缆都断了，数据还怎么可靠传输呢？<br>下面，开始我们的探索之旅.</p>
<ul>
<li>什么是TCP</li>
<li>TCP要解决什么问题</li>
<li>TCP是如何解决这些问题的</li>
<li>拾遗</li>
</ul>
<span id="more"></span>
<h2 id="什么是TCP"><a href="#什么是TCP" class="headerlink" title="什么是TCP"></a>什么是TCP</h2><p>TCP全称是Transmission control Protocal, 是一个工作在传输层上的协议. 它只关心数据如何可靠和有效的到达目的地，但不关心数据如何到底目的地。</p>
<h2 id="TCP要解决什么问题"><a href="#TCP要解决什么问题" class="headerlink" title="TCP要解决什么问题"></a>TCP要解决什么问题</h2><p>TCP要解决的问题是数据如何可靠和有效的到达目的地。</p>
<ul>
<li>可靠<ul>
<li>如果发送的包丢了，应该如何处理？</li>
<li>数据包是有顺序的，如何保证接受方拿到的包也是有顺序的？</li>
</ul>
</li>
<li>有效<ul>
<li>如果服务端比较忙或者比较闲，客户端应该采取什么样的策略来发送包？</li>
</ul>
</li>
</ul>
<p>TCP就是为了解决这三大问题而存在。 但这三大问题会衍生一些子问题.</p>
<p>回到一开始的那个问题： 光缆都断了，数据还怎么可靠传输呢？<br>答案是光缆断了，数据没法可靠传输。<br>网络不可靠是一个事实和大前提， 在网络不可靠的大前提，TCP尽可能的保证可靠的数据传输。<br>一个不太恰当的比喻： 张三娶了一个漂亮老婆，这个老婆有点花心和不可靠。 但即使老婆花心和不可靠， 那日子是不是还得照样过？所以张三就想了各种办法，比如平时对老婆好点，让她收收心，平时也查查她的手机，看看是否有可疑的聊天记录。张三所做的一切就是让一个本性不靠谱的女人行为上稍微靠谱一点. </p>
<h2 id="TCP是如何解决这些问题的"><a href="#TCP是如何解决这些问题的" class="headerlink" title="TCP是如何解决这些问题的"></a>TCP是如何解决这些问题的</h2><p>一个完成的TCP过程是建立连接，收发数据，释放连接.</p>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul>
<li>TCP的包是没有IP地址的，那么是IP层的事情.</li>
<li>TCP连接是点对点的，也就是说一个TCP连接对应的是两个端口.</li>
<li>ACKn代表着到目前为止，对方序号n-1的之前的数据都正常收到了，也代表期望对象下次发送序号为n的数据.</li>
</ul>
<h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><p>建立连接是为了进行可靠的数据传输做保证。就好比去拜访一位朋友，得事先打个招呼告知一下.<br>TCP建立连接是通过三次握手的策略来保证的。三次握手保证了</p>
<ul>
<li>客户端知道自己和对方有接受和发送的能力</li>
<li>服务端知道自己和对方有接受和发送的能力</li>
</ul>
<p>第一次握手是保证了服务端知道自己有接受能力，对方有发送能力.<br>第二次握手是保证了客户端知道自己有发送和接受能力，服务端有发送和接受能力.<br>第三次握手是保证了服务端知道客户端自己有发送的能力，客户端有接受能力.</p>
<p>从这里可以看出，二次握手是不能保证服务端知道自己是否有发送的能力，客户端是否有接受的能力.<br>四次握手也可以，但画蛇添足了.</p>
<h3 id="收发数据"><a href="#收发数据" class="headerlink" title="收发数据"></a>收发数据</h3><h4 id="客户端给服务端的发送数据包，数据包丢了怎么办？"><a href="#客户端给服务端的发送数据包，数据包丢了怎么办？" class="headerlink" title="客户端给服务端的发送数据包，数据包丢了怎么办？"></a>客户端给服务端的发送数据包，数据包丢了怎么办？</h4><p>  如果快递员给别人送货，货物弄丢了，快递员的选择很简单重发一个或者赔偿, TCP也不例外， 这就是TCP的重传策略. 对于重传，我们需要考虑以下问题 </p>
<ul>
<li>什么时候进行包重传？</li>
<li>重传哪些包？</li>
<li>如何进行重转</li>
</ul>
<p>  服务端返回 ACK 包的机制</p>
<ul>
<li>客户端发送了1, 2, 3, 4, 5 总共5个包，服务端收到了1, 2，会返回ACK3, 然后收到了4(此时没有收到 3)， 那么服务端应该返回什么？ 还是ACK3. ACKn的真正含义是服务端已经收到了n-1个连续的包, 并期望客户端发送第n个包.</li>
</ul>
<p>  假设存在一种上帝策略X, 这个策略可以让客户端及时的发送服务端所需要的包，且不重复.<br>  围绕上面三个问题，看看下面四种重传策略是如何逼近这个上帝策略的.</p>
<ul>
<li>超时重传<ul>
<li>超时重传的思路是：设定一个定时器，如果在规定时间内没有响应，则重发数据包.</li>
<li>超时重传的思路是朴素和直观的。但超时时间应该怎么定？如果时间间隔太长，则发包的效率太慢，如果时间间隔太短，会导致响应包还没收到，就重发了，就导致更多的重发。目前主流的策略是超时重传的时间（Retransmission Timeout）略大于包往返时间（Round-Trip Time）。</li>
<li>实际情况是 ，RTT是动态的，所以相应的 RTO也是动态的. RTO的计算规则相对复杂，具体公式可参考RFC 6298. 这里顺便说一下，这个公式的一些参数是长期实践得到的，无法从逻辑上推导出来，有点类似于现在的机器学习现状，参数调一调，发现可以得到预期的结果，但没有办法解释为什么，简单的说就是两眼一抹黑，完全靠不断的尝试.</li>
</ul>
</li>
<li>快速重传<ul>
<li>快速重传的思路是从多次发送包的响应值中找规律。</li>
<li>如果客户端发送1，2，3，4，5份数据， 1先到了，ack返回2，然后2因为某种原因没收到，3到了，ack返回的还是2，4，5也到了，ack还是2. 至此，客户端收到了三个ack=2的包，就知道2出问题了。于是重发2，因为3，4，5都收到了，ack返回的是6.</li>
<li>上面这个例子是一个比较理想化的例子。我们需要面两个选择：究竟是重发2，还是后面的3，4，5也要重发？<ul>
<li>重发2 - 如果3，4，5里面没有丢包，重发2是最完美的选择。 但 3，4，5里面如果有丢包的，那么还得重发丢失的包</li>
<li>重发2，3，4，5 - 如果3，4，5里面没有丢包，重发3, 4, 5是一种浪费。</li>
</ul>
</li>
<li>快速重传仅仅解决了定时器效率的问题，但没有解决什么时候应该发2，什么时候该发3， 4，5这个问题.</li>
</ul>
</li>
<li>SACK - Selective Acknowledgment<ul>
<li>SACK的思路是服务端告诉客户端一个大体的全貌，我当前已经收到了什么，我还没收到什么。所以这也是一个比较自然的思路. 具体细节可参考 RFC 2018</li>
<li>SACK需要客户端和服务端同时支持</li>
<li>SACK会占用发送方的资源。试想一下，如果黑客劫持了服务端，给客户端发送不正常的SACK包，那么客户端就会每次都要计算服务端哪些包收到了，哪些包没有收到.</li>
</ul>
</li>
<li>D-SACK - Duplicate SACK<ul>
<li>D-SACK的核心思路是告诉客户端哪些数据是被重复接受了。具体可见RFC 2833.</li>
<li>通过D-SACK, 我们可以知道<ul>
<li>丢失的包是发送的包还是ACK包，如果丢失的包是ACK包，客户端就不要无脑重发服务端已经收到的包</li>
<li>先发的包后到的情况.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="客户端给服务端发送数据包是按顺序发送的，服务端是如何保证拿到的一些数据包是有序的？"><a href="#客户端给服务端发送数据包是按顺序发送的，服务端是如何保证拿到的一些数据包是有序的？" class="headerlink" title="客户端给服务端发送数据包是按顺序发送的，服务端是如何保证拿到的一些数据包是有序的？"></a>客户端给服务端发送数据包是按顺序发送的，服务端是如何保证拿到的一些数据包是有序的？</h4><h4 id="客户端给服务端发送数据包的过快怎么办？"><a href="#客户端给服务端发送数据包的过快怎么办？" class="headerlink" title="客户端给服务端发送数据包的过快怎么办？"></a>客户端给服务端发送数据包的过快怎么办？</h4><p>前置知识</p>
<ul>
<li>滑动窗口 - TCP是每发一个请求，就会有一个响应，如此循环。 这明显效率太低了。有没有可能我一次发送多个请求， 然后只需要一次响应就可以了？这个思路直觉上是可行的. TCP的滑动窗口是为了协调发送方和接收方的速度. 这本质上是个生产者-消费者模型。生产者发送速度过快，消费者接受不了怎么办？增加一个中间缓存带。滑动窗口其实就是一个缓存带.<br>流量控制是TCP提供的一种机制，是为了匹配收发双方的速度.<br>以服务端接受数据为过程为例</li>
<li>网卡接受到的数据会放到内核缓冲区</li>
<li>内核缓冲区会将相应的信息挪到某一个TCP连接的接受缓存区(接受窗口就是接受缓存区)</li>
<li>然后应用程序会从接受缓冲区读取数据<br>客户端发送数据如下</li>
<li>应用程序将数据放到发送缓存区（发送窗口就是发送缓存区）</li>
<li>将发送窗口的数据挪到内核缓冲区</li>
<li>内核缓冲区的数据从网卡发送出去</li>
</ul>
<p>拾遗</p>
<ul>
<li>发送缓冲区和接受缓存区是针对一个TCP连接的。整个内核缓冲区是针对整个操作系统的</li>
<li>TCP头里有一个字段叫 Window代表窗口大小</li>
<li>窗口的大小是有接受方的窗口大小决定的.</li>
<li>如果客户端到的TCP window的值为0, 那么意味着服务端处在水深火热当中，没能力处理数据了。那么客户端就不会发送数据了。但是万一过会，服务端又复活了呢？ TCP是用Zero Window Probe技术，发zwp包给服务端。</li>
<li>窗口为0会引起死锁</li>
<li>糊涂窗口综合症(Silly Window Syndrome) - 如果接受方的可用窗口太小，只能容纳几个字节，发送方还在为了发几个字节需要带上很多的附加信息，显得很耗带宽资源，得不偿失。有点像服务端对客户端说我的仓库没空间了，你不要大老远过来送一些牙膏牙膏牙刷了，等我空间大了，你再送些大件过来.<ul>
<li>如果是服务端导致的糊涂窗口综合症，那就关闭窗口</li>
<li>如果是客户端导致的糊涂窗口综合症， 使用Nagels算法。核心思路是等可用的窗口变大了再发数据</li>
<li>Nagle算法默认是打开的，对telnet或ssh交互性比较强的程序，需要关闭这个算法。</li>
</ul>
</li>
<li>流量控制和用塞控制的区别是什么？<ul>
<li>流量控制是针对发送者和接受者之间的策略，侧重于微观，并不知道网络的整体情况。</li>
<li>拥塞控制是为了从宏观保证整个网络畅通的</li>
<li>流量控制为拥塞控制做了一小部分铺垫，但这还不够，拥塞控制还需要额外的策略.</li>
</ul>
</li>
</ul>
<h3 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h3><p>直观上说，建立连接是三次握手，关闭连接应该是更简单，直接一句GoodBye就完事。<br>但事实并非如此，根本原因TCP是全双工。TCP建立连接之后，双方是可以同时收发数据的，那么就意味着连接需要两个通道. 所以关闭连接就变成了如何处理两个通道.<br>两个通道都没有数据收发才是最关闭连接的标志. 关闭的真正的含义是要关闭两个通道一起关闭，但前提是两个通道都要确认没有收据收发.<br>释放连接可以用客户端和服务端任意一方发起。<br>下面是客户端是发起释放连接的过程</p>
<ul>
<li>客户端发送FIN，代表要释放发送通道</li>
<li>服务端收到客户端的FIN, 知道客户端没有数据要发送了. 发送ACK给客户端, 代表我同意你的请求. 但此时服务端还不能关闭连接，因为服务端可能还有数据要发送给客户端. </li>
<li>服务端觉得直接没有数据要发送了，就发送一个FIN请求关闭连接</li>
<li>客户端发送ACK给服务端，同意服务端的关闭连接请求.服务端收到ACK之后就关闭连接，客户端在等待2MSL时间之后，没有收到回复，就关闭连接.</li>
</ul>
<h3 id="整个网络发生了阻塞怎么办？"><a href="#整个网络发生了阻塞怎么办？" class="headerlink" title="整个网络发生了阻塞怎么办？"></a>整个网络发生了阻塞怎么办？</h3><p>想象一下每次过节开车回家，怎么知道回家的路是一路通畅的呢？看地图上面的交通线路状况是不是绿色，如果是红色，则代表路况拥堵. 整个网络也是出现拥堵和通畅两种情况。<br>在节假日的时候，交警应对这种情况有好几种方法 </p>
<ul>
<li>车主上高速的时候，收费站限流，只开几个闸口</li>
<li>车主上高速的时候，收费站完全关闭，让车主改选国道</li>
<li>已经在高速上的车流，交警会尽可能的疏导让它们快速的去目的地.</li>
</ul>
<p>网络拥塞发生的时候，有如下策略</p>
<ul>
<li>慢启动<ul>
<li>慢启动的核心原理是第一次发包的时候发一个包，第二次翻倍，以此类推。发包的数量是指数级增长。当发包的数量超过某个阀值的时候，采用拥塞避免算法。</li>
<li>可以看出慢启动的策略还是有点粗鲁，不够灵活。</li>
</ul>
</li>
<li>拥塞避免<ul>
<li>拥塞避免和慢启动有类似之处。当一次发送包的数量超过某个阀值的时候，那么下次发包的数量，就呈现线性增长。相比于指数增长，这个增长很慢了。</li>
</ul>
</li>
<li>拥塞发生<ul>
<li>当网络发生阻塞的时候，会发生丢包，既然发生了丢包，那么就要重传</li>
<li>发生超时重传的时候，会导致又要重新进入慢启动的过程</li>
<li>发生快速重传的时候，TCP认为你还能收到三个ACK包，说明网络还可以啊。于是将发包的数量降到一半，而不是像超时重传，将发包的数据量降到1. 然后进入快速恢复算法</li>
</ul>
</li>
<li>快速恢复<ul>
<li>快速恢复的核心是用另外一种策略来控制发生包的大小。 这个策略先不详细展开。</li>
</ul>
</li>
</ul>
<p> 至此，介绍了拥塞控制的四个算法。这四个算法的都遵循的原则是</p>
<ul>
<li>尽量的发包，而不是不发.</li>
<li>这个四个算法的思路都是围绕着“什么时候发多少包”展开的.这一点很像高速收费站，什么时候允许多少车辆进去.</li>
</ul>
<h2 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h2><h3 id="TCP粘包"><a href="#TCP粘包" class="headerlink" title="TCP粘包"></a>TCP粘包</h3><p>  客户端在发送包D的时候，服务的滑动窗口容纳不下这个包，所以只能接受一部分包D1，一个包就被拆开了。<br>  客户端在发送D1和D2两个包，服务端接受的时候，接受到一个包，包含D1和D2, 服务端无法鉴别 D1和D2.<br>  上面的这种现象是由TCP的特性决定的。 我们可以给这些现象命名。但这些是问题吗？如果是问题，TCP应该背这个锅吗？<br>  答案是：TCP不背这个锅，TCP不解决这个问题。如果这是个问题，应该由应用层去解决.</p>
<h3 id="TCP存在的问题"><a href="#TCP存在的问题" class="headerlink" title="TCP存在的问题"></a>TCP存在的问题</h3><p>  TCP设计的时候有个大前提：网络的包的丢失是因为网络堵塞引起的. 这个大前提直接决定了TCP的设计方向.<br>  但其实网络包的丢失可能是</p>
<ul>
<li>移动基站的弱网环境</li>
<li>防火墙针对性的丢包</li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>协议</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>系统行为之警卫局 - 登录和授权</title>
    <url>/2020/11/22/auth/</url>
    <content><![CDATA[<p>在现实生活中，身份识别无处不在。 去银行取钱，得带上银行卡。 去公司上班，得带上门禁卡。想访问一个网站，需要先注册，才能访问其内容。<br>任何一个系统，无论是软件系统，还是真实的现实世界的组织，都需要对人进行识别，然后才能决定这个人能干什么。</p>
<ul>
<li>背景</li>
<li>什么是登录和授权</li>
<li>如何进行登录和授权</li>
<li>登录和授权相关的实践</li>
<li>登录和授权的未来</li>
</ul>
<span id="more"></span>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>登录和授权是一个软件系统里最常见的行为。<br>还记得在第一家公司使用过一个ERP系统，登录进去只能看到自己所属的模块.<br>如今应用多了，一个企业内部，可能有专门的财务软件，也有可能有外部购买的软件，基于时间就是金钱，效率就是生命的原则，在一家公司内部，如何统一管理用户的账号，在一个地方登录了系统A, 在另外一个地方可以直接登录系统B，成为一个企业必须解决的问题（SSO）.<br>我要登录极客时间，有好几种方式，但最省时的方式肯定的是第三方登录，点击微信图标， 唰唰几步就完成了登录，而不是重新注册一个账号，输入电话，电子邮件。这也体现了用户至上的设计理念。 换句话说，没有人喜欢复杂和繁琐的东西。简单，简单，还是简单.</p>
<h2 id="什么是登录和授权"><a href="#什么是登录和授权" class="headerlink" title="什么是登录和授权"></a>什么是登录和授权</h2><p>登录和授权是两件事，要分开说.</p>
<h3 id="什么是登录"><a href="#什么是登录" class="headerlink" title="什么是登录"></a>什么是登录</h3><p>登录是指一个主体可以进入系统S的行为. 这里的主体可以是人或者是一个物体，系统S可以是软件，也可以是指一个组织<br>以下是一些登录的例子</p>
<ul>
<li>打开一个web，输入用户名和密码 - 这个是最常见的行为，也是所有验证模型的雏形.</li>
<li>张三刷门禁进公司</li>
<li>插入银行卡，输入密码取钱</li>
</ul>
<p>登录的形式</p>
<ul>
<li>输入用户和密码</li>
<li>输入用户和密码，再加上n重验证(比如验证码，或者回答一个私密问题)</li>
<li>按指纹</li>
<li>面部识别<br>从这里看出来，登录这个行为隐藏了一个主题：更简单的方式追求更高的安全</li>
</ul>
<h3 id="什么是授权"><a href="#什么是授权" class="headerlink" title="什么是授权"></a>什么是授权</h3><p>授权是指一个主体进入系统S之后，它在系统S里面能做什么. 这里的授权是广义上的授权，和之后讨论的oAuth的概念稍微有点不一样<br>授权的例子如下</p>
<ul>
<li>登录一个电商网站之后，可以下单买东西</li>
<li>进入公司内部，可以做在自己的座位上，不能坐在别人的座位上。</li>
<li>登录进入一个ERP系统，我是销售部门的人，只能看到销售模块，不能看到财务模块.</li>
</ul>
<p>授权这个行为表明了主体在系统S里面基于特定的约束，只能做特定的事情.</p>
<h2 id="如何进行登录和授权"><a href="#如何进行登录和授权" class="headerlink" title="如何进行登录和授权"></a>如何进行登录和授权</h2><h3 id="单系统的登录和授权"><a href="#单系统的登录和授权" class="headerlink" title="单系统的登录和授权"></a>单系统的登录和授权</h3><p>  单系统登录设计原则</p>
<ul>
<li>密码需要设计复杂度</li>
<li>存在数据里的密码需要加密</li>
<li>最好加一些额外的验证 - 比如验证码</li>
<li>能以最小的成本平滑的过渡到SSO</li>
</ul>
<p>  单系统授权设计原则</p>
<ul>
<li>权限表能很好的添加或者删除权限</li>
<li>有专门的工具来维护权限的添加和删除</li>
</ul>
<h3 id="多系统登录和授权相关规范"><a href="#多系统登录和授权相关规范" class="headerlink" title="多系统登录和授权相关规范"></a>多系统登录和授权相关规范</h3><p>  下面是一些有关登录和授权的规范，我之所以称它们为规范是为了便于方便讨论。 因为地方会称这些规范是个协议，或者是个框架，或者从字面上看是个语言，这样概念太多，会让人迷糊不清。<br>  规范本质上是一种约束。 它描述了</p>
<ul>
<li>一个系统可以做什么</li>
<li>一个系统不可以做什么</li>
<li>一个系统如何做某件事</li>
</ul>
<h4 id="SAML"><a href="#SAML" class="headerlink" title="SAML"></a>SAML</h4><p>  SAML（Security Assertion MarkUp Language）顾名思义是一个与安全和断言有关的规范。 下面引用了维基百科的定义</p>
<blockquote>
<p>SAML is an open standard for exchanging authentication and authorization data between parties, in particular, between an identity provider and a service provider. SAML is an XML-based markup language for security assertions (statements that service providers use to make access-control decisions).</p>
</blockquote>
<p>  维基百科回答的大体还是准确，但一会说这是个标准，一会又说这是一个语言，所以很乱。<br>  从这里也可以看出, SAML主要解决这样一个问题: 如何在IDP和SP之间交换验证和授权的信息？<br>  SAML有三个角色</p>
<ul>
<li>Client - 张三</li>
<li>Identity Provider - 微信</li>
<li>Service Provider - 极客时间</li>
</ul>
<p>  <img src="/images/2020/saml-workflow.png"><br>  基于上面三个角色， SAML大体的workflow是</p>
<ul>
<li>Client 访问 Service</li>
<li>Service 将 Client 导向到 IDP<ul>
<li>Client 登录成功</li>
</ul>
</li>
<li>IPD将Client导向到 Service<ul>
<li>Service验证用户登录成功</li>
</ul>
</li>
<li>Client在浏览器上可以正常访问资源</li>
</ul>
<h4 id="OAuth"><a href="#OAuth" class="headerlink" title="OAuth"></a>OAuth</h4><p>  OAuth是一个关于授权的标准，它不做验证。</p>
<blockquote>
<p>OAuth 2.0 is the industry-standard protocol for authorization. OAuth 2.0 focuses on client developer simplicity while providing specific authorization flows for web applications, desktop applications, mobile phones, and living room devices</p>
</blockquote>
<p>  OAuth的的角色</p>
<ul>
<li>Resource Server - 资源，比如房子</li>
<li>Resource Owner - 资源的拥有者，比如这个房子是属于张三的</li>
<li>Authorization Server - 有个组织负责给张三配房子的临时钥匙</li>
<li>Client - 李四</li>
</ul>
<p>  <img src="/images/2020/oauth-workflow.png"></p>
<p>  OAuth的故事大概是这样的：<br>  张三有一家公司，李四想去张三的公司仓库里取货，但张三不能把真正的钥匙给李四，只能委托一个机构给李四一把临时的钥匙，这把临时的钥匙只能去仓库，不能去财务室. 这把临时钥匙是不记名的，换句话说，如果王五抢劫到这把临时钥匙，也是可以去仓库取东西的.</p>
<p>  更技术一点就是说</p>
<ul>
<li>授权服务器如何采取一种简单又安全的方式给Client生成access token? </li>
</ul>
<p>  OAuth的花式生成access token的方式</p>
<ul>
<li>授权码</li>
<li>简化模式</li>
<li>密码模式</li>
<li>客户端模式</li>
</ul>
<h4 id="OpenId-Connect-OIDC"><a href="#OpenId-Connect-OIDC" class="headerlink" title="OpenId Connect(OIDC)"></a>OpenId Connect(OIDC)</h4><p>  OpenId Connect是一个专注于身份验证的规范.</p>
<blockquote>
<p>OpenID Connect is an interoperable authentication protocol based on the OAuth 2.0 family of specifications. It uses straightforward REST/JSON message flows with a design goal of “making simple things simple and complicated things possible”. It’s uniquely easy for developers to integrate, compared to any preceding Identity protocol.</p>
</blockquote>
<p>  从上面的描述可以知道 OIDC也包含授权功能，因为它是基于OAuth2.0, 但我们要记住OIDC的主业是认证，认证是它的价值主张, 授权只是它的副业.<br>  如果说授权最终的产出是access token, 那么验证最终的产出就是id token. 基本上，只要拿到了这两种token, 就可以在各个软件系统中为所欲为的横着走了.</p>
<p>  OIDC的角色</p>
<ul>
<li>End User - 张三</li>
<li>Relying Party - 相当于OAuth的Resource Server。 比如极客时间</li>
<li>OpenID Provider - 身份认证服务，类似于SAML中的IDP。 比如微信</li>
<li>ID-Token - 包含身份认证信息的JWT</li>
<li>UserInfo Endpoint - 获取用户的昵称和头像等信息</li>
</ul>
<p>  OIDC的大体的WorkFlow是这样的</p>
<ul>
<li>RP 发送认证请求给 OP</li>
<li>OP 让用户来验证 <ul>
<li>用户提供正确的身份验证</li>
</ul>
</li>
<li>OP 生成 id token 和 access token给RP</li>
<li>RP 根据 access token 发送一个获取用户信息的请求.</li>
<li>RP 获得用户的信息</li>
</ul>
<p>  <img src="/images/2020/OIDC-workflow.jpg"></p>
<h3 id="相关框架"><a href="#相关框架" class="headerlink" title="相关框架"></a>相关框架</h3><h4 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h4>  <!--TODO SpringSecurity的设计初衷和目的以及核心功能和概念 -->
<h4 id="Spring-Shiro"><a href="#Spring-Shiro" class="headerlink" title="Spring Shiro"></a>Spring Shiro</h4>  <!--TODO SpringShiro的设计初衷和目的以及核心功能和概念 -->
<h4 id="KeyCloak"><a href="#KeyCloak" class="headerlink" title="KeyCloak"></a>KeyCloak</h4>  <!--TODO KeyCloak的设计初衷和目的以及核心功能和概念 -->
  <!--TODO 这三个框架共同表达了什么主题？ -->
  <!--TODO 这三个框架有哪些优秀的设计原则和思路？ -->
<h2 id="登录和授权的相关实践"><a href="#登录和授权的相关实践" class="headerlink" title="登录和授权的相关实践"></a>登录和授权的相关实践</h2><h3 id="如何设计一个权限系统"><a href="#如何设计一个权限系统" class="headerlink" title="如何设计一个权限系统"></a>如何设计一个权限系统</h3><p>  这里的权限系统是指一般意义上的权限：主体对资源能执行什么样的操作？ 比如张三可以文件执行写操作.<br>  所以权限设计是为了解决这样一个终极问题</p>
<ul>
<li>主体在什么样的条件下可以对资源执行什么样的操作， 而且随着用户的增加，添加权限的操作尽可能的简单和更安全。</li>
</ul>
<p>  一些权限模型</p>
<ul>
<li>ACL - 基本的思路是：对一个文件A需要配置张三读写权限，文件B李四需要配置写权限<ul>
<li>这种配置是符合直觉的，但是随着用户量的增加，需要一个一个的配，很繁琐.</li>
</ul>
</li>
<li>DAC (Discretionary access control) - 是基于 ACL的扩展。 它引入了组和给其他主体授权的概念<ul>
<li>张三可以具有对文件A读写的权限，张三属于销售组，所以销售组也可以对文件具有读的权限</li>
<li>文件A的拥有者张三同时也可以将文件A读的权限赋给李四，这样是自主的核心要义。</li>
<li>Windows和Linux权限是基于DAC的。<ul>
<li>Windows的权限设计不够灵活，比如说“读取和执行”是一个权限，但其实是微软将读取和执行两个权限打包在一起了，然后让用户选择允许和拒绝</li>
<li>Linux的的权限设计充分体现了细粒度，互斥的组合的思想。比如说权限只有三种，读，写，执行，一个文件有三大类用户: 拥有者，所属组，其他人。每大类用户有7中权限，所以总的权限组合是7<em>7</em>7</li>
</ul>
</li>
</ul>
</li>
<li>MAC (Mandatory access control) - 相比于DAC, MAC强调的是更安全。张三和李四同属于销售组，但是张三是经理，李四是员工，所以张三和李四对文件A是有不同对访问权限的，这个问题DAC就解决不了. MAC引入了信息敏感度这个概念, 也就是引入了一个新的维度.<ul>
<li>要配置资源的信息等级</li>
<li>要配置用户主体的信息等级</li>
<li>核心的财务文件只有经理级别的财务人员才能查看，但是经理级别的销售人员就不能查看.</li>
</ul>
</li>
<li>RBAC (Role based access control) - RBAC的核心概念是：主体，角色，资源<ul>
<li>一个销售角色有很多权限，比如查看合同，创建客户，删除客户等等，只要一个人是销售，它就具有这些权限</li>
<li>角色是权限的集合，而组是用户的集合</li>
</ul>
</li>
<li>ABAC (Attribute base access control) - ABAC相比于其他模型是它的表达力是最强的. 如果要表达张三上午可以对文件进行读取操作，那么上述所有模型都无能为力。ABAC可以表述为: X在Y条件对Z执行A操作, 这里的X,Y,Z,A都是可以自定义的.<ul>
<li>来自北京的张三在上午10点钟可以读取服务器上80端口的内容。 这段表述够复杂了吧，ABAC就可以干这事情。已经有点声明式编程的味道了.</li>
</ul>
</li>
</ul>
<h3 id="操作系统是如何存储用户信息的？"><a href="#操作系统是如何存储用户信息的？" class="headerlink" title="操作系统是如何存储用户信息的？"></a>操作系统是如何存储用户信息的？</h3><pre><code>* 协议
  * X.500 - X.500是基于OSI的目录访问服务，众所周知，OSI现在已经被淘汰.
  * LDAP（Lightweight Directory Access Protocol） - LDAP是一个基于X.500的目录访问的协议，但它更简单，而且支持TCP/IP，这对互联网访问非常重要.
* 实现
  * Active Directory - 这是LDAP在windows上的实现，它的层次结构依次是：域(Domain) -&gt; 组织单位(Orgnization Unit) -&gt; 群组(Group) -&gt; 用户(User)
    * 一般来说，AD适合在内网中的C/S架构
  * OpenLDAP
  * ADFS - ADFS是一种跨网络的身份认证方案，也就是用户账户和应用程序位于不同的网络.
    * 相比于传统的AD, ADFS可以穿透不同的网络.
  * Azure AD - 是基于云上的身份认证和授权方案。
    * 它支持Rest风格. 具体一点就是通过api可以拿到access token和id token, 这是开发者最关心的信息.
    * 它支持多重身份验证
    * 它支持多租户，租户和租户之间的数据是彻底隔离的
    * 它不是主域控制器
</code></pre>
<h2 id="登录和授权的未来"><a href="#登录和授权的未来" class="headerlink" title="登录和授权的未来"></a>登录和授权的未来</h2><p>  无论是SAML, OAuth 还是 OpenId Connect, 我希望将来只有一种认证和授权协议, 姑且命名为XAuth.<br>  它有如下特征</p>
<ul>
<li>生成和解析token是简单的</li>
<li>token是安全的</li>
<li>形成规范</li>
<li>.net, java以及前端有成熟框架和社区支持，且这些框架被大多数公司所使用.</li>
</ul>
<p>  所有技术无论是原则，模式，还是方式，统一是大趋势。 我们不想要两个或者多个。<br>  可以看到一些例子</p>
<ul>
<li>前些日子, .net5发布了，统一了.net core, mono.</li>
<li>Spring Cloud想统一解决分布式领域内的所有问题，并形成规范.</li>
</ul>
<p>  这也就是为什么我对认证和授权协议会有统一的构想的原因。</p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>系统设计</tag>
      </tags>
  </entry>
  <entry>
    <title>分解</title>
    <url>/2020/09/12/break-down/</url>
    <content><![CDATA[<p>分解是解决问题的一种有效方式之一。分解这两个字是如此的显而易见，小学生一听都知道分解是什么意思， 以至于不需要解释太多。<br>这篇文章主要探讨三方面内容</p>
<ul>
<li>什么是分解？</li>
<li>为什么要分解？</li>
<li>如何分解一个系统？</li>
</ul>
<h2 id="什么是分解？"><a href="#什么是分解？" class="headerlink" title="什么是分解？"></a>什么是分解？</h2><p>  <img src="/images/2020/organization.png"><br>  将一个事物按层次拆成层次1， 层次2，每个层次可以拆成要素1， 要素2，这就是分解。<br>  <span id="more"></span><br>  一些具体的例子</p>
<ul>
<li>公司的组织架构。老板下面有很多经理， 经理下面有很多项目组长.</li>
<li>公司的目标。 长期目标(愿景)，中期目标，短期目标.</li>
<li>社会大分工</li>
<li>软件架构的分层。</li>
<li>微服务的拆分。</li>
<li>分布式</li>
<li>算法分而治之的设计思想</li>
<li>分子可以拆分成原子，原子可以拆分为质子和电子。</li>
<li>经济研究可以分为宏观和微观。</li>
<li>新产业可以分解为现有产业和新技术的组合。</li>
</ul>
<p>  简而言之， 分解是无处不在。</p>
<h2 id="为什么要分解？"><a href="#为什么要分解？" class="headerlink" title="为什么要分解？"></a>为什么要分解？</h2><p>  一个系统被分解之后， 它是：</p>
<ul>
<li>容易理解的</li>
<li>容易解决的</li>
</ul>
<p>  一些具体的例子</p>
<ul>
<li>一个很复杂的任务，被分解为任务1, 任务2。。。，每一项任务只需要简单执行就能得到预期结果，以至于简单到不可能失败。这个例子很简单的，简单的会让人感觉“不过如此，这个没什么啊”。任务分解是职场里最有效的工作方式之一。 它的表现形式是如此的简单，以致于人们意识不到这种方法论的重要性。去观察一个团队的领导或者成员有没有搞清楚任务，一个重要的指标就是这个任务有没有拆解得很清楚。 换句话说，能不能将任务拆解得很清楚是团队成熟和稳定的标志之一. 为什么这么说？<ul>
<li>想明白 - 做事的前提就是想明白，搞清楚为什么。 如果一个任务能拆解的很细，说明这件任务是想明白了。</li>
<li>可执行 - 可执行意味着能不能落地。人是天生讨论复杂和不确定的东西，任务分解的结果就是简单和确定的东西。 简单和确定意味着风险可控，结果可预期, 在规定时间内可以拿到结果。结果本质上是一种反馈和奖励机制，长期的反馈和奖励机制会形成良性循环.</li>
</ul>
</li>
</ul>
<p>  并不是所有的系统都是可以拆解的，有些系统是非线性的，不遵守还原论.</p>
<h2 id="如何分解一个系统？"><a href="#如何分解一个系统？" class="headerlink" title="如何分解一个系统？"></a>如何分解一个系统？</h2><ul>
<li>识别系统的要素<ul>
<li>不同的层次<ul>
<li>一个组织有领导层和执行层，领导层决定了执行层。</li>
<li>一个软件有一个根本设计目标和设计原则，模式和方法。</li>
<li>我们知道人的生命是基于碳基的，但是我们要是收集一拖拉机碳基物质，能不能创造出人类，当然是不能。碳基物质 -&gt; 细胞 -&gt; 器官，这是一个比较简单的描述人的物质组成图，很明显，每一层都不是下一层简单的堆砌就可以形成的，而是量变引起了质变，这种现象就称为层展现象.</li>
</ul>
</li>
<li>同一层次的不同维度<ul>
<li>如何证明美国比中国比美国强？可以从政治，经济，军事，文化，教育。。等角度出发， 这些维度是平等的。</li>
</ul>
</li>
</ul>
</li>
<li>识别要素之间的关系<ul>
<li>比如在一个学校里，教师是管理学生的，而不是学生管理老师，如果是这样的话，那么系统的性质就发生变化了.</li>
</ul>
</li>
<li>识别系统的目的。<ul>
<li>系统有一个目的或者初衷。比如学校的目的是教书育人而不是从事商业化活动.</li>
<li>有些系统的目的不是很明显。比如一个生态，它的目的就是活下来。</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  分解是无处不在的思想， 具体落实到每个实际领域的时候，需要找到这个领域的层次和维度.</p>
<p>  分解给我们的带来的一个启示是：<br>  如果一个系统是可被分解的，那么它一定是可以被理解的。<br>  如果一个系统是可以被理解的，那么它一定是可以寻求最优解的。</p>
]]></content>
      <categories>
        <category>认知</category>
      </categories>
      <tags>
        <tag>认知</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之效率管家 - Redis</title>
    <url>/2020/10/15/cache/</url>
    <content><![CDATA[<p>计算机有两大问题，一个是命名问题，一个是缓存失效。缓存在整个计算机体系里无处不在</p>
<ul>
<li>CPU - CPU缓存</li>
<li>操作系统 - Page Cache</li>
<li>数据库 - 数据库缓存</li>
<li>浏览器 - 浏览器缓存</li>
</ul>
<p>这篇文章主要是探讨一下缓存的通用问题以及Redis相关问题</p>
<ul>
<li>缓存概述</li>
<li>Redis历史</li>
<li>什么是Redis</li>
<li>为什么是Redis</li>
<li>Redis是如何实现的</li>
<li>Redis实践</li>
<li>Redis的未来</li>
</ul>
<span id="more"></span>
<h2 id="缓存概述"><a href="#缓存概述" class="headerlink" title="缓存概述"></a>缓存概述</h2><h3 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h3><p>  没有看到缓存的通用定义，这里尝试定义一下. 我们有系统X, C, D，这三个系统有如下特征</p>
<ul>
<li>系统X可以从C和D拿到同样的数据</li>
<li>系统X从C拿到的数据比从D拿到的数据更快</li>
<li>系统C的数据是来自于D</li>
</ul>
<p>  如果上述三个条件满足，那么系统C可以称做为D的缓存.</p>
<h3 id="为什么需要缓存"><a href="#为什么需要缓存" class="headerlink" title="为什么需要缓存"></a>为什么需要缓存</h3><p>  如果系统D满足不了单位时间内多次请求，那么系统C一定是存在的. 原因是</p>
<ul>
<li>系统C比系统D更快，那么可以提供更好的用户体验.</li>
</ul>
<h3 id="实现一个缓存会遇到什么问题？"><a href="#实现一个缓存会遇到什么问题？" class="headerlink" title="实现一个缓存会遇到什么问题？"></a>实现一个缓存会遇到什么问题？</h3><pre><code>* 缓存更新策略
  * Cache Aside Pattern
  * Write / Read Through Pattern
  * Write Behind Caching Pattern
</code></pre>
<h2 id="Redis历史"><a href="#Redis历史" class="headerlink" title="Redis历史"></a>Redis历史</h2><p>2008年，一家意大利公司Merzia推出了一个几个基于Mysql的实时统计系统，但是该公司的创始人Salvatore Sanfilippo对这套系统感到失望，于是自己对这套系统量身定做了一个数据库，且在2009年开发完成, 这就是Redis. 所以这就是比较典型的思路：有了一个痛点，然后才有了一个技术。 而现在不少公司的思路是反的：不管有没有痛点，先用高大上的技术再说.<br>2010年VMware公司赞助Redis, Salvatore Sanfilippo和另外一位开发者加入了VMware公司，全职开发Redis. 所以也是当时的一个痛点问题，改变了作者的人生之路.</p>
<h2 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis"></a>什么是Redis</h2><p>我看看官网上Redis的定义:</p>
<blockquote>
<p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker</p>
</blockquote>
<p>在我们的印象中，数据库是指MySql, Sql Server，或者Oracle. 所以从这里看得出Redis的定位是多种多样的，可以做缓存，数据库或者消息队列.<br>但有点事实可以确定</p>
<ul>
<li>相比于Kafka, Redis的消息队列没那么专业</li>
</ul>
<p>从核心行为的角度来看：Redis是一个支持Key, value的存储系统. 换句话说, Redis的灵魂在于Key,Value.</p>
<h2 id="为什么是Redis"><a href="#为什么是Redis" class="headerlink" title="为什么是Redis"></a>为什么是Redis</h2><h2 id="Redis是如何实现的"><a href="#Redis是如何实现的" class="headerlink" title="Redis是如何实现的"></a>Redis是如何实现的</h2><h3 id="整体设计目标"><a href="#整体设计目标" class="headerlink" title="整体设计目标"></a>整体设计目标</h3><ul>
<li>如何又快又好的实现一个Key, Value存储？</li>
</ul>
<p>  所以可以设想一个最简单的Key, Value的存储， 它应该支持</p>
<ul>
<li>支持数据的增删改查</li>
<li>数据类型多样</li>
<li>最好支持集群功能 - 或者说任何的框架都应该支持集群功能</li>
</ul>
<h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><pre><code>N/A
</code></pre>
<h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>  Redis也是基于Reactor模式来实现的，这一点和Netty类似.</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>高性能视角 - 对应快这个指标</li>
<li>高可用视角 - 对应好这个指标<ul>
<li>分布式维度<ul>
<li>主从库模式<ul>
<li>全量复制</li>
<li>基于长连接的命令传播</li>
<li>增量复制 </li>
</ul>
</li>
<li>哨兵机制</li>
<li>集群</li>
</ul>
</li>
<li>容错维度<ul>
<li>AOF日志 - 先更新缓存，然后再更新日志，这样可以得出一个结论：只有日志里有记录，就一定有执行过缓存的命令 。<ul>
<li>优点</li>
<li>缺点</li>
</ul>
</li>
<li>内存快照 -  RDB 文件</li>
</ul>
</li>
</ul>
</li>
<li>可扩展视角 - 对应好这个指标<ul>
<li>数据分片</li>
<li>负载均衡</li>
</ul>
</li>
<li>Redis API</li>
</ul>
<h3 id="Redis用到的数据结构"><a href="#Redis用到的数据结构" class="headerlink" title="Redis用到的数据结构"></a>Redis用到的数据结构</h3><ul>
<li>跳表</li>
<li>布隆过滤器</li>
<li>位图</li>
<li>延时队列</li>
</ul>
<h3 id="Redis用到的算法"><a href="#Redis用到的算法" class="headerlink" title="Redis用到的算法"></a>Redis用到的算法</h3><ul>
<li>限流算法</li>
<li>GeoHash</li>
</ul>
<h2 id="Redis的实践"><a href="#Redis的实践" class="headerlink" title="Redis的实践"></a>Redis的实践</h2><ul>
<li>Redis做消息队列，业界有日活百万的案例.</li>
<li>Redis所在的宿主机挂了之后怎么办？</li>
</ul>
<h2 id="Redis的未来"><a href="#Redis的未来" class="headerlink" title="Redis的未来"></a>Redis的未来</h2>]]></content>
      <categories>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>缓存</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之离弦之箭 - 高并发</title>
    <url>/2020/10/06/concurrent/</url>
    <content><![CDATA[<p>一个系统如果足够稳定，而且客户对它也很满意，我们一般没有去优化它的必要，但如果随着用户量增加，系统变的缓慢，我们就有优化它的必要性了. 借用我前面博文《一种可以衡量事物的指标-快和好》，一个系统追求的目标之一是快，但快的前提的是<br>好，也就是稳，否则步伐太大了就容易扯着蛋了. 优化系统是大的话题，这里只讨论其中的一个小领域-高并发.<br>任何一个计算机的问题，都能从现实中找到雏形和模型，高并发也不例外。高并发的内容还是比较多的，所以不同类型的高并发问题需要不同的角度，就好像作战的时候，战斗机需要在高空1万米，也需要突然下降到高空1千米，也有可能是潜艇下沉到水下几千米配合作战. 这种思维模型我给它取了个名字叫“海陆空”模型.</p>
<ul>
<li>什么是并发？</li>
<li>为什么需要并发？</li>
<li>如何使用并发？</li>
<li>并发的身影</li>
<li>并发的未来？</li>
</ul>
<p><img src="/images/2020/arrow.jpeg"></p>
<h2 id="什么是并发？"><a href="#什么是并发？" class="headerlink" title="什么是并发？"></a>什么是并发？</h2><h3 id="从现实的角度，并发像什么？"><a href="#从现实的角度，并发像什么？" class="headerlink" title="从现实的角度，并发像什么？"></a>从现实的角度，并发像什么？</h3><p>  在现实世界里，我们做事是有顺序的，比如做完了事情1，再做事情2, 也有可能是没有顺序的, 事情1和事情2是可以同时进行的. 所以我们在这里看到两个特征</p>
<ul>
<li>事情是可以拆解的</li>
<li>从人的观察者角度，在一个时间窗口(t0-t1)内，事情是同时进行的.<br>在这里，我没有没有提到任何程序领域的术语，换句话说，上面的这两个特征在管理学是常见的，这两个特征可以认为是并发的雏形.<br>本文仅仅讨论狭义上的并发：基于线程的多任务。</li>
</ul>
  <span id="more"></span>
<h3 id="从编程的角度，并发要解决的核心问题是什么？"><a href="#从编程的角度，并发要解决的核心问题是什么？" class="headerlink" title="从编程的角度，并发要解决的核心问题是什么？"></a>从编程的角度，并发要解决的核心问题是什么？</h3><p>  并发要解决的核心问题是 </p>
<ul>
<li>分解 - 如果要对一件事情进行并发处理，那么这件事情最起码是可以分解的, 如果这件事情不能分解，那么并发无从谈起.</li>
<li>协作 - 这个问题不具备必然性，仅仅发生在事情1和事件2有关系的前提下，比如事情2依赖事件1的结果</li>
<li>互斥 - 处理事件1和事件2的时候需要访问同一个资源，如果保证访问资源的时候只能自己访问，而且要保证系统的整体的利用率？<br>以上三个问题可以说是层层递进的, 有了分解才有可能协作和互斥.<br>这就是任何编程领域，并发要解决的所有问题种类吗？答案是肯定的.<br>但有人可能很疑惑，并发不是会牵涉到什么自旋锁，可重入锁，分片还有什么volatile么？<br>哦，不急，因为现在战斗机还在天上1万米的高空巡逻，遇到特定的问题和特定的目标慢慢会下降的.<br>也可以想象这是一部小说，这部小说有三条主线，这三条主线最终会汇聚到一起的.</li>
</ul>
<p>  在开发者眼里，并发的目的和远景是：用一种符合开发者认知模型的方式来解决上述三个问题. 换句话说，就是认知成本少点。 为什么这件事情很重要?</p>
<ul>
<li>我们开发软件是属于工程领域而不是科学领域，所以安全可控是首要目标，要是谁写个高并发，写的很炫，但很难维护，很难测试，最终会让人抓狂.</li>
<li>人是习惯的产物，就比如做西红柿炒蛋这个菜，我们知道放完鸡蛋会放西红柿，而不是黄瓜. 所以高并发的编写应该符合人的认知模型.</li>
</ul>
<h3 id="并发遇到的阻碍是什么？"><a href="#并发遇到的阻碍是什么？" class="headerlink" title="并发遇到的阻碍是什么？"></a>并发遇到的阻碍是什么？</h3><p>  并发要解决的问题都是有实际意义的事情，看起来很美好。就好比我要成为富豪一样，这件事情本身没有错，但容易吗？不容易，因为资源有限，能力有限.<br>  并发要落地，还得需要计算机来帮忙，所以得看看计算机能不能让我很容易的达到并发这个目标，最好是我说一句话就能达到并发的目的.<br>  一个基本事实：CPU, 内存, I/O的速度不匹配. 根据木桶原理，一个系统的瓶颈取决于最短的那块木板.</p>
<blockquote>
<p>姚明在休斯敦的时候，战术基本上是围绕着姚明来打造的，后来麦迪加盟火箭，管理层对麦迪的要求是球队的大战略是必须等姚明落位之后才能开始进攻，麦迪只能同意这种战略。火箭的慢的原因是在于姚明。无奈啊，黄种人跑不动。</p>
</blockquote>
<p>  现在基本事实已经确定了，可以说这些基本事实是原罪，是障碍的起点。可能有人要问，为什么不能把 CPU, 内存, I/O的速度弄成一样呢？这个从硬件上来说真不好弄.<br>  既然从硬件层面上解决不了这个问题，那就从设计和策略的角度上来解决. 计算机系统的参与方都开始大展拳脚.<br>  一个重要的规律： 任何的方案有好处，也有代价，这个代价可以理解为成本或者副作用，应了那句天下没有免费的午餐.<br>    * 计算机体系结构的策略 - 增加 CPU 缓存，平衡CPU和内存之间的速度差异<br>      * 在单核时代，只有一个CPU缓存，CPU缓存和内存之间的一致性很容易解决。一个线程更改了CPU的缓存，另外一个线程是可以知道这个CPU缓存被更改了的. 这个知道就叫做“可见性”.<br>      * 在多核时代, 有多个CPU缓存，线程1操作 CPU1缓存，线程2有可能操作的是CPU2缓存。这个时候线程2就不知道线程1的操作结果了.<br>    * 操作系统的策略 - 增加进程，线程，平衡 CPU和 I/O之间的速度差异<br>      * 我们之所以能一边听音乐，一边发微信，是因为操作系统多进程的功劳，换句话说操作系统定义了时间片这个概念，比如在最开始的10毫秒把CPU的资源分给进程A,接下来的10毫秒把CPU的资源分给进程B, 这样能充分利用CPU资源(充分利用资源这是一种政治正确，谁会鼓励说浪费资源呢？)，给用户的感觉就是同时做两件事情.<br>      * 正如去医院看病的时候，每个人都拿了一些号，叫到张三，张三就进去会诊，在会诊的时候，医生要让张三去抽血，才能得出完整的会诊结论，在张三出去抽血的时候，医生在干嘛呢？在等张三吗？显然不是. 可继续为李四会诊，等张三抽血完毕，再为张三会诊. 在这里可以看到, CPU和医生的角色有点类似.<br>      * 但这样的策略会带来的一些问题，从操作的角度来说，会有任务切换这个概念. 举个例子, count = count + 1 是语言层面的代码，这个代码在CPU的角度看来是三个指令, 所谓的任务切换是CPU指令级别的切换，而不是语言层面的切换. 所以我们希望能有一个策略保证任务切换的效果是基于语言层面.<br>    * 编译器的策略 - 优化指令的执行顺序<br>      * 编译器会对一些代码的执行顺序进行优化, “a=6；b=7”优化之后可能变为”b=7;a=6;”, 这个代码看上去正常, 但在某些例子上却有意想不到的情况，比如双重加锁的单例模式，会引发空指针异常.</p>
<h2 id="为什么需要并发？"><a href="#为什么需要并发？" class="headerlink" title="为什么需要并发？"></a>为什么需要并发？</h2><p>  系统是要追求快，在快的基础上追求好.</p>
<h2 id="如何使用并发？"><a href="#如何使用并发？" class="headerlink" title="如何使用并发？"></a>如何使用并发？</h2><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>  大体有四个原则，层层递进</p>
<ul>
<li>不要使用并发</li>
<li>如果确实要使用并发，避免有共享变量</li>
<li>如果确实需要共享变量，那么保证变量是只读的</li>
<li>如果不能保证变量是只读的，那么要确保变量访问的时候要同步。基本上就是讨论各种各样的锁.</li>
</ul>
<h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ul>
<li>Immutability</li>
<li>Copy-on-Write</li>
<li>ThreadLocal</li>
<li>Guarded Suspension</li>
<li>Balking</li>
<li>Thread-Per-Message</li>
<li>Worker Thread</li>
<li>两阶段终止</li>
<li>生产者消费者</li>
<li>Actor</li>
<li>软件事务内存</li>
<li>协程</li>
<li>CSP</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li>Java是如何解决并发路上的障碍的？<ul>
<li>可见性和顺序问题<ul>
<li>final<ul>
<li>表明这个变量是不可变的</li>
</ul>
</li>
<li>volatile<ul>
<li>volatile int x = 0, 告诉编译器对x的读写不要用CPU缓存</li>
<li>在JDK1.5以前，忽略了多核的情况，在JDK1.5对volatile进行了增强.</li>
</ul>
</li>
<li>synchronized</li>
<li>8个Happens-Before原则<ul>
<li>程序的顺序性规则</li>
<li>Volatile变量规则</li>
<li>传递性</li>
<li>管程中锁的规则 - 对一个锁的解锁 Happens-Before 于后续对这个锁的加锁</li>
<li>线程Start规则</li>
<li>线程Join规则</li>
<li>线程中断规则</li>
<li>对象终结规则</li>
</ul>
</li>
<li>小结<ul>
<li>可见性和顺序性问题主要由Java内存模型的规范来解决</li>
<li>A Happens-Before B 意味这 A做了某件事情B是知道的。</li>
</ul>
</li>
</ul>
</li>
<li>原子性问题<ul>
<li>原子性问题是由CPU线程切换引起的，所以禁止CPU线程切换是一个很自然的思路，要禁止CPU线程切换就要禁止中断，但禁止中断这种做法只在单核CPU上有效</li>
<li>互斥就是要保证同一时刻只有一个线程执行<ul>
<li>synchronized是Java对管程的一种实现<ul>
<li>一把锁可以锁住多个资源</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>如何实现等待通知机制?<ul>
<li>synchronized 配合 wait()、notify()、notifyAll()</li>
</ul>
</li>
<li>Lock和Condition</li>
<li>Semaphore</li>
<li>ReadWriteLock</li>
<li>StampedLock</li>
<li>CountDownLatch和CyclicBarrier</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>锁<ul>
<li>一把锁可以锁住多个资源<ul>
<li>资源和资源之间有协作关系</li>
</ul>
</li>
<li>用不同的锁对受保护资源进行精细化管理，能够提升性能，可能的代价就是死锁。<ul>
<li>资源和资源之间没有协作关系</li>
</ul>
</li>
<li>多把锁不可以锁住一个资源</li>
<li>用锁两大要素：锁定的对象和锁定的资源.</li>
</ul>
</li>
</ul>
<h2 id="并发的身影"><a href="#并发的身影" class="headerlink" title="并发的身影"></a>并发的身影</h2><h2 id="并发的未来"><a href="#并发的未来" class="headerlink" title="并发的未来"></a>并发的未来</h2>]]></content>
      <tags>
        <tag>Java</tag>
        <tag>高并发</tag>
        <tag>高性能</tag>
      </tags>
  </entry>
  <entry>
    <title>数据，信息，知识和智慧</title>
    <url>/2020/09/10/data-knowledge/</url>
    <content><![CDATA[<p>网络上有一副有名的图片，形象的描述了数据，信息，知识，智慧的大体关系.<br><img src="images/2020/data-knowledge.png"></p>
<p>下面简单的谈谈我对这幅图片的个人理解.</p>
<ul>
<li>数据</li>
<li>信息</li>
<li>知识</li>
<li>智慧</li>
</ul>
<span id="more"></span>
<h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>  <img src="/images/2020/data.jpg"><br>  一般而言， 数据是我们观察到的或者看到的现象.</p>
<ul>
<li>程序的日志</li>
<li>每天的步行记录</li>
<li>太阳升起了</li>
</ul>
<p>  数据是属于事实层面的东西。数据没有真假，不管你相信不相信， 它就在那里.</p>
<h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><p>  <img src="/images/2020/chart.png"><br>  信息是对数据进行的简单加工.</p>
<ul>
<li> 每天步行的数量， 再加上时间，可以计算出上午步行了多少步，下午步行了多少步. 那么这就是一段信息</li>
<li>菜谱</li>
<li>两人之间日常的交流</li>
<li>软件的安装手册</li>
<li>新闻报道</li>
<li>一篇耸人听闻的文章，比如《太强了，2020最新Java核心知识点整理，超全!》</li>
<li>一个谣言或者情报</li>
<li>代码库</li>
</ul>
<p>  我们日常生活中接触到最多的就是信息。信息有真假和对错之分。<br>  比如头条上的文章，有不少是标题党，是垃圾信息. 所以学会鉴别垃圾信息很重要， 可以减轻大脑的负担， 让生活做减法， 做到断舍离.<br>  根据二八法制，生活中真正有用的信息只有20%.</p>
<p>  特点</p>
<ul>
<li>适合解决某个具体的问题。</li>
<li>结果是可以量化的和感知的。</li>
<li>不具备通用型.</li>
</ul>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><p>  <img src="/images/2020/tree.png"><br>  知识是对数据的再加工，知识更多的是属于观点。</p>
<ul>
<li>从上面的步行数据，发现这个人每天步行数有2万步， 可以推断这个人是一个勤劳的人。 这就是一个知识</li>
<li>牛顿的三大定律</li>
<li>各个学科的模型</li>
<li>做事的套路或者最佳实践</li>
<li>思维框架</li>
</ul>
<p>  知识一定是表达了一个观点或者主题。它可以解释世界以及可以更好的指导实践。 根据二八法则， 对自己有用的知识只有20%.<br>  代表性的书籍</p>
<ul>
<li>《设计模式》</li>
<li>《模型思维》</li>
</ul>
<p>  特点 </p>
<ul>
<li>适合解决某一类问题</li>
<li>往往要结合上下文具体情况具体分析</li>
</ul>
<h2 id="智慧"><a href="#智慧" class="headerlink" title="智慧"></a>智慧</h2><p> <img src="/images/2020/yin-yang.png"><br>  智慧严格来说，是知识的一种，也属于一种观点，普适性较强，是老祖宗的长期实践总结下来的知识。</p>
<ul>
<li>哲学。</li>
<li>否极泰来</li>
<li>塞翁失马，焉知非福</li>
<li>以人为本</li>
</ul>
<p>  代表性的书籍</p>
<ul>
<li>《程序员修炼之道》</li>
<li>《周易》</li>
</ul>
<p>  特点</p>
<ul>
<li>适用于时间跨度长的事情</li>
<li>适用于规模比较大的组织</li>
<li>比较灵活</li>
<li>效果很能被直接感知和量化</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>数据属于事实。<br>信息，知识和智慧属于观点。<br>数据的终极使命是形成智慧。<br>数据，信息，知识，智慧都属于知的范畴。知是起点， 知的终点是行.<br>数据 -》信息-》知识-》智慧， 这是一个熵简的过程。<br>我们在求学的过程中， 就是不断读书，形成观点的过程。<br>我们在工作中就是在不断梳理和整合信息，形成观点和解决问题的过程。<br>这是一个无序到有秩序的过程。<br>这是一个需要长时间精细加工的过程。<br>这是一个从无价值到有价值的过程。<br>这是一个从低维到高维的过程。<br>这是一个从具体到抽象的过程。<br>最后最重要的是， 当我们看文章，或者刷微博，或者和别人交流的时候，要能鉴别出什么是有用的数据，什么是有用的信息，什么是有用的知识，什么是智慧</p>
]]></content>
      <categories>
        <category>认知</category>
      </categories>
      <tags>
        <tag>认知</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计原则</title>
    <url>/2020/09/06/design-principle/</url>
    <content><![CDATA[<p>在设计软件模块的时候， 我们往往会遵循一些原则， 这些原则五花八门，有的是来自于面向对象领域， 有的是来自于纯设计领域。 有些原则在某些场景下会不灵光。 这篇文章主要就是聊聊这些原则。<br>在这里， 我将软件设计原则分为三类。</p>
<ul>
<li>总的原则</li>
<li>通用的原则</li>
<li>特殊的原则</li>
</ul>
<span id="more"></span>
<h2 id="总的原则"><a href="#总的原则" class="headerlink" title="总的原则"></a>总的原则</h2><h3 id="没有银弹"><a href="#没有银弹" class="headerlink" title="没有银弹"></a>没有银弹</h3><h2 id="通用的原则"><a href="#通用的原则" class="headerlink" title="通用的原则"></a>通用的原则</h2><h3 id="分离关注点"><a href="#分离关注点" class="headerlink" title="分离关注点"></a>分离关注点</h3><h3 id="正交原则"><a href="#正交原则" class="headerlink" title="正交原则"></a>正交原则</h3><h3 id="好莱坞原则"><a href="#好莱坞原则" class="headerlink" title="好莱坞原则"></a>好莱坞原则</h3><h3 id="单一职责-科里定律"><a href="#单一职责-科里定律" class="headerlink" title="单一职责/科里定律"></a>单一职责/科里定律</h3><h3 id="DRY"><a href="#DRY" class="headerlink" title="DRY"></a>DRY</h3><h3 id="KISS"><a href="#KISS" class="headerlink" title="KISS"></a>KISS</h3><h3 id="最少知识原则-别让我思考"><a href="#最少知识原则-别让我思考" class="headerlink" title="最少知识原则/别让我思考"></a>最少知识原则/别让我思考</h3><h3 id="最小惊讶原则"><a href="#最小惊讶原则" class="headerlink" title="最小惊讶原则"></a>最小惊讶原则</h3><h3 id="YAGNI-不要过度-三适里面的适度"><a href="#YAGNI-不要过度-三适里面的适度" class="headerlink" title="YAGNI-不要过度/三适里面的适度"></a>YAGNI-不要过度/三适里面的适度</h3><h3 id="童子军原则"><a href="#童子军原则" class="headerlink" title="童子军原则"></a>童子军原则</h3><h2 id="特殊的原则"><a href="#特殊的原则" class="headerlink" title="特殊的原则"></a>特殊的原则</h2><h3 id="命令与查询分离"><a href="#命令与查询分离" class="headerlink" title="命令与查询分离"></a>命令与查询分离</h3><h3 id="组合优于继承"><a href="#组合优于继承" class="headerlink" title="组合优于继承"></a>组合优于继承</h3><h3 id="约定优于配置"><a href="#约定优于配置" class="headerlink" title="约定优于配置"></a>约定优于配置</h3><h3 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h3><h3 id="里氏替换"><a href="#里氏替换" class="headerlink" title="里氏替换"></a>里氏替换</h3><h3 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h3><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><h3 id="共同封闭"><a href="#共同封闭" class="headerlink" title="共同封闭"></a>共同封闭</h3><h3 id="共同重用"><a href="#共同重用" class="headerlink" title="共同重用"></a>共同重用</h3><h3 id="封装经常修改的代码"><a href="#封装经常修改的代码" class="headerlink" title="封装经常修改的代码"></a>封装经常修改的代码</h3><h3 id="The-Rule-of-Three"><a href="#The-Rule-of-Three" class="headerlink" title="The Rule of Three"></a>The Rule of Three</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果将一个软件看做一个系统的话，那么这些原则最终的目的是让这个系统达到一个平衡。 在满足系统目的的前提下， 实现方式尽可能的简单， 尽可能的简单是控制复杂度的另外一种表述。</p>
]]></content>
  </entry>
  <entry>
    <title>人多力量大 - 分布式导言</title>
    <url>/2020/10/11/distributed-system/</url>
    <content><![CDATA[<p>一个人抗一个木头会很重，如果两个人一起抗木头，两个人承担的分量会少点，如果三个人呢？那么三个人承担的分量会更少. 换言之，如果从整体上看，三个人的力量要大于两个人<br>现在的应用的数据变得越来越大，业务的流量越来越多了，分布式成为了一个不可避免的趋势。<br>这篇文章主要谈谈</p>
<ul>
<li>背景</li>
<li>分布式系统的整体设计目标</li>
<li>分布式系统需要解决的具体问题</li>
</ul>
<span id="more"></span>
<p><img src="/images/2020/worker.jpg"></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从一个简单的例子开始: 计算一个nxn的矩阵，可以有两种办法</p>
<ul>
<li>在一台机器上直接计算出来，把结果存放到数据库或者缓存中.</li>
<li>将矩阵划分为四个象限（每个象限为n/2），然后这四个象限分别由四个节点独自处理，处理好的结果最好再后再汇总起来，存放在某个地方. </li>
</ul>
<p>第一种办法就是单机处理，第二种办法就是分布式处理。<br>第二种办法可以看作分布式处理的最简单模型， 它涉及了</p>
<ul>
<li>计算</li>
<li>存储</li>
<li>节点之间的通信 - 这里的节点可以是真实的物理机器，或者虚拟机或手机，或者世界上任意可计算的设备</li>
</ul>
<h2 id="分布式系统的整体设计目标"><a href="#分布式系统的整体设计目标" class="headerlink" title="分布式系统的整体设计目标"></a>分布式系统的整体设计目标</h2><p>从上面的例子，我们可以看到要计算一个矩阵，我们需要CPU计算，然后保存结果。把这个例子延伸到多台机器上，我们可能会面临如下问题:</p>
<ul>
<li>分布式计算</li>
<li>分布式存储</li>
<li>分布式通信 - 这是一个很自然而然的概念，毕竟不同的机器是需要通信的.</li>
<li>分布式资源池化 - 不同机器上的 GPU, 内存形成逻辑上性能更强的GPU, 内存.</li>
</ul>
<p>将上面这四个问题领域合成一个大问题就是： 在某种资源的基础上，通过某种通信方式，进行某种计算，把计算的结果存储在某个地方，然后对外提供一个服务。</p>
<blockquote>
<p>这个结论受极客时间上的某位专家的启发.</p>
</blockquote>
<p>本着站在巨人肩膀上的原则，将上面的结论和我之前提出的又快又好的指标进行整合</p>
<blockquote>
<p>分布式系统的整体目标和远景就是：如何又快又好的实现这个大问题？</p>
</blockquote>
<h2 id="分布式系统需要解决的具体问题"><a href="#分布式系统需要解决的具体问题" class="headerlink" title="分布式系统需要解决的具体问题"></a>分布式系统需要解决的具体问题</h2><h3 id="节点之间的通信问题"><a href="#节点之间的通信问题" class="headerlink" title="节点之间的通信问题"></a>节点之间的通信问题</h3><ul>
<li>直来直往 - 想要和谁说话，直接找那个人. 这就是RPC问题</li>
<li>专职中介 - 想和谁说话，找专门的中介就可以了。 这就是消息队列问题</li>
</ul>
<h3 id="一个集群中的节点管理和互相协作的问题"><a href="#一个集群中的节点管理和互相协作的问题" class="headerlink" title="一个集群中的节点管理和互相协作的问题"></a>一个集群中的节点管理和互相协作的问题</h3><ul>
<li>国不可一日无君 - 一个集群中的leader节点挂了，如何产生一个新的Leader节点, 这就是分布式选举问题.</li>
<li>共商国事 - 如何制定一个国家政策得到大家的认可？在分布式领域就是共识问题。</li>
<li>国家是有秩序的 - 文明有礼，排队买票. 一个集群中的资源，在某个时间窗口只允许特定节点访问，这就是分布式互斥问题.</li>
<li>有始有终 - 一个人做事最好不要半吊子，要么不做，要么完成。在分布式领域，这就是分布式事务问题.</li>
</ul>
<h3 id="分布式资源管理和负载调度"><a href="#分布式资源管理和负载调度" class="headerlink" title="分布式资源管理和负载调度"></a>分布式资源管理和负载调度</h3><ul>
<li>单体调度</li>
<li>两层调度</li>
<li>共享状态调度</li>
</ul>
<h3 id="分布式数据存储"><a href="#分布式数据存储" class="headerlink" title="分布式数据存储"></a>分布式数据存储</h3><ul>
<li>分布式缓存</li>
</ul>
<h3 id="分布式高可靠"><a href="#分布式高可靠" class="headerlink" title="分布式高可靠"></a>分布式高可靠</h3><ul>
<li>负载均衡</li>
<li>流量控制</li>
<li>故障隔离</li>
<li>故障恢复</li>
</ul>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker初回忆</title>
    <url>/2020/09/21/docker/</url>
    <content><![CDATA[<p>从第一次接触Docker到现在大概也有两年多了, 基本上停留在用的层面.<br>现在是时候回顾一下这项革命式的技术了.</p>
<ul>
<li>什么是Docker?</li>
<li>为什么是Docker?</li>
<li>Docker是如何实现的？</li>
<li>Docker的实践</li>
<li>Docker的未来</li>
</ul>
<span id="more"></span>
<h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker?"></a>什么是Docker?</h2><p><img src="/images/2020/docker.png"><br>Docker是一种虚拟化技术，可以实现资源的隔离.<br>在我和朋友的交流中，我对Docker官方Logo挑过刺， 原因是</p>
<ul>
<li>docker的英文原含义是码头工人, Docker的logo没体现这一角色</li>
<li>这个logo上面的的集装箱代表的是一种隔离，但不能表面这是Docker，虚拟机也能隔离，也可以是集装箱啊.</li>
</ul>
<h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>Docker的前身是Linux容器(LXC), 但LXC本身比较复杂，不易于管理和使用。</p>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>Docker有三大核心概念</p>
<ul>
<li>Image - 可以理解为一个文件，这个文件包含了程序，和相应的环境.<ul>
<li>一个镜像可以代表特定的目的。比如最简单的镜像就是copy文件</li>
<li>镜像是分层次的。分层的好处就是镜像可以被复用。</li>
</ul>
</li>
<li>Container - 镜像运行起来可以看作是容器。<ul>
<li>有自己的root文件系统</li>
<li>有自己的网络配置</li>
<li>有自己的进程空间</li>
<li>从操作系统的角度来看， 每个容器都是docker daemon的子进程。</li>
<li>从容器的行为来看，对于运行在容器内的进程来说，容器就是像是操作系统。 有句俗话，如果一个动物走起来像鸭子，叫起来像鸭子，游泳起来也像鸭子，那么它就是鸭子</li>
</ul>
</li>
<li>Repository - 专门用来存放镜像的地方, 所以要获得一个镜像需要知道三种类型的信息<ul>
<li>仓库名</li>
<li>镜像名</li>
<li>镜像的版本</li>
</ul>
</li>
</ul>
<h2 id="为什么是Docker"><a href="#为什么是Docker" class="headerlink" title="为什么是Docker?"></a>为什么是Docker?</h2><h3 id="Docker和虚拟机的区别"><a href="#Docker和虚拟机的区别" class="headerlink" title="Docker和虚拟机的区别"></a>Docker和虚拟机的区别</h3><p><img src="/images/2020/docker-vs-vm.png"><br>虚拟机和Docker一样可以做到资源隔离，那为什么是Docker笑到最后呢？<br>虚拟机模拟的是硬件，在模拟的硬件基础上，安装操作系统，运行程序。<br>Docker没有模拟硬件，直接依赖于宿主的内核.</p>
<ul>
<li>启动速度。Docker启动速度约等于本地进程，虚拟机起码要10几秒以上.</li>
<li>占用资源。假设一个进程是10M, 如果用虚拟机启动，占用的内存资源起码好几百兆，因为虚拟机是整个操作系统的模拟。如果用Docker, 相当于在进程外面包了一个壳,充其量占用的是几十兆的资源.</li>
</ul>
<p>虚拟机的优点是能提供完整的操作系统内核，但Docker没有内核，可以认为Docker没有魂，采用了某些技巧让使用者看起来像虚拟机.</p>
<p>根据10倍好理论，一个事物要代替另外一个事物，仅仅是好一点是不够的，要好就要10倍以上.</p>
<h3 id="Docker的实际应用"><a href="#Docker的实际应用" class="headerlink" title="Docker的实际应用"></a>Docker的实际应用</h3><ul>
<li>构建微服务</li>
<li>让开发和运维之间职责分离和明确，不会打架.<ul>
<li>保证各地方环境的一致性</li>
<li>不会出现那种在本地程序是好的，怎么到了开发环境就报错这种情况. 一般来说，程序员只关心代码和本地开发环境，至于怎么上QA, Staging, Live，这些事情不是程序员关心的。</li>
</ul>
</li>
</ul>
<h2 id="Docker是如何实现的？"><a href="#Docker是如何实现的？" class="headerlink" title="Docker是如何实现的？"></a>Docker是如何实现的？</h2><h3 id="Docker隔离资源原理"><a href="#Docker隔离资源原理" class="headerlink" title="Docker隔离资源原理"></a>Docker隔离资源原理</h3><ul>
<li>Namespaces - 让进程看来拥有自己的资源。有以下6种隔离<ul>
<li>主机名和域名</li>
<li>进程间通信</li>
<li>进程号</li>
<li>网络</li>
<li>文件系统</li>
<li>用户管理</li>
</ul>
</li>
<li>CGroups -  Linux Control Group. 光隔离还没有用，因为进程还是可以无限制访问宿主加上的资源<ul>
<li>限制内存</li>
<li>限制CPU</li>
<li>限制磁盘</li>
<li>限制网络</li>
<li>局限性<ul>
<li>/proc目录下的文件记录的是宿主机的内核运行的信息，会造成内核信息的泄露。</li>
</ul>
</li>
</ul>
</li>
<li>rootfs<ul>
<li>包含了一个操作系统的文件,配置和目录，但不包含内核，内核用的还是宿主机的。</li>
<li>rootfs让环境的一致性是成为了可能.</li>
<li>Windows上的Docker和Mac上的Docker因为没有Linux内核，只能基于虚拟化技术来完成. 所以一开始在windows接触Docker的时候，不知道为什么要安装一个虚拟机.</li>
</ul>
</li>
<li>一些事实<ul>
<li>无论怎么隔离，这些进程是共享宿主机的内核。所以在windows宿主机上运行linux容器，或者在低版本的linux宿主机上运行高版本的linux容器是行不通的</li>
<li>Docker容器内修改时间，目前来看不会导致宿主机Mac的时间被修改.</li>
</ul>
</li>
</ul>
<p>  所以一个容器就等于宿主机上启动了一个进程</p>
<ul>
<li>这个进程启用了多个Namespace</li>
<li>受 CGroup控制</li>
</ul>
<p>  <img src="/images/2020/dance.png"><br>  限制这个理念也正是我之前提到的系统的约束，戴着脚镣跳舞才能守规矩.</p>
<h2 id="Docker的实践"><a href="#Docker的实践" class="headerlink" title="Docker的实践"></a>Docker的实践</h2><h3 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h3><ul>
<li>构建镜像 - 前提是有Dockerfile存在<pre class="line-numbers language-none"><code class="language-none">docker build -t ricky:0.0.1 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>查看镜像<pre class="line-numbers language-none"><code class="language-none">docker image list
或
docker images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>启动镜像<pre class="line-numbers language-none"><code class="language-none">docker run -t -i ricky:0.0.1 &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>查看Container<pre class="line-numbers language-none"><code class="language-none">运行中的容器
docker ps
或
docker container ls
所有容器
docker ps -a
或
docker container ls -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="Docker的未来"><a href="#Docker的未来" class="headerlink" title="Docker的未来"></a>Docker的未来</h2><p>Docker的启动速度接近于本地进程了，所以在启动速度这块未来不可能有大的进展了.<br>Docker需要做的是规范公用镜像，让公用镜像更小，更安全。<br>Docker如果运行在物理机，如何保证Docker内部的东西不暴露给外界，且不侵害到物理机呢？<br>Docker需要强大它的生态圈</p>
]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>一种可以衡量事物的指标-快和好</title>
    <url>/2020/08/30/good-quick/</url>
    <content><![CDATA[<p>在生活中我们会遇到各种不同的事物, 比如一辆汽车, 一部电影, 一本书, 一个技术, 一个大型项目, 一家公司, 这些事物都是处于不断的发展当中, 并且有着自己的阶段性形态或者终极形态. 有没有一种简单的方法来衡量一个事物?<br>这里有两个指标可以衡量一个事物</p>
<ul>
<li>好</li>
<li>快</li>
</ul>
<span id="more"></span>
<h2 id="好"><a href="#好" class="headerlink" title="好"></a>好</h2><p>这里的好意味着正确的结果, 高的质量, 一个事物好到极致就是一件艺术品. 所以好最基本的要求， 就是一个事物的结果至少是对的。 另外好是一个主观性比较强的指标.<br><img src="/images/2020/constantin.jpg"></p>
<ul>
<li>一段代码易懂而且没有Bug, 容易扩展, 耐操, 那可以说这段代码是好的代码.</li>
<li>一个框架使用起来简单,没有侵入性, 遇到问题社区里有相应的解决方案, 可以说这是一个好的框架.</li>
<li>好在架构层面可以理解为高可用，可扩展</li>
<li>一个产品解决了用户的痛点问题, 提升了用户流量, 那么这是一个好的产品.</li>
<li>一个组织有愿景, 始终以正确的方式在做正确的事情, 那么这是一个好的组织</li>
</ul>
<h2 id="快"><a href="#快" class="headerlink" title="快"></a>快</h2><p>快是指限定时间内完成某件事情的度量, 这里是一个独立的维度.<br><img src="/images/2020/high-speed-rail.jpg"><br>人类社会发展过程当中， 隐含了两个发展因素</p>
<ul>
<li>能量。从钻木取火， 到蒸汽机， 到核能，无疑让事物变的越来越快。</li>
<li>信息。 从甲骨文，羊皮卷， 到印刷术， 再到如今的电脑， 信息传播的速度越来越快。但人脑始终没跟上信息爆炸的速度。<br>快会衍生出下面几个指标:</li>
<li>多<ul>
<li>以前一个小时可以完成一件事情, 现在做事情快了之后, 一个小时可以完成两件事情, 相应的产出就变多了.</li>
</ul>
</li>
<li>省 <ul>
<li>以前一个小时可以完成一件事情, 现在做事情快了之后, 那么完成一件事情只需要半个小时, 就是时间成本降低了.</li>
</ul>
</li>
</ul>
<p>具体的一些例子</p>
<ul>
<li>快在架构层面可以理解为高性能</li>
</ul>
<h2 id="快和好"><a href="#快和好" class="headerlink" title="快和好"></a>快和好</h2><p>快和好是一对矛盾体,快和好衍生出的另外一个指标就是“成本/收益”, 也可以称作为”性价比“。<br>一个完美的组织应当有正确的目标, 然后以正确而且快速的方式去实现这个目标.<br>但很显然, 现实不是如此.<br>一个创业公司, 做事情讲究的是快, 快速试错, 快速获得反馈, 然后快速调整. 从代码的角度来看, 命名是不是优雅可读? 不重要, 代码需要可扩展性么? 不重要.一顿操作猛如虎, 简单的说, 就是“猛快糙”.<br>一个成熟的公司, 还是拿写代码来说,写代码的时候要考虑到各种各样的情况, 比如以后别人接手你的代码,比人能看懂么?  这个问题可以抽象到什么程度?<br>想起一个伦敦的同事, 偶尔会在群里分享范畴论, 这玩意就是数学领域的知识, 也就是他会尝试去了解数学领域的知识, 在我看来不太实用, 因为大多数开发者是做工程的, 不是做科学的. 如果这个同事去创业公司干活, 估计会很不适应.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一个人或者一个组织很难同时做到快和好.<br>一个系统追求的是“成本/收益”最大化，也某些场合可以理解为期望值最大化。<br>或者如果想做到快和好, 就要去合理的定义快和好, 这是一种平衡, 可以用三适原则里的适度来解释. 就拿一个组织来说, 可以尝试着问如下问题:</p>
<ul>
<li>代码能跑起来是不是意味着好?</li>
<li>框架能用是不是意味着好? 如果能用, 那框架好用么?用起来舒服吗?</li>
<li>一项任务完成之后, 时间有记录么? 平均时间是多少?</li>
</ul>
<p>这些问题如何能被正确的回答, 每个组织内部就会对好和快有一种感性和直觉的认识.</p>
]]></content>
      <categories>
        <category>思维</category>
      </categories>
      <tags>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/07/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>前端发展史</title>
    <url>/2020/09/07/history-of-frontend-development/</url>
    <content><![CDATA[<p>一般来说， 当我们说到前端， 往往是说Web端， 在某些公司， 有大前端的概念， 包括移动端.<br>整个前端发展史可以分为</p>
<ul>
<li>农耕时期</li>
<li>工业化时期</li>
<li>信息化时期</li>
<li>智能时期</li>
</ul>
<span id="more"></span>
<h2 id="农耕时期"><a href="#农耕时期" class="headerlink" title="农耕时期"></a>农耕时期</h2><p>  <img src="/images/2020/agriculture.jpeg"><br>  我不打算从第一个网页诞生的时间开始说起， 让我将时间线拉到2000年左右。<br>  在这个阶段， 做的最好的网页就是搜狐，新浪，网易之类的门户网站。<br>  在这个阶段的技术比较粗燥， 也没有什么交互行为， 就是登陆站点，查看信息。<br>  要设计一个页面， 最简单的方式就是拖拉，Dreamweaver可以做到， Asp也可以做到， 桌面端的VB, Winform也支持拖拉行为。<br>  也没有设计网页有个什么规范或者模式的说法。对比同时期的Spring的概念，比如 AOP, DI. 前端真的太寒碜了。</p>
<h2 id="工业化时期"><a href="#工业化时期" class="headerlink" title="工业化时期"></a>工业化时期</h2><p>  <img src="/images/2020/industry.jpg"><br>  这个阶段开始的标志性事件是2005年出现的Ajax, 它直接将用户体验提升了一个档次.<br>  再后来是2006年出现的Jquery, 彻底颠覆了前端的开发方式，特别是以Jquery为核心的生态的蓬勃发展。Jquery在前端界的地位比不上Spring在Java届的地位, 但接近半个Spring。<br>  前端发展史里面有一条线就是模块发展的历史</p>
<ul>
<li>2005年左右Ajax</li>
<li>2006年左右Jquery</li>
<li>模块化<ul>
<li>requirejs</li>
<li>commonjs</li>
</ul>
</li>
<li>node 2009年</li>
</ul>
<h2 id="信息化时代"><a href="#信息化时代" class="headerlink" title="信息化时代"></a>信息化时代</h2><p>  <img src="/images/2020/workflow.jpeg"></p>
<ul>
<li>规范化<ul>
<li>es6</li>
<li>html5</li>
</ul>
</li>
<li>组件化<ul>
<li>webcomponent</li>
</ul>
</li>
<li>工程化<ul>
<li>webpack</li>
<li>TypeScript</li>
</ul>
</li>
</ul>
<h2 id="智能化时代"><a href="#智能化时代" class="headerlink" title="智能化时代"></a>智能化时代</h2><p><img src="/images/2020/intelligent.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>互联网大事记</title>
    <url>/2020/10/27/history-of-internet/</url>
    <content><![CDATA[<p>在之前我有提到，人类社会发展有一条线索是关于信息的，人类社会的发展史就是一个信息数量越来越多，信息连接越来越快，信息载体越来丰富的历史.<br>想想古时候，将军打了胜仗，如何将捷报传给皇帝呢？只能通过马，每个几十公里，会有一个驿站，这已经是当时的最快方式。试想一下，如果那个时候能打个电话给皇帝，这效率该有多高啊。</p>
<span id="more"></span>
<p>现在的马拉松比赛就是为了纪念菲迪皮茨这样一位古时的英雄.</p>
<blockquote>
<p>希波战争波斯人和雅典人在离雅典不远的马拉松海边发生的，雅典人最终获得了反侵略的胜利。为了让故乡人民尽快知道胜利的喜讯，统帅米勒狄派一个叫菲迪皮茨的士兵回去报信。<br>菲迪皮茨是个有名的“飞毛腿”，为了让故乡人早知道好消息，他一个劲地快跑，当他跑到雅典时，已上气不接下气，激动地喊道“欢……乐吧，雅典人，我们……胜利了”说完，就倒在地上死了。</p>
</blockquote>
<p>要是有了现在的通信技术，一切都会变的不一样。 互联网发展至今，已经有几十年历史了，如果它渗透到人们生活的方方面面，以致于人们认为互联网的存在就像水存在一样自然.</p>
<p>以史为鉴，可以知兴衰. 把时钟拨回到从前，看看之前的通信和互联网历史.</p>
<ul>
<li><p>1839年：真正投入使用营运的电报线路于在英国最先出现</p>
</li>
<li><p>1850年：首条海底电缆横越英吉利海峡，把英国及欧洲大陆连接起来</p>
</li>
<li><p>1865年：麦克斯韦发表论文《电磁场的动力学理论》，预言了光的电磁波理论.</p>
</li>
<li><p>1895年：意大利人马可尼首次成功收发无线电电报</p>
</li>
<li><p>1969年：阿帕网是第一个使用包交换技术的网络</p>
<blockquote>
<p>1969年10月29日，斯坦福大学和加州大学洛杉矶分校的计算机首次连接了起来, 它们是互联网上的第一台主机. 在网络上发送的第一条消息应该是“Login”，但据报道，在发送字母“g”的时候，连接断了</p>
</blockquote>
</li>
<li><p>1969年：Unix</p>
</li>
<li><p>1971年：电子邮件出现.</p>
<blockquote>
<p> 电子邮件于1971年首次被Ray Tomlinson开发出来，他也是那个决定使用“@”符号将用户名和电脑名字（后来变成了域名）分开的人</p>
</blockquote>
</li>
<li><p>1971年：古登堡计划和电子图书</p>
<blockquote>
<p>第一次有人想让图书变成电子书</p>
</blockquote>
</li>
<li><p>1972年：CYCLADES</p>
<blockquote>
<p> 法国于1972年开始建立自己的类似于阿帕网的项目. 创新的想法：主机只负责数据的传输而不是网络本身</p>
</blockquote>
</li>
<li><p>1973年：跨大洲的连接和电子邮件的普及</p>
<blockquote>
<p>阿帕网第一次跨过了大西洋，和英国伦敦的一所大学连了起来。同一年，电子邮件占所有网络应用的75%</p>
</blockquote>
</li>
<li><p>1974年：TCP/IP协议的诞生</p>
</li>
<li><p>1975年：电子邮件客户端</p>
<blockquote>
<p>电子邮件第一次有了转发和回复功能</p>
</blockquote>
</li>
<li><p>1977年：电脑上的调制解调器</p>
</li>
<li><p>1978年：电子公告栏系统（BBS）- 网络上的黑板</p>
</li>
<li><p>1978年：垃圾邮件的诞生</p>
<blockquote>
<p>Gary Thuerk给加利福尼亚的600个用户发了垃圾邮件</p>
</blockquote>
</li>
<li><p>1979年：MUD——最早的多角色游戏</p>
<blockquote>
<p>MUD是完全基于文本的虚拟世界，将角色扮演游戏、互动、剧情和网上聊天结合在了一起</p>
</blockquote>
</li>
<li><p>1979年：新闻组（Usenet）</p>
<blockquote>
<p>新闻组是一个基于互联网的讨论系统</p>
</blockquote>
</li>
<li><p>1982年：第一个表情</p>
<blockquote>
<p>1982年Scott Fahlman在一个笑话之后用了一个:-）</p>
</blockquote>
</li>
<li><p>1983年：阿帕网上的计算机通过TCP/IP交换数据</p>
<blockquote>
<p> 阿帕网开始通过Vinton Cerf开发的TCP/IP协议交换数据。数以百计的电脑都连到了交换机上，服务器这一名字也是83年开始出现的.</p>
</blockquote>
</li>
<li><p>1984年：域名系统（DNS）</p>
<blockquote>
<p>DNS最大的意义是让IP地址有了一个名字，这样人们会更容易记住这个名字.</p>
</blockquote>
</li>
<li><p>1985年：虚拟社区</p>
<blockquote>
<p>Stewart Brand和Larry Brilliant于85年2月开发。它开始是为了让全球的读者和作者进行交流，并且是一个开放的但是却是“有文化底蕴的、高智商的”人的聚会点</p>
</blockquote>
</li>
<li><p>1986年：协议战争</p>
<blockquote>
<p>OSI PK TCP/IP, 最终OSI倒下.</p>
</blockquote>
</li>
<li><p>1987年：互联网在成长</p>
<blockquote>
<p>1987年，互联网上有近三万台主机。以前的阿帕网协议只能限于有1000台主机，但是采用了TCP/IP标准后，使得有更多的主机变成了现实</p>
</blockquote>
</li>
<li><p>1988年：IRC——互联网中继聊天</p>
<blockquote>
<p>实时聊天的先驱</p>
</blockquote>
</li>
<li><p>1988年：第一次恶意的攻击</p>
<blockquote>
<p> 第一个主要的互联网蠕虫是1988年发行的。它被称为“莫里斯蠕虫”，作者是Robert Tappan Morris，导致了大部分地区的互联网的中断。</p>
</blockquote>
</li>
<li><p>1989年：美国在线（AOL）诞生了 - 最大的上网服务提供商</p>
</li>
<li><p>1989年：万维网（WWW）的推出</p>
</li>
<li><p>1990年：第一个商业性的拨号上网ISP</p>
</li>
<li><p>1990年：万维网协议尘埃落定</p>
</li>
<li><p>1991年：第一个网页诞生了</p>
<blockquote>
<p>前端开发者应该非常激动</p>
</blockquote>
</li>
<li><p>1991年：第一个基于内容的搜索协议 - Gopher</p>
</li>
<li><p>1991年：MP3成为标准</p>
</li>
<li><p>1991年：第一个摄像头</p>
<blockquote>
<p>它部署在剑桥大学的计算机实验室，其唯一目的是监视一个咖啡壶，使实验室用户可避免将时间浪费在一个空的咖啡壶上</p>
</blockquote>
</li>
<li><p>1993年：Mosaic——第一个图形化浏览器</p>
</li>
<li><p>1993年：白宫和联合国的网站上线了</p>
</li>
<li><p>1994年：网景浏览器</p>
</li>
<li><p>1994年: 中国正式接入因特网</p>
<blockquote>
<p>用得是一根64K的国际专线</p>
</blockquote>
</li>
<li><p>1994年: 国内第一个Web服务器</p>
<blockquote>
<p>1994年5月15日，中科院高能物理研究所，建立了国内第一个Web服务器，推出中国首套网页，用于介绍高科技发展情况，其中一个栏目还提供包括经济、文化、商贸等方面的信息，后更名为“中国之窗”</p>
</blockquote>
</li>
<li><p>1995年：互联网进入商业领域 </p>
<blockquote>
<p>这一年出现了两家公司，一个是Echo Bay, 另外一个是Amazon</p>
</blockquote>
</li>
<li><p>1995年：雅虎成立</p>
</li>
<li><p>1995年: 中国第一个互联网接入服务商</p>
</li>
<li><p>1996年: 国内第一家网吧</p>
</li>
<li><p>1996年：第一个基于网络的服务HoTMaiL出现</p>
</li>
<li><p>1997年：博客出现</p>
</li>
<li><p>1997年：Netflix</p>
</li>
<li><p>1998年：第一个不是靠传统媒体报道的新闻 - 克林顿/莱温斯基的性丑闻</p>
</li>
<li><p>1998年：Google - 现在还活得很滋润</p>
</li>
<li><p>1998年：基于互联网的文件共享</p>
</li>
<li><p>1999年：利用闲置的资源进行分布式计算</p>
<blockquote>
<p>该项目是一个通过互联网利用世界范围内的300多万台计算机进行计算的分布式计算项目，一旦计算机处于屏幕保护状态，那么意味着计算机就处于空闲状态了，这样就可以利用这些计算机的处理能力了。该项目目的是通过分析天文数据来探索外星球智能的迹象</p>
</blockquote>
</li>
<li><p>2000年：网络泡沫破裂</p>
</li>
<li><p>2001年：维基百科发布</p>
</li>
<li><p>2003年：网络电话</p>
</li>
<li><p>2003年：MySpace成了最流行的社交网络</p>
</li>
<li><p>2004年：Web 2.0 - 这也是前端领域的一个转折点</p>
</li>
<li><p>2004年：社会化媒体和Digg</p>
<blockquote>
<p>Digg对传统的发现和产生网络内容的方式产生了革命性的影响，新闻和网站连接全都是由社区投票民主决定</p>
</blockquote>
</li>
<li><p>2004年：Facebook</p>
</li>
<li><p>2005年：YouTube</p>
</li>
<li><p>2006年：Twitter</p>
</li>
<li><p>2007年：网络电视</p>
<blockquote>
<p>Hulu在2007年首次推出，与美国广播公司、全国广播公司和Fox合资，目的是使流行的电视节目可以在网上观看</p>
</blockquote>
</li>
<li><p>2007年：iPhone</p>
</li>
<li><p>2008年：网络选举</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>网络协议之万维网摇篮 - Http</title>
    <url>/2020/11/09/http/</url>
    <content><![CDATA[<p>凡是与电脑打交道的人，每天必然会用浏览器，只要用了浏览器就需要输入一个网址。这个网址的样子是这样的： “http://”, 没错，它就是这篇文章的主人公。它是如此的熟悉，以致于我们会忽略它的存在.<br>它的前世今生到底是什么样子？</p>
<ul>
<li>背景</li>
<li>http发展历史</li>
<li>未来</li>
</ul>
<span id="more"></span>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>1965年8月24日，Ted Nelson发表在美国计算机协会（ACM）上的论文，用到了词语<br>“hypertext”.  这里的超文本和我们现在说的超文本内涵是不一样的.<br>1989年， 当时在 CERN 工作的 Tim Berners-Lee 博士写了一份关于建立一个通过网络传输超文本系统的报告。这个系统起初被命名为 Mesh。 在随后的1990年项目实施期间被更名为万维网（World Wide Web）. 它有四个部分组成</p>
<ul>
<li>HTML - 一种用来表示超文本的格式</li>
<li>HTTP - 用来传输超文本的协议</li>
<li>网页浏览器 -  WorldWideWeb， 显示超文本的软件。可以打开<a href="https://worldwideweb.cern.ch/browser/">地址</a>，体验一下第一款网络浏览器.</li>
<li>服务器 - CERN httpd.</li>
</ul>
<p>从这里我们可以看到</p>
<ul>
<li>HTML是一种文档格式。再看看现在的Html5，这种变化是相当相当的巨大.</li>
<li>Http不干别的，就是用来显示文档的.</li>
<li>第一个网页浏览器</li>
<li>第一个web服务器</li>
<li>这里没有JS. 换句话说，不能和网页有交互.</li>
<li>这里没有CSS. 换句话说，浏览器的内容没有那么美</li>
</ul>
<p>我们应当记住这个时间点，在这个时间点上出现了好多第一。而且也应该知道，出现这些东西是简单的和朴素的。这个世界是变幻莫测的，有哪几股力量导致了http, html 变成了今天这个样子？</p>
<p><img src="/images/2020/http-version.png"></p>
<h2 id="Http发展历史"><a href="#Http发展历史" class="headerlink" title="Http发展历史"></a>Http发展历史</h2><h3 id="Http-0-9-小学生"><a href="#Http-0-9-小学生" class="headerlink" title="Http/0.9 - 小学生"></a>Http/0.9 - 小学生</h3><p>  Http/0.9在1991年发布。 它是简单的。 它只支持</p>
<ul>
<li>get方法。</li>
<li>只能返回Html格式的文件.<br>也没有错误码，如果发送错误，返回一个错误的Html就可以了. Http 0.9真的可以说是技能单一。 </li>
</ul>
<h3 id="Http-1-0-中学生"><a href="#Http-1-0-中学生" class="headerlink" title="Http/1.0 - 中学生"></a>Http/1.0 - 中学生</h3><p>  Http/1.0在1996年5月发布，它是http0.9的升级版。 它的能力相比0.9就强多了</p>
<ul>
<li>支持状态码</li>
<li>支持多种格式的文档返回类型</li>
<li>缓存 - Expires, Pragma</li>
<li>Keep-alive - 需要显示指定。 默认是短连接</li>
<li>Http头</li>
<li>新的Http方法 - HEAD, POST。 至此，前端开发中最常用的Get, Post方法已经全了</li>
</ul>
<p>  Http/1.0 存在的问题</p>
<ul>
<li>连接无法复用 - 每次通信都是遵循打开连接，接受数据，关闭连接这个过程。这就导致了效率非常低下</li>
</ul>
<h3 id="Http-1-1-大学生"><a href="#Http-1-1-大学生" class="headerlink" title="Http/1.1 - 大学生"></a>Http/1.1 - 大学生</h3><p>  1997年处，Http/1.1发布. Http/1.1的特性在整个Http历史上是革命性的，如同Jquery之于前端, Spring之于Java.<br>  来看看Http/1.1可以做什么</p>
<ul>
<li>持久连接 - 默认支持长连接</li>
<li>pipelining机制 - 客户端同时按顺序发送多个连接，服务端按顺序返回多个响应</li>
<li>新增Http方法 - OPTIONS, PUT, DELETE, TRACE, CONNECT</li>
<li>Host头 - 支持一个物理机部署多个站点。</li>
<li>新的缓存机制 - Cache-control，etag</li>
<li>断点续传 - content-range， 隐含了分而治之的思想。</li>
<li>分块传输 - transfer-encoding: chunk， 隐含了分而治之的思想。</li>
</ul>
<p>  Http/1.1的问题</p>
<ul>
<li>线头阻塞（Head of line blocking）- HOLB</li>
</ul>
<h3 id="Http2-初入职场"><a href="#Http2-初入职场" class="headerlink" title="Http2 - 初入职场"></a>Http2 - 初入职场</h3><p>  2015年，Http2发布。 Http2与Http/1.1的不同是, Http2在应用层面解决了线头阻塞的问题. 为了解决这个问题，等待了15年.<br>  Http2它有什么能力？</p>
<ul>
<li>多路复用<ul>
<li>用一个连接进行数据的收发。看到这里有些朋友是不是眼熟？Node和Redis都是用一个线程来专门做特定的事情。 创建一个连接，或者创建一个线程都是有开销的，既然如此，就用最少的连接或者线程好了。</li>
<li>一个场景：如果在一个连接上，同时想获取js, css, html文件应该怎么办？ 以前的做法是获取完了js文件，然后再获得css文件。一个很自然的想法是将这文件切割和剁碎。然后拿到碎片之后再进行组装，从使用的角度来看，就是并发. </li>
<li>流和帧<ul>
<li>一个流可以理解为一个请求</li>
<li>流可以设置优先级</li>
<li>流由多个帧组成。 每个帧是标记自己属于哪个流。 就好像每个人知道自己属于哪个组织.</li>
<li>帧是基于二进制编码的。</li>
<li>在传输过程中，帧和帧是乱序的。</li>
</ul>
</li>
</ul>
</li>
<li>基于二进制</li>
<li>头部压缩<ul>
<li>基于HPACK算法</li>
<li>在客户端和服务端两端维护各自的字典</li>
</ul>
</li>
<li>服务器推送</li>
</ul>
<p>  Http2是否真的完美无缺？ 当然不是。 Http2只是部分的解决来队头阻塞的问题. 为什么呢？<br>  因为TCP本质上是要保证顺序的，一个发送的包丢了之后，是无法收到后续发送包的响应的。 所以根据木桶原理，即使上层再怎么拆，怎么分，再怎么捣腾也没有.<br>  一场风暴正在酝酿着.</p>
<h3 id="Http-3-职场老油条"><a href="#Http-3-职场老油条" class="headerlink" title="Http/3 - 职场老油条"></a>Http/3 - 职场老油条</h3><p>  既然TCP是队头阻塞的元凶，那么把TCP干了不就可以了？这不可以，因为大多数互联网的设施是基于TCP, 简单的说就是TCP历史包袱较重. 当然了，也不可以对TCP直接修改，这些修改都牵涉到操作系统内核的更新。所以再TCP身上动念头的思路可以停止了.</p>
<p>  换一个思路，可不可以从UDP身上下手？让UDP发100个包，它不会多发也不会少发，但它要是包丢了，它也不管. UDP身上的行为比较简单，可以基于 UDP做些事情.<br>  于是, QUIC登场了。 QUIC的初衷是在UDP的基础上，实现和TCP类似的功能，而且要消除TCP的缺点。所以QUIC的整体战略定位还是蛮高的.<br>  QUIC协议支持：</p>
<ul>
<li>建立连接的优化</li>
<li>拥塞控制的优化</li>
<li>更好的多路复用</li>
<li>前向纠错特性</li>
<li>连接迁移<br>这个五个特性的最终目标都是为了一个字：快.<br>那么Http/3是什么？ Http/3是HTTP/2 over QUIC.<blockquote>
<p>在2018年10月28日的邮件列表讨论中，互联网工程任务组（IETF） HTTP和QUIC工作组主席Mark Nottingham提出了将HTTP-over-QUIC更名为HTTP/3的正式请求，以“明确地将其标识为HTTP语义的另一个绑定……使人们理解它与QUIC的不同”，并在最终确定并发布草案后，将QUIC工作组继承到HTTP工作组。在随后的几天讨论中，Mark Nottingham的提议得到了IETF成员的接受，他们在2018年11月给出了官方批准，认可HTTP-over-QUIC成为HTTP/3</p>
</blockquote>
</li>
</ul>
<h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2>]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>网络协议之保密局 - Https</title>
    <url>/2020/11/17/https/</url>
    <content><![CDATA[<p>安全，这件事情无处不在。<br>我们不希望自己的个人信息被泄漏。<br>我们不希望自己的银行卡密码被盗取。<br>我们不希望自己的一言一行被监控，我们希望能有个人的隐私.<br>作为用户获取信息的入口之一 - 浏览器，它是如何保证信息安全的？ 浏览器安全的主角Https登场了.</p>
<ul>
<li>背景</li>
<li>什么是Https</li>
<li>Https的机制是什么？</li>
<li>安全和Https拾遗</li>
</ul>
<span id="more"></span>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>1994年，网景公司在TCP/IP协议栈上创建了一个传输加密层: SSL(Secure Socket Layer), 这是一个原始规范，但没有发布。<br>1995年2月，修订了规范，并发布了SSL 2.0.<br>1996年，SSL 3.0发布, 得到大规模应用.<br>IETF 觉得SSL有硬伤，只能加密HTTP，为什么不能加密所有的应用层协议呢？<br>IETF在SSL 3.0的基础上， 重新命名和设计了这个协议，取名为TLS。<br>1999年1月, TLS 1.0 发布.<br>2006年4月, TLS 1.1 发布.<br>2008年8月, TLS 1.2 发布.<br>2018年3月, TLS 1.3 发布.</p>
<h2 id="什么是Https"><a href="#什么是Https" class="headerlink" title="什么是Https"></a>什么是Https</h2><p>Https是一种网络协议, Https = Http + SSL/TLS. HTTPS是为了</p>
<ul>
<li>身份验证 - 张三给李四发消息，如何保证李四知道这个消息是张三发送的？</li>
<li>信息泄漏 - 张三给李四发消息，如何保证信息不泄漏给王五？</li>
<li>信息篡改 - 张三给李四发消息，王五拿到信息进行了篡改，李四如何知道这个信息有没有被篡改？</li>
</ul>
<p>以上三个问题可以规约成一个问题：</p>
<ul>
<li>A给B发消息，如果保证只有通信双方知道消息的内容？</li>
</ul>
<h2 id="Https的机制是什么"><a href="#Https的机制是什么" class="headerlink" title="Https的机制是什么"></a>Https的机制是什么</h2><p>在讨论Https的原理和机制之前，先确定几个大的前提</p>
<ul>
<li>操作系统是正常的 - 不要使用盗版操作系统</li>
<li>浏览器是正常的 - 不要下载被改造过的浏览器</li>
<li>CA中心是正常的 - 就好比一个市政府不能是假的.</li>
<li>人是有可能犯错的 - 有时候脑子短路，会有误操作.</li>
<li>服务端的私钥是不会被窃取的</li>
</ul>
<p>引入这些大前提的目的是</p>
<ul>
<li>方便讨论问题，否则会钻进一些牛角尖。</li>
<li>说明没有绝对的安全。</li>
</ul>
<h3 id="Https机制的核心理念"><a href="#Https机制的核心理念" class="headerlink" title="Https机制的核心理念"></a>Https机制的核心理念</h3><ul>
<li>非对称加密实现证书的传输</li>
<li>对称加密进行数据的传输</li>
</ul>
<h3 id="Https的两大阶段"><a href="#Https的两大阶段" class="headerlink" title="Https的两大阶段"></a>Https的两大阶段</h3><ul>
<li>证书验证<ul>
<li>客户端发起连接请求</li>
<li>服务端返回证书</li>
<li>客户端验证证书是否合法，如果不合法则给予警告和提示</li>
</ul>
</li>
<li>数据传输<ul>
<li>证书验证合法之后，客户端生产随机数，用服务端的公钥加密随机数</li>
<li>将随机数发送给服务端， 服务端根据随机数选择对称加密算法。</li>
<li>服务端对要返回的内容进行加密</li>
</ul>
</li>
</ul>
<p><img src="/images/2020/https.png"></p>
<h3 id="中间人攻击-Man-In-The-Middle"><a href="#中间人攻击-Man-In-The-Middle" class="headerlink" title="中间人攻击 - Man In The Middle"></a>中间人攻击 - Man In The Middle</h3><p>中间人攻击是客户端和服务端在通信的时候，通信被第三方劫持，而客户端和服务端都意识不到第三方的存在。<br>一个基本事实:</p>
<ul>
<li>证书只有服务端能拥有.</li>
</ul>
<p>在基于上面提到的几大前提的基础上，要防止中间人攻击的问题就变为：</p>
<ul>
<li>如何让客户端知道这个证书是正常的？</li>
</ul>
<p>客户端如何验证证书的有效性的？</p>
<ul>
<li>验证域名, 有效期</li>
<li>验证根证书来源是否合法</li>
<li>验证证书是否被篡改</li>
<li>验证证书是否被吊销<ul>
<li>黑名单方式 - 定期从CA下载名单列表，效率高，但不实时.</li>
<li>OCSP方式 - 在线验证。效率低，但实时性高.</li>
</ul>
</li>
</ul>
<p>证书的三种类型</p>
<ul>
<li>DV - 验证域名</li>
<li>OV - 验证域名，企业信息</li>
<li>EV - 验证域名，企业信息，律师函等等.</li>
</ul>
<h2 id="安全和Https拾遗"><a href="#安全和Https拾遗" class="headerlink" title="安全和Https拾遗"></a>安全和Https拾遗</h2><p>下面是近些年遇到的一些与安全相关的话题</p>
<ul>
<li>大概4年前左右的样子，公司将全部站点升级为Https.</li>
<li>以前数据库密码是明文保存的，现在已经改成密文了.</li>
<li>代码库里不同的branch有不同的权限.</li>
<li>一些数据库连接字符串在github仓库里是密文保存的，下载到本地之后是明文.</li>
<li>网站有段时间账号攻击，加了验证码作为第一道关卡。</li>
<li>GDPR - 对于欧洲的用户，用户同意之后，数据才能保存到Salesforce里</li>
</ul>
]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之黑暗森林 - JVM</title>
    <url>/2020/09/30/jvm/</url>
    <content><![CDATA[<p>一直以来，JVM是Java开发者进阶过程必然要遇到的一块知识点。JVM离绝大多数开发者的实际工作还是比较远的，让人感觉是一个华而不实的东西。或者说有某一类群体，学习JVM就是为了面试，而且是以机械背诵的方式来学习JVM的，这都已经背离了学习一个知识的初衷.</p>
<ul>
<li>什么是JVM</li>
<li>JVM主要解决了哪些问题？</li>
<li>JVM点滴</li>
</ul>
<span id="more"></span>
<h2 id="什么是JVM"><a href="#什么是JVM" class="headerlink" title="什么是JVM"></a>什么是JVM</h2><p>JVM是一种将高级语言转位机器码的一种工具，目前支持的语言有Java, Clojure, Kotlin, Scala, Groovy.<br>当从整体上讨论JVM的时候，有两种角度</p>
<ul>
<li>JVM规范</li>
<li>JVM实现</li>
</ul>
<p>在Java的世界里, JVM主要干了两件事（本文以下的讨论都以Java为基础）</p>
<ul>
<li>将Java文件转为Class文件</li>
<li>将Class文件转为机器码</li>
</ul>
<p>这两件事描述起来很简单，但从实践角度来说，有很多的细节和技巧，根据我前面提到过的“又快又好”的指标，JVM的目标是如何又快又好的干这两件事.</p>
<h2 id="JVM主要解决了哪些问题"><a href="#JVM主要解决了哪些问题" class="headerlink" title="JVM主要解决了哪些问题?"></a>JVM主要解决了哪些问题?</h2><p>JVM要解决Java开发过程中遇到的所有问题，比如泛型，异常，基本类型等等，根据二八法则，这里我只讨论一些大的问题，其余琐碎的问题以后单独再聊.</p>
<h3 id="内存的分配"><a href="#内存的分配" class="headerlink" title="内存的分配"></a>内存的分配</h3><p>这个问题是个通用的问题，可以简单的描述为：如何将有限的资源合理的分配给各种各样的消费者？或者这个问题接近于现实中的情况：如何将土地和财富分配给社会各阶层的人？<br><img src="/images/2020/jvm-memory.png"><br>所以内存分配的第一个问题，就是要搞清楚: Java里面占用内存资源的有哪几类要素？如图所示</p>
<ul>
<li>线程共享<ul>
<li>堆<ul>
<li>存放new出来的对象</li>
<li>数组</li>
</ul>
</li>
<li>方法区<ul>
<li>类信息<ul>
<li>class文件常量池</li>
</ul>
</li>
<li>静态变量</li>
<li>常量信息</li>
</ul>
</li>
</ul>
</li>
<li>线程不共享<ul>
<li>程序计数器<ul>
<li>程序计数器是记录的字节码的地址信息。每个线程都有自己的程序计数器，当线程的CPU时间片耗尽挂起之后，需要记录字节码的执行位置，当再次获取到时间片之后，可以从上次的位置继续执行。这个功能是必要的，好比我们看完书的一段章节之后，会将这一页折一下或者用笔做个标注.</li>
<li>执行Native方法的时候，程序计数器没有值，因为本地方法不是基于字节码来实现的.</li>
</ul>
</li>
<li>虚拟机栈<ul>
<li>符合栈的特性：先进后出</li>
<li>栈帧 - 方法级别的概念，简单来说，方法执行之前栈帧入栈，方法执行完毕，栈帧出栈。</li>
<li>栈顶的元素通常称为当前栈帧，里面与之相关的方法称之为当前方法.</li>
</ul>
</li>
<li>本地方法栈 - 和虚拟机栈大体类似，但处理的对象不同，本地方法栈处理的是本地方法<ul>
<li>没有栈帧的概念</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="内存的回收"><a href="#内存的回收" class="headerlink" title="内存的回收"></a>内存的回收</h3><p>一个消费者资源使用完了，就需要回收，以便给其他消费者使用。</p>
<!-- TODO: 这个话题升级为垃圾回收，顺便思考一下其他语言. JVM知识体系里必须要掌握的事情 -->

<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><!-- TODO: 这个话题升级为高并发，注意内存模型这个名词，可能有点疑惑 -->

<h3 id="类文件是如何加载的"><a href="#类文件是如何加载的" class="headerlink" title="类文件是如何加载的"></a>类文件是如何加载的</h3><!-- TODO: 类加载的高层次逻辑是什么样的？ -->
<!-- TODO: 为什么在需要有类加载这件事情，而.net的世界里没有这回事？JVM只是体系里必须要掌握的事情 -->


<h2 id="JVM-点滴"><a href="#JVM-点滴" class="headerlink" title="JVM 点滴"></a>JVM 点滴</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>尘埃落定-k8s</title>
    <url>/2020/09/24/k8s/</url>
    <content><![CDATA[<p>K8s已经成为了容器编排的事实标准。k8s一路走来也有些曲折，但最终笑傲群雄。它这一路走来发生了哪些恩怨情仇呢？</p>
<ul>
<li>背景</li>
<li>什么是k8s?</li>
<li>为什么是它？</li>
<li>k8s底层是如何实现的？</li>
<li>k8s生态及相关</li>
</ul>
<span id="more"></span>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  <img src="/images/2020/huashan.png"><br>  想起多年前在上家公司，如果要发布一个功能，得是运维人员先停止服务，然后手动拷贝文件到服务器上，再启动服务，这个过程是纯手工操作，在那时看起来也很自然。在那个时候流行的是在aws或者Openstack上租一台虚拟机，然后通过手动或者脚本的方式来部署程序，这里会遇到一些问题，比如云上的环境和本地环境的不一致，所以云服务厂商比拼的就是谁的环境更能模拟本地环境。</p>
<h3 id="Cloud-Foundry"><a href="#Cloud-Foundry" class="headerlink" title="Cloud Foundry"></a>Cloud Foundry</h3><p>  随着Cloud Foundry的出现，部署的方式稍微有点变化，对于用户来说，只需要将程序打包成它规定的格式，上传上去就好了，Cloud Foundry会调度一个虚拟机来执行这个程序。这个时候会遇到一种情况，如果这个虚拟机执行很多程序会不会导致程序之间会有冲突？不会，Cloud Foundry会为每个应用创建隔离环境. 这一切听起来不错.</p>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>  再后来Docker出现了，现在我们知道，Docker也是为应用创建隔离环境，看上去Docker不必Cloud Foundry高明多少啊。但Docker杀手锏是镜像，镜像意味着无论什么应用都遵循统一的格式和规范, 更关键的是镜像包含了应用所有的依赖，而Cloud Foundry则需要为不同的应用生产不同格式的包，比较繁琐. 在这个时候, Cloud Foundry并没有拥抱Docker作为自己打包的标准，失去了一次战略先机.<br>  Docker虽然可以提供标准格式的包，但它没有部署复杂应用的能力，因为Docker本质还是一个工具.于是在2014年底, Docker公司推出了自己的容器集群管理工具Swarm，打造一套以容器为核心的Paas, 并形成Docker自己的生态.</p>
<h3 id="Mesos"><a href="#Mesos" class="headerlink" title="Mesos"></a>Mesos</h3><p>  Docker此时有个竞争对手叫Mesos, Mesos有个独特的杀手锏就是超大规模的集群管理能力，有超过10000个节点成功案例，而且支持Docker容器部署。<br>  现在看起来，两强相争似乎成了基本盘。</p>
<h3 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h3><p>  但在2014年出现了一个叫Kubernetes的东西. Google, RedHat等基础设施大佬们成立一个名为CNCF的基金会，专门来对抗以Docker为核心的生态的。<br>  所以现在是生态和生态之间的对抗，而不是工具和工具之间的小打小闹。那么K8s是如何破局的呢？</p>
<h3 id="k8s面临的困境"><a href="#k8s面临的困境" class="headerlink" title="k8s面临的困境"></a>k8s面临的困境</h3><ul>
<li>对于Docker生态来说， Swarm和它的配合可以说是如丝滑般的顺畅</li>
<li>对于Mesos来说，它的特长是大规模集群调度.</li>
</ul>
<h3 id="k8s的突围之道"><a href="#k8s的突围之道" class="headerlink" title="k8s的突围之道"></a>k8s的突围之道</h3><p>  很明显，如果模仿Docker或者Mesos，任意一条路都是走不通的. 那么k8s只有两个方向了</p>
<ul>
<li>融合Docker和Mesos的优点</li>
<li>单独开创一个局面<br>K8s选择的是单独开创一个局面：容器编排，并且要在这个领域取得压倒性的优势，并形成降维打击.</li>
</ul>
<h2 id="什么是k8s"><a href="#什么是k8s" class="headerlink" title="什么是k8s?"></a>什么是k8s?</h2><p><img src="/images/2020/orchestration.jpg"></p>
<h3 id="k8s是什么？"><a href="#k8s是什么？" class="headerlink" title="k8s是什么？"></a>k8s是什么？</h3><p>正如背景里面所描述的，k8s是一个容器编排的工具. 所以</p>
<ul>
<li>它本质是个工具</li>
<li>它处理的实体的是容器，这个容器不一定是Docker,说不定将来出来了一个Eocker.</li>
<li>它的重心是编排，有点类似于NBA里面教练对球员的排兵布阵.它提供了一种通用的方式来定义任务之间的关系，并为未来可能存在的新的任务关系提供可扩展性。直白一点，这个世界上所有的任务关系都应该在k8s的掌握之中. <ul>
<li>从抽象的角度来说，一个集合里面由很多元素，编排意味着，要将这些集合分组，可以定义组和组之间的关系，可以定义组内元素之间的关系，可以定义跨组元素之间的关系。</li>
<li>从实践的角度来看，编排意味着<ul>
<li>如果一个服务的访问量过大，如何扩展服务的实例</li>
<li>如何限流</li>
<li>如何保证服务只被合法的用户访问</li>
<li>如何合理分配流量到不同的服务实例</li>
<li>如何知道服务之间的调用链</li>
<li>如何实现服务之间的启动顺序？</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="切入k8s的一种角度"><a href="#切入k8s的一种角度" class="headerlink" title="切入k8s的一种角度"></a>切入k8s的一种角度</h3><p>从宏观的角度来看，K8s有两种角色</p>
<ul>
<li>Master节点 - k8s的大脑，类似于球队的管理层和决策层.<ul>
<li>kube-apiserver</li>
<li>kube-scheduler</li>
<li>kube-controller-manager</li>
</ul>
</li>
<li>Node节点 - k8s任务的执行者。<ul>
<li>kubelet组件， 它可以<ul>
<li>通过CRI同容器运行时打交道，CRI请求会被转换成Linux系统调用</li>
<li>和设备插件打交道，比如GPU</li>
<li>和网络插件和存储插件打交道<br>不管是Master节点还是Node节点，它们运行的载体是物理机或者虚拟机，为了方便理解，可以认为一个节点对应一台物理机.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="k8s的核心概念"><a href="#k8s的核心概念" class="headerlink" title="k8s的核心概念"></a>k8s的核心概念</h3><ul>
<li>Pod - 对于K8s来说, Pod是最小的执行单元,是对容器的抽象和封装.正如研究动植物一样，细胞是最小的单元。一个最小的Pod就是只包含一个容器镜像。也可以认为Pod是k8s的一等公民<ul>
<li>必要性 - 有些应用之间需要通过本地文件交互信息，或者交互很频繁，需要通过LocalHost来通信。在正常情况下，这些应用（进程或者进程组）会被部署在同一台机器上. 容器本身没有管理多个进程的能力， 回到k8s身上, k8s也需要解决这些问题，所以Pod这个概念应运而生，最复杂的Pod应该是很多应用在一起, 所以Pod可以看作是一个逻辑实体.</li>
<li>临时性 - Pod的地址是临时的，但在相应的的物理机或者虚拟上的网卡可以找到这个地址.</li>
</ul>
</li>
<li>Deployment - 一个应用看作是一个实例，那么Deployment可以让Pod有多个实例.<ul>
<li>Deployment和Pod从设计的角度是一种API对象，Depoyment用来管理Pod。一种API对象来管理另外一种API对象，在K8s里称之为控制器模式.</li>
<li>Deployment是让Pod活跃起来的一个API对象，其他对象没有这个功能.</li>
<li>Deployment隐含里水平扩展和收缩的功能.</li>
<li>正常Deployment的定义包含两部分<ul>
<li>Pod副本的数量 - spec.replicas</li>
<li>Pod的描述 - spec.template</li>
</ul>
</li>
<li>对于一些特殊的应用比如Sticky Session, 需要自定义Deployment</li>
</ul>
</li>
<li>ReplicaSet - Deployment是通过ReplicaSet来控制Pod的.<ul>
<li>ReplicaSet定义了Pod的数量</li>
<li>Deployment控制了ReplicaSet的个数</li>
</ul>
</li>
<li>Service -  由于Pod每次启动之后，IP地址都会变化，这样就导致了Pod之间相互通信很困难，必须有一个东西来解决这个问题，Service这个概念应用而生，它代表的是稳定的地址和端口.<ul>
<li>一个Service可以对应多个Pod,所以Service需要有负载均衡的能力.</li>
</ul>
</li>
<li>Ingress - Service在默认情况下，只能在k8s集群内被访问，如果想要让外网可以访问service,就需要做有些额外的事情, Ingress就是干这个的.</li>
<li>Secret - PodA 访问 PodB 需要带上用户名和密码，那么这些用户名和密码就放在Secret对象里，这个对象本质上ETCD里的一条记录.</li>
</ul>
<h2 id="为什么是它？"><a href="#为什么是它？" class="headerlink" title="为什么是它？"></a>为什么是它？</h2><p>K8s能成为容器编排领域的事实标准，与它的正确的战略定位分不开，也与它本身自带“贵族气质”有关.<br>K8s每一个核心特性的推出，都来自于Borg/Omega系统的设计和经验, 可以说是站在巨人肩膀上, 而且这些特性借助于开源社区的力量，变得越来越好.</p>
<h2 id="k8s底层是如何实现的？"><a href="#k8s底层是如何实现的？" class="headerlink" title="k8s底层是如何实现的？"></a>k8s底层是如何实现的？</h2><h2 id="k8s生态及相关"><a href="#k8s生态及相关" class="headerlink" title="k8s生态及相关"></a>k8s生态及相关</h2>]]></content>
      <categories>
        <category>基础设施</category>
      </categories>
      <tags>
        <tag>容器</tag>
        <tag>PaaS</tag>
        <tag>基础设施</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的I/O模型</title>
    <url>/2020/10/09/linux-IO/</url>
    <content><![CDATA[<p>I/O顾名思义就是输入输出，I/O设备可以指网卡，键盘，打印机等，在这里为了方便讨论，I/O专门指网络设备.<br>之前也看过不少专门讲I/O的帖子和文章，其中有不少帖子有误导的嫌疑，比如打一些不恰当的比喻，所以我有了一种想重新梳理一下I/O模型的冲动。</p>
<ul>
<li>背景</li>
<li>一些预备知识</li>
<li>同步阻塞</li>
<li>同步非阻塞</li>
<li>I/O多路复用 </li>
<li>异步非阻塞I/O</li>
<li>其他</li>
<li>总结</li>
</ul>
<span id="more"></span>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>既然是模型，说明为了解决一个特定的问题. 那么I/O模型是为了解决什么问题呢？首先排除网络传输问题，那么只能是网卡接受到数据之后，如何给程序消费这个问题了。<br>程序A想要请求网络数据，程序B也要请求网络数据，以此类推，很有很多程序干类似的事情。</p>
<p>一个程序请求网络数据，会牵涉到四方:</p>
<ul>
<li>程序本身</li>
<li>CPU</li>
<li>操作系统</li>
<li>内存</li>
</ul>
<p>根据之前提到的”又快又好”的指标，如果这四方都能在程序请求网络数据的过程中，让自身的效率达到最有，那么I/O模型的目的就达到了<br>是的，这也是I/O模型的终结目的.</p>
<p><img src="/images/2020/io.png"></p>
<h2 id="一些预备知识"><a href="#一些预备知识" class="headerlink" title="一些预备知识"></a>一些预备知识</h2><h3 id="用户空间和内核空间"><a href="#用户空间和内核空间" class="headerlink" title="用户空间和内核空间"></a>用户空间和内核空间</h3><p>  为了保证内核数据的安全，操作系统将寻址空间分为内核空间和用户空间.可以想象一下，一家公司组织去看文艺演出，前排坐的都是领导，后排坐的都是员工，前排的区域是核心区域.</p>
<h3 id="进程的阻塞"><a href="#进程的阻塞" class="headerlink" title="进程的阻塞"></a>进程的阻塞</h3><p>  一个进程在执行的过程中，需要等待某件事情的发生，才能继续执行，那么进程有两种选择</p>
<ul>
<li>占用CPU</li>
<li>不占用CPU</li>
</ul>
<p>  如果进程选择不占用CPU, 那么意味着进程被阻塞了，进入等待状态。<br>  如果进程自己等待某件事情的发生，又不释放CPU的使用权，那么这个进程是自私的。</p>
<h3 id="页缓存-Page-Cache"><a href="#页缓存-Page-Cache" class="headerlink" title="页缓存 - Page Cache"></a>页缓存 - Page Cache</h3><p>  Linux内核为文件提供了一个缓存，换言之， 从网卡进来的数据，先放到内核的缓存区。接下来的事情就很自然：数据会在在某个场合下拷贝到应用程序的地址空间.</p>
<h3 id="同步和异步的区别"><a href="#同步和异步的区别" class="headerlink" title="同步和异步的区别"></a>同步和异步的区别</h3><p>  要区分同步和异步，就选取一个好的视角，这个视角就是应用程序. 现在一个程序A, 程序B, 网络请求接口getUser，这个接口执行的时间耗时不确定.</p>
<ul>
<li>程序A 调用 getUser, 等待了t时间之后，得到了结果，然后继续执行剩下的逻辑, 这就是同步调用.</li>
<li>程序B 调用 getUser，继续执行剩下的逻辑，过t时间之后，以某种方式(回调函数)拿到了结果，这就是异步调用.</li>
</ul>
<p>  在这里，没有操作系统的概念，没有CPU的概念，没有内存的概念，可以看到这是一种调用方式，这种调用方式可以被框架来实现。<br>  而且可以看得出，同步调用符合开发者的认知习惯，因为代码的书写顺序就是代码的执行顺序，所以同步更人性化。默认情况下，我们写的代码就是同步的.</p>
<h2 id="同步阻塞"><a href="#同步阻塞" class="headerlink" title="同步阻塞"></a>同步阻塞</h2><p>同步阻塞就是一个进程在等待某件事情发生的时候，让自己进入等待状态，让出CPU的使用权，待数据</p>
<ul>
<li>从网卡到内核区</li>
<li>然后从内核区和程序地址空间<br>再唤醒进程。在这里可以看到进程做了两件事情</li>
<li>干等</li>
<li>让出了CPU<br>所以可以看到进程还是让自己充实点的，在等的期间可以干点别的事情。</li>
</ul>
<p>同步阻塞的优点 </p>
<blockquote>
<p>实时性好.符合用户的认知模型.</p>
</blockquote>
<p>同步阻塞的缺点 </p>
<blockquote>
<p>效率不高</p>
</blockquote>
<h2 id="同步非阻塞"><a href="#同步非阻塞" class="headerlink" title="同步非阻塞"></a>同步非阻塞</h2><p>同步非阻塞是同步阻塞的优化，也就是进程别干等了，干点别的事情. 但程序需要每隔一段时间轮训数据有没有达到内核区域，如果达到了内核区域，就将内核区域的数据拷贝到应用程序地址空间，在这拷贝的过程中，进程是被阻塞的.<br>所以非阻塞强调的是数据从网卡达到内核区这个过程.<br>同步非阻塞的优点</p>
<blockquote>
<p>进程不是纯粹干等了，可以去干点别的事情.</p>
</blockquote>
<p>同步非阻塞的缺点</p>
<blockquote>
<p>实时性差。因为需要通过轮询才能拿到数据，因为数据有可能在两次轮询间隔期间已经准备就绪了。轮询是有代价的，也需要消耗CPU</p>
</blockquote>
<h2 id="I-O多路复用"><a href="#I-O多路复用" class="headerlink" title="I/O多路复用"></a>I/O多路复用</h2><p>上面提到了同步非阻塞的缺点就是需要轮询CPU拿到结果，轮询是有代价的.<br>有两个进程采用同步非阻塞，那么两个进程都需要轮询，如果有n个进程呢？那么n个进程都需要轮询，这种效率是低下的。 如何改进这种效率呢？<br>一个可行的思路是让一个东西（暂且称为X）统一管理轮询。<br>统一管理是一种哲学，比如线程池是统一管理线程，连接池是统一管理连接.<br>Unix下面的select, poll, epoll就是做类似的事情的。</p>
<ul>
<li>select<ul>
<li>POSIX规定的</li>
<li>调用select函数之前需要将文件描述符从用户态拷贝到内核态.</li>
<li>调用过程是: 应用程序 -&gt; select(轮询) -&gt; I/O数据，在应用程序拿到I/O数据之前，应用程序一直是被select阻塞的，就这样看来，它不比同步阻塞调用高明.</li>
<li>切换一个角度：如果有好多应用程序，那么这个优势就很明显，读取数据由select统一管理. 所以select的特长是处理更多的连接.</li>
</ul>
</li>
<li>poll<ul>
<li>本质上和select是一样的，但是select的加强版</li>
<li>select的文件描述符列表是有限制的，而poll是没有限制的</li>
</ul>
</li>
<li>epoll - Linux特有的, 在Linux 2.6 引入.<ul>
<li>文件描述符放在内核的一个事件表中，这个事件表是基于红黑树的实现的.</li>
<li>基于事件驱动的I/O机制，只关注有I/O事情发生的文件描述符</li>
<li>相比与select/poll, epoll性能更高</li>
<li>epoll的实现是基于Reactor模式</li>
</ul>
</li>
</ul>
<p>观察select, poll和epoll, 会有这样一条线索</p>
<ul>
<li>如何又快又好的管理文件描述符<ul>
<li>用一种高效的数据结构 - 红黑树</li>
<li>避免文件描述符在用户态和内核态之间的移动 </li>
<li>不主动去监控文件描述的变化，而是文件描述符有变化的时候，主动通知消费方 - 好莱坞原则</li>
</ul>
</li>
</ul>
<h2 id="异步非阻塞I-O"><a href="#异步非阻塞I-O" class="headerlink" title="异步非阻塞I/O"></a>异步非阻塞I/O</h2><p>回头来看看同步非阻塞I/O的缺点</p>
<ul>
<li>进程需要轮询才能拿到结果</li>
<li>数据内核区拷贝到程序地址空间的过程中程序被阻塞了</li>
</ul>
<p>如果能避免上面那两个问题是不是就完美了？ 是的.<br>异步I/O的宏观视角：</p>
<ul>
<li>程序A 调用 getUser， 继续执行剩下的逻辑, t时间之后，以某种方式（通常是回调）获取结果。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="windows-IOCP"><a href="#windows-IOCP" class="headerlink" title="windows IOCP"></a>windows IOCP</h3><h3 id="libevent"><a href="#libevent" class="headerlink" title="libevent"></a>libevent</h3><p>  libevent 是一个基于事件驱动的异步I/O库</p>
<h3 id="libuv"><a href="#libuv" class="headerlink" title="libuv"></a>libuv</h3><p>  libuv也是一个基于事件驱动的异步I/O库，主要用在node.js上.<br>  在linux上, libuv是基于epoll.<br>  在windows上, libuv是基于IOCP</p>
<h3 id="Reactor-模式"><a href="#Reactor-模式" class="headerlink" title="Reactor 模式"></a>Reactor 模式</h3><p><img src="/images/2020/reactor.jpg"><br>Reactor的英文原意是核反应堆，一个核反应堆可以提供很强的能量.<br>Reactor是一种这样的模式，它要求主线程负责监听文件描述符是否有事件发生，有的话就将事情发送给工作线程. 所以这里可以看到几个特点:</p>
<ul>
<li>将线程分为两大职责，一种是管理者，一种工作者</li>
<li>管理者负责信息的收集，然后将信息分发给工作者。从实现的角度，体现了事件驱动。从原则的角度，体现了好莱坞原则.<h3 id="Proactor-模式"><a href="#Proactor-模式" class="headerlink" title="Proactor 模式"></a>Proactor 模式</h3></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>同步和异步是类库，框架或者语言层面的事物，比如张三开发了一个类库对I/O多路复用进行了封装，那么我们可以说这个类库支持异步I/O.<br>阻塞和非阻塞是操作系统进程层面的事物。<br>Linux I/O模型的发展历程围绕了两个要素</p>
<ul>
<li>让应用程序尽可能的多做事情</li>
<li>让CPU尽可能的充分利用</li>
</ul>
]]></content>
      <tags>
        <tag>网络</tag>
        <tag>I/O</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>闻香识微服务</title>
    <url>/2020/09/14/micro-services/</url>
    <content><![CDATA[<p>微服务已经成为了后端开发的主流，也成为了后端初次见面打招呼的内容.<br>微服务三个字从这字面上可以理解，但它的内涵确实是各人有各人的理解，因为微服务本身并没有被严格的定义.噢，不， 它有被定义，只是在不同的时间段被不同的权威的人定义了，据可查的资料，大概有4位专家前后给出了不同的定义，所以大家都不知道真正的定义是什么了， 也不知道未来微服务的定义会变成什么样. 因为它没有像数学公式被严格的定义。 </p>
<p><img src="/images/2020/travel.png"><br>这篇文章不试图搞清楚微服务的确切含义是什么，因为这这样做是徒劳无功的。<br>本文试图探索</p>
<ul>
<li>微服务大概是什么？</li>
<li>为什么是微服务？</li>
<li>要实现一个微服务，它应该具备哪些行为和特征？</li>
<li>微服务的未来</li>
<li>微服务带来的副作用</li>
</ul>
<span id="more"></span>
<h2 id="微服务大概是什么？"><a href="#微服务大概是什么？" class="headerlink" title="微服务大概是什么？"></a>微服务大概是什么？</h2><p>名不正，则言不顺，言不顺，则事不成。一个事物的准确定义是讨论这个事物的前提以及是后续对这个事物采取行动的基础. 正如上面所说，微服务没有被严格的定义。所以这里不能采取学院派的手法来讨论微服务。</p>
<p>现在假设有个用户服务，这个用户服务支持：添加，删除，修改和查询用户。用户的信息包括姓名，电话，性别，职位，地址等等.<br>那这个用户服务是不是微服务， 至少现在它看来是微服务。但这还不够，它还需要支持</p>
<ul>
<li>从实现的角度来看，代码在物理上是隔离的.<ul>
<li>如果代码不是物理上隔离的，这就会导致用户服务，地址服务，订单服务在同一个 jar文件里，这样服务就不能扩展了。 所以代码必须是物理上隔离的，这才有动态扩展的可能行。动态扩展了多个实例之后，也就有了容错性。</li>
</ul>
</li>
<li>从设计上来说，微服务职责是有边界的。如果想从用户服务获取用户的工作单位呢？不好意思，没有，请去地址服务里拿。怎么确定这个边界呢？这是另外一个大的话题.</li>
</ul>
<p>上面这两点是我认为微服务必须具备的。这两点其实隐含了一些前提和衍生了一些必然的结论. 比如，代码库是隔离的，意味着用Java语言写的微服务可以被用Js写的微服务替代. 如果一个服务职责边界清晰且足够小的话，那们意味着这个服务是可以被组合的。</p>
<p>应该不会有比用户服务更简单的服务， 但不是说所有微服务都应该像用户服务这么简单。</p>
<p><img src="/images/2020/restraunt.png"><br>一家饭店有一个厨房，两个服务员.<br>厨师的主要职责是：烧菜。<br>服务员的主要职责：切菜，上菜，收拾桌子。<br>如果以后客流量激增，那么可以再招一个厨师和三个服务员, 很显然如果上面的职责集中到一个人身上，是无法做到细力度的控制的.<br>这里有个问题，切菜应该服务员负责还是厨师负责？没有标准答案，这个需要领域专家从统计学上给出建议. 这也大概是软件设计的魅力吧</p>
<h2 id="为什么是微服务？"><a href="#为什么是微服务？" class="headerlink" title="为什么是微服务？"></a>为什么是微服务？</h2><p>因为微服务的本质就是拆分一个系统，系统拆解的越小，这一小部分就更容易被理解和控制。 分解的具体讨论可参考博文《分解》</p>
<h2 id="要实现一个微服务，它应该具备哪些行为和特征？"><a href="#要实现一个微服务，它应该具备哪些行为和特征？" class="headerlink" title="要实现一个微服务，它应该具备哪些行为和特征？"></a>要实现一个微服务，它应该具备哪些行为和特征？</h2><p>理想的情况应该是：</p>
<ul>
<li>弹性扩展<br>量变引起质变。 当用户的数量上升到一定的规模之后，只需要增加相应的机器实例就可以解决问题，这是最理想的解决方案。<ul>
<li>如何让一个服务可以有多个一模一样的实例? - docker或者虚拟机 </li>
<li>请求一个服务的时候，如何选择某一个服务实例？- 负载均衡</li>
<li>不同的请求如何对应到不同的服务实例？ - 路由</li>
<li>一些服务会有各种各样不同的参数，比如JVM参数，数据库连接字符串，如何管理这些参数？- 配置中心</li>
<li>这些服务的网络地址是动态变化的，如何管理动态变化的网络地址？ - 服务注册中心.</li>
<li>一个用户进来，哪些服务他可以访问，哪些服务他不可以访问 - 鉴权</li>
<li>用户的请求很多，如何限制用户的请求？ - 限流</li>
<li>如果一个服务因为某种原因不可用了，即使增加实例也没用，那么就应当让请求不要继续这个服务了 - 熔断</li>
<li>服务A调用服务B，然后调用服务C， 如何知道这个调用链？ - 监控</li>
</ul>
</li>
<li>业务演化<br>业务的改变大体有两个<ul>
<li>维护现有系统</li>
<li>开发新的功能</li>
</ul>
</li>
</ul>
<p>   但无论是维护现有还是开发新的功能，我们不希望看到下面场景</p>
<ul>
<li>开发一个新的功能很难，不知道怎么和现有系统集成。</li>
<li>维护一个功能很难， 就好像拆炸弹一样，生怕碰到不该碰的东西，一碰就爆炸，就是这个系统太脆弱了。</li>
</ul>
<h2 id="微服务的未来"><a href="#微服务的未来" class="headerlink" title="微服务的未来"></a>微服务的未来</h2><ul>
<li>从分解的角度来说，基本上不可能拆的更小了，再拆连裤子都拆没了。上面提到的用户服务可以算是最小的微服务.</li>
<li>从规范的角度来说，对鉴权，限流，网关，负载均衡,配置中心等等形成一个标准。每个实现都遵循相同标准的时候，可以有效地降低开发者的认知成本，符合开发者的心智模型.<ul>
<li>正例：Java对依赖注入有JSR330的规范，这样不同的依赖注入框架可以遵守相同的标准</li>
<li>反例：JS模块化方案AMD和CMD. </li>
</ul>
</li>
<li>一切可以自动化都应该自动化或者必将自动化。当然，这个结论不仅仅适用于微服务。</li>
<li>更好的性能. 比如性能更高的传输协议。</li>
</ul>
<h2 id="微服务带来的副作用"><a href="#微服务带来的副作用" class="headerlink" title="微服务带来的副作用"></a>微服务带来的副作用</h2><p>当大家沉浸在微服务真香的状态中，不要忘记微服务是有代价的.</p>
<ul>
<li>网络之间的通信。比如服务A调用服务B的时延是50ms, 如果调用链是A, B, C, D，那么这个时延就更长了，只要有网络之间通信，就存在不确定性.</li>
<li>当微服务数量很多，且有不同团队维护的时候，这个沟通成本和维护成本是非线性的.</li>
<li>需要一个掌握全貌的人，如果不能掌握业务全貌，出了问题都不知道根源在哪里. 根据鸡蛋不能放在一个篮子的原则，掌握全貌的人最好多于一个.</li>
<li>相比于传统MVC开发团队，微服务对开发者的要求要高些.</li>
</ul>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>架构</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务架构二三事</title>
    <url>/2020/09/20/mircro-services-archi/</url>
    <content><![CDATA[<p>就现阶段而言，DDD已经成为微服务设计的事实标准，也不排除未来可能是有更好的微服务设计标准。<br>这篇文章聚焦于传统的架构应该如何过渡到微服务架构。</p>
<ul>
<li>传统三层架构</li>
<li>传统的DDD分层架构</li>
<li>依赖倒置的DDD分层架构</li>
<li>DDD 五层架构</li>
<li>DDD 六层架构</li>
<li>六边形架构</li>
<li>整洁架构-洋葱模型</li>
</ul>
<span id="more"></span>
<h2 id="传统的三层架构"><a href="#传统的三层架构" class="headerlink" title="传统的三层架构"></a>传统的三层架构</h2><p><img src="/images/2020/3-layers.png"><br>人往往会忽视简单和习以为常的东西，就比如“好好学习”这句话。<br>三层架构是所有架构的基石和鼻祖，当若干年之后人们再会想架构的时候，首先想到的应该是三层架构。我们应当向三层架构致敬.<br>正如我前面的提到的《分解》，软件开发的核心原则是分解。今天是这个分解，明天是那个分解，分解和分解之间的不同是维度的不同</p>
<p>根据奥卡姆剃刀原则，如果一个问题有两个模型可以解释，那么肯定选择最简单的那个模型。<br>想到霍金提到的一个例子</p>
<blockquote>
<p>两者都是正确的宇宙模型，人们既可以假定地球静止，也可以假定太阳静止来解释星球的运转，只是哥白尼的日心说具有比较简洁的优势，可以用简单的运动方程来解释太阳系行星的运转。因为用地心说来描述星球的运行将非常复杂，不但要考虑天体的旋转，还要考虑地球的自转，因此托勒密虽然制作了以地球为中心的模型，很多现象依然无法解释，不得不用偏心圆和小轮体系来进行修正.</p>
</blockquote>
<p>简而言之，地心说本身没有问题，只是在解释宇宙的时候更复杂，不如日心说那么简单. 这个道理通用适用于三层架构模型。</p>
<p>三层架构不考虑实现，仅仅从概念上来说是完美的。</p>
<ul>
<li>数据库 - 代表了信息存储的地方，也代表了事实，可以作为企业决策的依据。</li>
<li>数据访问层 - 这一层主要用来获取数据库信息。</li>
<li>业务逻辑层 - 世界上一切行为都可以看作是业务逻辑，这一层主要是加工（分解和组合）信息。</li>
<li>用户界面层 - 用来显示给用户显示信息。</li>
</ul>
<p>三层模型从概念上是抽象度极高的，抽象度高意味着在落地时候还需要做很多工作.</p>
<p>基本上，在三层模型里，对任意一层，可以有如下处理</p>
<ul>
<li>将这一层根据需要拆解成n层</li>
<li>将这一层和其他层合并</li>
<li>这一层和其他层之间增加新的一层</li>
</ul>
<p><img src="/images/2020/rubik.jpg"><br>我个人很感兴趣的一件事情：</p>
<ul>
<li>三层架构模型能不能像魔方一样经过几次变换然后变成其他架构模型呢？</li>
</ul>
<h2 id="传统的DDD分层架构"><a href="#传统的DDD分层架构" class="headerlink" title="传统的DDD分层架构"></a>传统的DDD分层架构</h2><p>  <img src="/images/2020/ddd-traditional4-layers.png"><br>  从概念上来说, 传统的DDD4层模型可以由三层模型稍加改进得来.</p>
<ul>
<li>用户接口层， 这层对应三层当中的用户界面层. 可以有两者解读<ul>
<li>广义上是指UI，API</li>
<li>狭义上是指API</li>
</ul>
</li>
<li>应用层，组合领域层和调用其他应用层。 这层可以看成是由业务逻辑层拆解而来。</li>
<li>领域层，这是整个系统的重点，也是兵家必争之地。领域层要确保在整个系统的复用性.这层可以看成是由业务逻辑层拆解而来。这层包括<ul>
<li>领域服务的定义</li>
<li>领域对象的定义</li>
<li>领域事件的发布</li>
</ul>
</li>
<li>基础设施层，包括缓存，队列，网关，数据库，可以对应三层的数据层.</li>
</ul>
<p>  这里的特点是任何一层都可以访问基础设施层。 就好像一个组织里，大领导可以过问下层的工作细节，下层可以越级汇报给上层。</p>
<h2 id="依赖倒置的DDD分层架构"><a href="#依赖倒置的DDD分层架构" class="headerlink" title="依赖倒置的DDD分层架构"></a>依赖倒置的DDD分层架构</h2><p>  <img src="/images/2020/ddd-4-layers.png"><br>   相比于传统的DDD的分层，依赖倒置的分层一点点反直觉。<br>   传统的DDD分层，层和层之间的箭头流向代表着</p>
<ul>
<li>调用关系-RPC调用或者发布一个事件</li>
</ul>
<p>  但是依赖倒置的DDD分层的箭头带来的确实含义完全不一样的理解</p>
<ul>
<li>绿色的箭头代表的不是调用关系，因为很明显技术设施层怎么可能调用用户接口层呢？这是最明显反直觉的一点。所以这里(A-&gt;B)的绿色箭头代表着，B比A要重要，A的任何改动不会影响B,B的变化会影响A.</li>
<li>黑色的箭头代表着正常的调用。</li>
<li>这幅图最大的问题在于一个箭头有两种完全不同的语义.</li>
</ul>
<h3 id="绿色思考帽"><a href="#绿色思考帽" class="headerlink" title="绿色思考帽"></a>绿色思考帽</h3><p>   想象一个人在飞机上，有四个包裹分别为用户接口层，应用层，领域层，基础设施层，这个四个包裹的重量一样，但价值不一样。现在飞机动力不足了，我们要扔掉包裹，才能让飞机有动力继续飞行. 我们会怎么扔？</p>
<ul>
<li>扔第一个包裹。扔掉基础设施层，因为落地之后，换一个基础设施层就好了</li>
<li>扔第二个包裹。扔掉用户接口层，相比于其他层，用户接口层没那么重要.</li>
<li>扔第三个包裹。扔掉应用层，相比于领域层，应用层没那么重要.</li>
</ul>
<p>  所以我们可以看到领域层是最重要，只要领域层在，一个业务的灵魂就在。正如我们听到的紧紧围绕在XX同志为代表的领导下，开发业务的时候同样如此，要紧密团结在领域层周围做事情.</p>
<h2 id="DDD-五层架构"><a href="#DDD-五层架构" class="headerlink" title="DDD 五层架构"></a>DDD 五层架构</h2><p>  <img src="/images/2020/ddd-5-layers.png"></p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>  一个人在公司里是员工，可以完成上级的任务，在家里就是父亲，可以教育子女. 如何用从代码层面描述这两种场景，而且符合开发者的心智模型？</p>
<ul>
<li>张三 + 场景 (公司) -&gt; 完成上级任务</li>
<li>张三 + 场景（家里）-&gt; 教育子女</li>
</ul>
<p>  一个可行的的公式：谁(Who)什么时候(When)在什么地方(where)用什么方式(How)完成了某件事(What)？基本上这个公式可以描述很多场景的行为，这样能保证描述不具备歧义性。比如：我上午骑车去超市买了瓶可乐。</p>
<h3 id="什么是五层架构？"><a href="#什么是五层架构？" class="headerlink" title="什么是五层架构？"></a>什么是五层架构？</h3><p>  五层架构也叫DCI(Data + Context + Interactive)架构，是2009年由James O. Coplien和Trygve Reenskaug共同提出.<br>  DDD五层是对DDD四层的改进</p>
<ul>
<li>Context层 - 由四层的domain拆解而来<ul>
<li>负责将领域对象变成Role</li>
</ul>
</li>
<li>Domain层 - 由四层的domain拆解而来<ul>
<li>object - 描述对象的关系</li>
<li>role - 用来给对象创建一个 role, 员工或父亲。 这个Role可能以后会带来歧义，因为一些权限验证框架里面也由Role这个概念.</li>
</ul>
</li>
</ul>
<h3 id="什么时候应该用五层架构？"><a href="#什么时候应该用五层架构？" class="headerlink" title="什么时候应该用五层架构？"></a>什么时候应该用五层架构？</h3><ul>
<li>梳理完整个业务之后，如果一个实体在业务中有多个不同的称呼，这个时候就应当用五层架构模型，如果实体在业务中的称呼是唯一的，那们就四层模型就够了。可能有朋友要问了，如果用四层模型，现在业务实体的称呼只有一个，那将来实体要是有多个称呼可怎么办呢？那就演化到五层。</li>
</ul>
<h2 id="DDD-六层架构"><a href="#DDD-六层架构" class="headerlink" title="DDD 六层架构"></a>DDD 六层架构</h2><h2 id="六边形架构"><a href="#六边形架构" class="headerlink" title="六边形架构"></a>六边形架构</h2><p>  <img src="/images/2020/hexagon.png"></p>
<h2 id="整洁架构-洋葱模型"><a href="#整洁架构-洋葱模型" class="headerlink" title="整洁架构-洋葱模型"></a>整洁架构-洋葱模型</h2><p>  <img src="/images/2020/onion-model.png"></p>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>架构</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之飞鸽传书 - Netty</title>
    <url>/2020/10/12/netty/</url>
    <content><![CDATA[<p>万物互联是现在乃至未来的趋势. 只要互联就需要网络，不管是无线还是有线。只要牵涉到联网，就牵涉到两台机器上的应用程序之间的通信。 只要是通信，我们就需要又快又好的进行通信。那么应该有一个事物来做这样基础的事情，这样开发者可以专注于写业务逻辑.<br>这个事物就是Netty. 当然Netty不是进行Java进行网络通信的唯一选择，我们自己也可以写一个网络编程框架,但在此刻，它是网络通信框架领域那颗最耀眼的明星,这就是影响力，必须承认它的人气。当我们讨论Java网络编程框架的时候，Netty是一个绕不过去的话题. 让我来沏一杯茶，闲言碎语几句.</p>
<ul>
<li>背景</li>
<li>什么是Netty?</li>
<li>为什么是Netty?</li>
<li>Netty是如何实现的？</li>
<li>Netty的实践</li>
<li>网络编程框架的将来</li>
</ul>
<span id="more"></span>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Netty是2004年由韩国人trustin lee开发出来的，同时他也是mina的作者. Netty到现在为止已经由16年的历史，我有理由相信它会继续存活16年</p>
<h2 id="什么是Netty"><a href="#什么是Netty" class="headerlink" title="什么是Netty?"></a>什么是Netty?</h2><p>Netty是</p>
<ul>
<li>网络编程框架 - Netty解决问题的领域是网络，非网络的它不关心.</li>
<li>异步和基于事件驱动的</li>
<li>容易使用，性能好 - 开发者视角</li>
<li>开发服务器和客户端 - 意味着Netty的使用场景不是单机</li>
</ul>
<p><img src="/images/2020/pigeon.png"></p>
<h2 id="为什么是Netty"><a href="#为什么是Netty" class="headerlink" title="为什么是Netty?"></a>为什么是Netty?</h2><p>截止当前这个时间点，github上还有406个问题是open的, 关闭了4810问题, 如果除以16，那么就是1年300个问题，一天一个问题。这也能说明一个问题，网络编程领域的炸弹和坑有很多，不要掉以轻心.</p>
<h3 id="为什么不是JDK-NIO"><a href="#为什么不是JDK-NIO" class="headerlink" title="为什么不是JDK NIO?"></a>为什么不是JDK NIO?</h3><p>Netty的技能包比JDK NIO多</p>
<ul>
<li>支持多种传输层协议</li>
<li>解决了粘包，半包现象</li>
<li>流量控制，黑白名单</li>
<li>处理各种个样的异常，比如断连，异常<ul>
<li>这让我想起了Jquery, Jquery屏蔽了各种浏览器的差异，提供了一个统一的接口给用户操作DOM.</li>
</ul>
</li>
</ul>
<p>JDK NIO 本身有很多bug, 约为5000个左右.<br>这里说明了两个问题：</p>
<ul>
<li>开发者直接使用JDK NIO是不明智的选择</li>
<li>开发者开发一个网络编程框架也是一个不明智的选择</li>
</ul>
<h2 id="Netty是如何实现的？"><a href="#Netty是如何实现的？" class="headerlink" title="Netty是如何实现的？"></a>Netty是如何实现的？</h2><ul>
<li><p>Netty设计哲学</p>
<ul>
<li>API让人用起来舒服, 这个是针对使用者的 - 这种舒服应该符合用户的感性和直觉，就好像做西红柿炒蛋的时候，放好鸡蛋之后接着放西红柿。</li>
<li>实现让人舒服 - 这个是针对维护者的.<blockquote>
<p>The answer is the philosophy it is built on. Netty is designed to give you the most comfortable experience both in terms of the API and the implementation from the day one. It is not something tangible but you will realize that this philosophy will make your life much easier as you read this guide and play with Netty.</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Netty是基于Reactor模式实现的</p>
<ul>
<li>单Reactor单线程</li>
<li>单Reactor多线程</li>
<li>主从Reactor多线程</li>
</ul>
</li>
<li><p>Netty用到的设计模式</p>
<ul>
<li>单例 - ReadTimeOutException#INSTANCE</li>
<li>工厂 - ReflectiveChannelFatory</li>
<li>策略 - EventExcutorChooser</li>
<li>装饰 - WrappedByteBuf</li>
<li>模板 - AbstracTrafficShapingHandler</li>
<li>职责链 - ChannelPipeline</li>
<li>构造者 - WebSocketServerProtocolConfig.Builder</li>
<li>观察者 - ChannelFuture#AddListener</li>
</ul>
</li>
<li><p>从框架设计角度，Netty的核心概念是</p>
<ul>
<li>Channel - 可以理解为任意两点之间的连接. </li>
<li>EventLoop - Channel和EventLoop是多对一的关系，EventLoop和线程是一对一的关系，也就是一个Chanenel接连对应一个稳定的线程, 这样的好处是事件处理是单线程，避免并发问题. Channel通过事件的方式给EventLoop发送消息.</li>
<li>EventLoopGroup - 对EventLoop从功能的角度进行分类<ul>
<li>bossGroup - 专门用来处理连接<ul>
<li>bossGroup连接处理完成之后，要将连接交给workGroup，这到底选择哪个EventLoop呢？Netty使用的是轮询算法.</li>
</ul>
</li>
<li>workerGroup - 专门用来处理读和写</li>
</ul>
</li>
<li>ServerBootStrap</li>
<li>ChannelHandler和ChannelPipeline<ul>
<li>ChannelHandler - 事件的处理者，比如做一些业务代码处理</li>
<li>ChannelPipeline - 指定事件的处理顺序，先处理第一件事情，然后处理第二件事件, 换言之就是管理秩序.</li>
<li>ChannelHandlerContext - 用于ChannelHandler和ChannelPipeline之间的交互.</li>
</ul>
</li>
<li>ChannelFuture</li>
</ul>
</li>
<li><p>Netty的执行流程 - 这个流程的步数是奇数，首尾对称.</p>
<ul>
<li>启动服务</li>
<li>打开连接</li>
<li>接受数据</li>
<li>数据处理</li>
<li>发送数据</li>
<li>关闭连接</li>
<li>关闭服务</li>
</ul>
</li>
<li><p>Netty逻辑架构图<br><img src="/images/2020/netty-logic-diagram.png"></p>
</li>
<li><p>Netty功能图<br><img src="/images/2020/netty-function-diagram.png"></p>
</li>
</ul>
<h2 id="Netty的实践"><a href="#Netty的实践" class="headerlink" title="Netty的实践"></a>Netty的实践</h2><h2 id="网络编程框架的未来"><a href="#网络编程框架的未来" class="headerlink" title="网络编程框架的未来"></a>网络编程框架的未来</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>高性能</tag>
        <tag>框架</tag>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>网络协议大观园</title>
    <url>/2020/10/27/network-protocol/</url>
    <content><![CDATA[<p>我们这个世界为什么存在这么多语言？如果世界上只有一种语言，那么每个人都不需要学英语了，想想都很美.<br>相传在远古时候，人们想建造一座高可通天的塔，可以彰显自己的名气，这样也可以防止人们走散之后仍然可以找到回家的路。上帝一看，这可不对，于是设法改变了不同人的口音，这样大家就无法交流，通天塔的建造就此搁浅.</p>
<span id="more"></span>
<p>人和人之间说话是通过某种语言来沟通的，比如英语或者汉语。计算机和计算机之间通信也不例外，也需要语言，但这个语言和人类说话的语言稍微不一样，计算机和计算机之间会有不同的功能，不同的功能需要不同的语言，这里的语言往往称为协议.</p>
<ul>
<li>背景</li>
<li>什么是网络协议?</li>
<li>如何设计网络协议</li>
<li>有哪些网络协议</li>
</ul>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>试想一下，如今的互联网由哪些因素组成? 我们大概会想到</p>
<ul>
<li>线缆</li>
<li>网络设备 - 交换机，路由器，网卡</li>
<li>运营商 - 比如中国电信</li>
<li>防火墙</li>
<li>终端设备 - 可以是PC, 手机或者任何的智能设备</li>
<li>终端设备上的操作系统和应用软件</li>
</ul>
<p>上面有提到计算机和计算机通信需要协议，那么这个协议到底存在什么地方呢？ 答案是操作系统.<br>网络协议的数量有很多，这里聊聊一些常用的的协议.</p>
<h2 id="什么是网络协议"><a href="#什么是网络协议" class="headerlink" title="什么是网络协议"></a>什么是网络协议</h2><p>网络协议是计算机和计算机之间为来完成特定功能进行通信的某种约定.<br>现在我们知道谈到网络协议有两个概念必须要讨论： OSI和TCP/IP</p>
<p>先说说OSI, OSI是ISO组织制定的一个模型，用来指导网络协议设计. 很明显这个模型是分层的，至于为什么要分层？这个问题本质上和软件要分层是一样的，之前有专门讨论“分解”这个话题. OSI模型的大概分为七层</p>
<ul>
<li>应用层 - 用户直接接触到的，比如电子邮件客户端</li>
<li>表示层 - 电子邮件有特定的格式，怎么转换成标准的传输格式呢？</li>
<li>会话层 - 发送端什么时候建立连接，什么时候释放连接？</li>
<li>传输层 - 这一层只关心数据包如何可靠达到目的地，比如这个包是不是完整的</li>
<li>网络层 - 这一层负责认路，比如有几条路，如何更快达到目的地</li>
<li>数据链路层 - 将数据帧转换为0/1比特流</li>
<li>物理层 - 将0/1比特流转为高低电平</li>
</ul>
<p>这个模型很难说它是基于哪一个维度进行拆分的。我们对人进行分类，可以基于性别分类：男人和女人，也可以基于地域分类：南方人和北方人， 这很符合直觉。 但我也从中隐约看出了两条线索</p>
<ul>
<li>信息是如何变成高低电平？“Hello World” -&gt; 统一的字符编码 -&gt; 二进制 -&gt; 高低电平</li>
<li>信息是如何又快又好的达到目的地?</li>
</ul>
<p>正如我们所知, OSI并没有称为主流协议，为什么？不实用，或者说不接地气.</p>
<p>后来的事情，大家都知道了, TCP/IP成为主流.<br>TCP/IP这个名字顾名思义是TCP协议和IP协议，但这个是错觉, TCP/IP是一个协议大家族，是互联网协议的统称, 我们知道的Telnet, ICMP，SSH都属于TCP/IP协议.<br>但我们更想知道为什么TCP/IP协议胜出了？或者说TCP/IP协议做对了哪些事情？ 有以下几个因素</p>
<ul>
<li>开放性 - TCP/IP是由IETF讨论决定的，IETF是一个任何人都可以加入讨论的组织，这充分证明了群众的力量是强大的.</li>
<li>实用性 - TCP/IP先有实现，然后才有规范。也就是规范发布出来的时候，已经有操作系统实现了这个协议。而不是像OSI整天在天上飘</li>
</ul>
<p>TCP/IP 也是基于分层的</p>
<ul>
<li>应用层</li>
<li>传输层</li>
<li>网络层</li>
<li>数据链路层</li>
</ul>
<h2 id="如何设计一个网络协议"><a href="#如何设计一个网络协议" class="headerlink" title="如何设计一个网络协议"></a>如何设计一个网络协议</h2><p>网络协议不可能从天而将，所以需要人来制定，既然是一种沟通工具，那么自然这个工具要符合又快又好的标准了.</p>
<ul>
<li>快<ul>
<li>让网络的传输变快</li>
</ul>
</li>
<li>好<ul>
<li>安全</li>
<li>最好一种协议能解决多个问题，如果不能解决多个问题，那么就聚焦于一个问题</li>
<li>简单</li>
<li>可以扩展</li>
</ul>
</li>
</ul>
<h2 id="有哪些网络协议"><a href="#有哪些网络协议" class="headerlink" title="有哪些网络协议"></a>有哪些网络协议</h2><ul>
<li><p>应用层协议</p>
<ul>
<li><p>HTTP</p>
</li>
<li><p>DNS</p>
</li>
<li><p>Ping<br>PING是应用层直接使用网络层ICMP的一个例子，它没有通过运输层的TCP或UDP. 一个系统允许Ping取决于两个因素，任意一个被禁止就不能被Ping</p>
<ul>
<li>内核参数</li>
<li>防火墙<br>如果Ping被禁用，我又想知道远程主机是否还可以连接，那怎么办？ 可以通过tcping这个工具来测试某个端口是否开放.</li>
</ul>
</li>
<li><p>nslookup - 用来测试域名是否可以正常解析</p>
</li>
<li><p>Telnet - 用来进行远程登录</p>
</li>
<li><p>SSH - 安全版的Telnet</p>
</li>
</ul>
</li>
<li><p>传输层协议</p>
<ul>
<li>TCP - 让数据可以可靠达到目的地</li>
<li>UDP - 牺牲正确性换取效率的协议</li>
</ul>
</li>
<li><p>网络层协议</p>
<ul>
<li>ICMP</li>
<li>traceroute</li>
<li>ARP</li>
</ul>
</li>
<li><p>数据链路层协议</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>协议</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>牛刀小试</title>
    <url>/2019/07/04/new-place/</url>
    <content><![CDATA[<p>一直有想写博客的想法，因为各种原因不了了之，也许是搭建博客是太麻烦了。后来看到一个朋友是用Hexo搭建了博客，看上去不错，自己就尝试一下。于是，便有了这个站点。</p>
<p>以前看见好的帖子或者文章会收藏在印象笔记, 相比于印象笔记，博客的优势就体现在如下方面：</p>
<ul>
<li>这是一种输出,输出是一种结果，结果可以引申为某种目的和愿景。在很多场合下，人往往会听到学以致用，知行合一，包括以终为始的习惯，还有什么费曼学习法，都是暗含了输出的思想。</li>
<li>可以让别人来评论，从而带来观点的传播,交流和融合.</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>挑战个体极限 - 如何提高一台服务器的性能?</title>
    <url>/2020/10/11/performance-1-pc/</url>
    <content><![CDATA[<p>要提高服务器的性能，正常的思路是</p>
<ul>
<li>单机堆硬件 - 加内存，换CPU</li>
<li>多个单机组成集群</li>
</ul>
<span id="more"></span>
<p>以上两种思路都是从硬件层面出发的。 我们这里讨论的当有大量请求过来的时候，不从硬件出发，而是从方法论出发，看看有哪些策略可以提升服务器的性能。</p>
<ul>
<li>两种维度</li>
<li>PPC</li>
<li>TPC</li>
<li>Reactor</li>
<li>Proactor</li>
</ul>
<p><img src="/images/2020/jump.jpeg"></p>
<h2 id="两种维度组合的场景"><a href="#两种维度组合的场景" class="headerlink" title="两种维度组合的场景"></a>两种维度组合的场景</h2><ul>
<li>连接数量多，请求数量多<ul>
<li>秒杀，双十一之类的业务，这类业务一定走分布式这条路</li>
</ul>
</li>
<li>连接数量多，请求数量少<ul>
<li>企业的官网</li>
</ul>
</li>
<li>连接数量少，请求数量多<ul>
<li>一些中间件，比如数据库连接池，一个数据库连接，是执行SQL的请求可能有几百个</li>
</ul>
</li>
<li>连接数量少，请求数量少<ul>
<li>企业的内部系统，比如我司创建学生账号的工具，查看学生学习情况的报表系统.</li>
</ul>
</li>
</ul>
<h2 id="PPC"><a href="#PPC" class="headerlink" title="PPC"></a>PPC</h2><p>PPC（Process Per Connection) 顾名思义就是一个连接一个进程。这种模式适合连接数不是特别的情况，比如数据库连接数.<br>缺点是</p>
<ul>
<li>Fork进程是有代价的</li>
<li>父子进程通信比较复杂</li>
</ul>
<h2 id="TPC"><a href="#TPC" class="headerlink" title="TPC"></a>TPC</h2><p><img src="/images/2020/tpc.png"><br>TPC (Thread Per Connection) 就是一个连接一个线程. 这种模式可以说是PPC的加强版. 它不需要fork进程，也没有父子进程通信复杂的情况. 但它来来额外的副作用. 这也属于BIO</p>
<ul>
<li>线程切换是需要代价的</li>
<li>线程之间协作不当就有可能出现死锁</li>
</ul>
<p>所以这是典型的发明了一个方案，然后制造了一个问题啊.</p>
<h2 id="Reactor"><a href="#Reactor" class="headerlink" title="Reactor"></a>Reactor</h2><p>Reactor在前面的博文有隐约提到过，它主要干了两件事</p>
<ul>
<li>将线程分为两类，一类主线程专门用来接受socket的请求，一类工作线程专门用来处理socket请求</li>
<li>主线程通过某种方式(事件驱动)将请求传给工作线程 - 好莱坞原则</li>
</ul>
<p>Reactor本质上是同步阻塞I/O</p>
<h2 id="Proactor"><a href="#Proactor" class="headerlink" title="Proactor"></a>Proactor</h2>]]></content>
      <categories>
        <category>高性能</category>
      </categories>
      <tags>
        <tag>高性能</tag>
      </tags>
  </entry>
  <entry>
    <title>编程语言概述</title>
    <url>/2020/10/31/programming-language/</url>
    <content><![CDATA[<p>众所周知, 计算机这个行业是不断发展的。 编程语言就是其中之一，要么是出现新的语言，要么是出现这个语言的特性升级。 其他领域，比如法律和医学， 知识更新迭代的速度远比不上编程领域.<br>让我来沏一杯茶，闲聊一下编程语言这个老生常谈的话题.</p>
<ul>
<li>编程语言历史</li>
<li>什么是编程语言？</li>
<li>编程语言的种类</li>
<li>设计一门编程语言需要解决什么问题？</li>
<li>编程语言的未来</li>
</ul>
<span id="more"></span>
<h2 id="编程语言历史"><a href="#编程语言历史" class="headerlink" title="编程语言历史"></a>编程语言历史</h2><ul>
<li><p>1842年：第一个程序</p>
<blockquote>
<p>Ada Lovelace 在笔记本上写了一些计算机指令一样的东西，后来被公认是世界上的第一道计算机程序，只是那时计算机还没有问世。</p>
</blockquote>
</li>
<li><p>1957年: FORTRAN - 第一个程序员可以使用的程序</p>
<blockquote>
<p>John Backus 发明了 FORTRAN，这是第一门真正意义上有程序员在使用的编程语言</p>
</blockquote>
</li>
<li><p>1959年: COBOL</p>
<blockquote>
<p>Grace Hopper 发明了第一门企业级的编程语言，叫作“common business-oriented language”，简称 COBOL</p>
</blockquote>
</li>
<li><p>1964年：BASIC</p>
</li>
<li><p>1970年：Pascal</p>
</li>
<li><p>1972年: C语言 - 为Unix的出现奠定了基础</p>
</li>
<li><p>1980年: Smalltalk - 第一个支持面向对象的语言</p>
</li>
<li><p>1983年: Ada</p>
</li>
<li><p>1983年: c++</p>
</li>
<li><p>1986年: Objective-c</p>
</li>
<li><p>1987年: Perl</p>
</li>
<li><p>1991年: Python</p>
</li>
<li><p>1993年: Lua</p>
</li>
<li><p>1994年: PHP</p>
</li>
<li><p>1995年: Ruby</p>
</li>
<li><p>1995年: Java</p>
</li>
<li><p>1995年: Javascript</p>
</li>
<li><p>2001年: C#</p>
</li>
<li><p>2009年: Go</p>
</li>
<li><p>2010年: Rust</p>
</li>
<li><p>2012年: TypeScript</p>
</li>
<li><p>2014年: SWift</p>
</li>
</ul>
<p>根据公开的语言排行榜，排名前十的语言都是70年代以后诞生的语言. 这里面, C语言在底层领域是霸主，Java在应用领域独占鳌头, Python是数据处理领域的翘楚, JS是Web开发领域的不二人选.</p>
<h2 id="什么是编程语言？"><a href="#什么是编程语言？" class="headerlink" title="什么是编程语言？"></a>什么是编程语言？</h2><p>编程语言和中文，英文都有相似的地方，比如要符合一定的语法，但又稍许有些不同，比如人和人完全可以用汉语交流所有问题， 但计算机却没有这样一个语言能解决所有问题.<br>编程语言是给开发者使用的一种模型工具. 它符合一定的规范， 以某种方式解决了计算机特定领域的问题。 这种方式背后的思想包括且不限于</p>
<ul>
<li>抽象<ul>
<li>抽象的目的是为了提供统一的方式来处理现实中的概念和行为</li>
<li>一个例子：在国家层面，不管男女老幼，都统一叫做公民，公民这个词就是一个抽象，在计算机领域可以表现另外一种名字: ID</li>
</ul>
</li>
<li>隔离<ul>
<li>软件开发的根本目的是为了控制复杂度。而分离关注点是其中的一个有效方式</li>
<li>一个例子： 国家以秦岭淮河为分界线，将中国的地域分为南方和北方。</li>
<li>隔离抽象和实现</li>
<li>隔离重要和非重要</li>
<li>隔离不变和变化</li>
</ul>
</li>
<li>组合<ul>
<li>这个世界上大多数系统是基于还原论的，软件系统也不例外。</li>
<li>一个系统如果是可以还原的，那么就是可以组合的.</li>
<li>一个例子：不同的县组成了市，不同的市组成了省，不同的省组成了国家.</li>
</ul>
</li>
</ul>
<h2 id="编程语言的种类"><a href="#编程语言的种类" class="headerlink" title="编程语言的种类"></a>编程语言的种类</h2><p>编程语言的种类远多于数据库和操作系统的种类，正如武林中有各种各样的门派一样，编程语言也有很多门派. 这些门派之间也是口水不断和相互鄙视的。要了解一个编程语言的价值，可以从下面的角度来思考</p>
<ul>
<li>解决了什么问题</li>
<li>是否符合用户的认知模型</li>
</ul>
<h3 id="过程式编程"><a href="#过程式编程" class="headerlink" title="过程式编程"></a>过程式编程</h3><p>  过程式编程的核心概念是结构体和过程（也可以称为函数）</p>
<ul>
<li>侧重于描述先做什么，后做什么，符合人的自然思维</li>
<li>缺点<ul>
<li>函数是全局的，没有访问控制.</li>
<li>项目规模变大了，代码会比较混乱，容易形成意大利面条的形式.</li>
</ul>
</li>
</ul>
<h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><p>  面向对象的价值主张是一切皆对象。 对象包含状态和行为. OO的鼻祖是SmallTalk， </p>
<blockquote>
<p>I thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages (so messaging came at the very beginning – it took a while to see how to do messaging in a programming language efficiently enough to be useful)….OOP to me means only messaging, local retention and protection and hiding of state-process, and extreme late-binding of all things. It can be done in Smalltalk and in LISP.</p>
</blockquote>
<p>  从上面这段面向对象设计的初衷我们可以看到</p>
<ul>
<li>对象类似网络的一个独立的节点</li>
<li>对象隐藏了内部的状态</li>
<li>对象和对象之间是通过消息方式来交互协作的</li>
</ul>
<p>  其中对象是一个独立的节点在不同的场景下，它可以是：组件，服务或者一个独立的系统.<br>  要实现以上特性，必须做好下面的事情</p>
<ul>
<li>抽象 - 需要不断的总结和归纳名词，也正应了命名是计算机的两大难题之一</li>
<li>隔离 - 在良好的抽象基础上，才能进行很好的隔离. 这是一种分解思维.</li>
</ul>
<p>  基于以上特点我们可以编写任何复杂的系统. OOP是一种思想，OOP程序不一定要用OOP语言来写</p>
<p>  这个世界上花花草草，各色人等都可以用名词来表示，所以围绕名词以及名词的行为来表达这个世界是很自然的事情。因为我们上学的时候无论是学语文还是学英文都是要从区分名词，动词，形容词等开始的。 所以围绕名词来描述和表达问题对人的认知来说，是丝滑般的自然.</p>
<p>  一些符合面向对象思想的例子:</p>
<ul>
<li>猫是一种动物。 很多时候，我们要回答这个东西是什么</li>
<li>审批流程，员工A想要请假，小组长需要审批，上面的经理也需要审批，这个流程是可以画出一个协作图. 可以想象一下函数式编程如何处理这个问题</li>
</ul>
<p>  反对OO的声音</p>
<ul>
<li>对象是有状态的. </li>
<li>想要引用一个对象的行为，就必须把它相关的对象都引用进来<blockquote>
<p>你想要香蕉，但是得到的却是拿着香蕉的大猩猩和整个丛林</p>
</blockquote>
</li>
</ul>
<p>  拾遗</p>
<ul>
<li>相比于继承，优先使用组合是业界主流。</li>
<li>面向对象和关系型数据库是好朋友</li>
<li>面向对象诞生在单核时代.</li>
<li>一个类有私有和公开的部分，私有的部分是针对维护者，公开的部分是针对使用者。在使用者眼中看来，公开的契约或者接口就是全部的功能， 使用起来能降低使用者的认知负担. 以前的老式收音机，会有音量，调频，开关三个键，这三个键就是全部的功能，满足用户的所有需求.</li>
</ul>
<h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>  函数式编程的价值主张是一切皆函数. 函数从语义上来说，强调的是行为。 它有两个核心原则</p>
<ul>
<li>Stateless - 简而言之就是函数内部不保存任何状态. <ul>
<li>求解1+2+4，在过程式编程中，先算出1+2=3，作为一个值保存在变量中，然后再加上4得到最终结果7。</li>
<li>求解1+2+4，在函数式编程中，函数接受输入1，2 返回结果3，然后将返回结果3和数据4作为输入传函数，最终返回结果7 </li>
</ul>
</li>
<li>Immutability - 输入的数据是不能被改变的. 有一个复印的函数，输入是原始照片，输出是复印件，函数执行完毕之后，原始的照片必须是完好无损的.</li>
</ul>
<p> 所有的函数式编程都必须遵守这两个核心原则. 函数式编程也是声明式编程的一种.</p>
<p>  函数式编程用到的技术 </p>
<ul>
<li>尾递归优化</li>
<li>map &amp; reduce</li>
<li>管道 - 函数可以按顺序组合. 其思想来自Unix, 如果将这种组合思想应用到宏观领域就是服务的编排</li>
<li>递归 - 从直觉上定义和描述问题. 暗含了”做什么”的思想</li>
<li>柯里化 - 将一个函数的多个参数分解为多个函数. 暗含了分解和隔离思想</li>
<li>高阶函数 - 将函数A作为参数传入去，然后包装成另外一个函数再返回. 这里体现了分层和组合思想. 这是一个很重要的特性, 因为任何问题是可以分层次解决的.</li>
</ul>
<p>  一些符合函数式编程的例子:</p>
<ul>
<li>斐波拉契数列: f(x)=f(x-1)+f(x-2)</li>
<li>对一组数据进行加工，排序，然后分组，然后过滤，然后转换，最终得到结果. 可以想象一下面向对象是如何处理这个问题的</li>
</ul>
<p>  函数式编程的优势:</p>
<ul>
<li>没有状态就没有伤害，很契合高并发场景. </li>
<li>重构代码的时候可以基于Copy的方式.</li>
</ul>
<p>  反对函数式编程的声音</p>
<ul>
<li>保证不变性是有代价的<blockquote>
<p>对某个下标的数组元素的修改，就需要复制整个数组.</p>
</blockquote>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>函数式和面向对象都有各种的粉丝， 两波粉丝也是口水不断, 都是拿各自的优点来攻击对方的缺点.<br>正如我们前面提到的，这个世界上没有所谓的优点和缺点，只有特点.<br>脱离问题和场景谈优缺点都是耍流氓.</p>
<ul>
<li>当今的软件开发主要是在工程领域，而不是科学领域. 科学领域主要是研究理论和算法. 工程领域主要是解决现实中的业务问题. 根据二八法则，高水平的开发者只占20%,  一般水平的开发者占其中的 80% 。既然是工程问题，那么肯定有一大批开发者，这些开发者的水平也是参差不齐的。所以就需要一些相对简单的方式来满足大多数开发者写业务逻辑。而面向对象这种模型满足来80%的开发群体. 但这个理由还不是最充分的.</li>
<li>如果软件的规模很大，量变就会产生质变. 就需要简单的方式来写业务。只有简单符合直觉的东西，才是可读的，可理解的，然后是可维护的. 面向对象满足着一点。这是一个事实型的结论。 市面上的大型软件没有一个是基于函数式构建的.</li>
<li>写代码和写文章没有本质的区别. 写文章也要遵循一定的机构，比如总分总。写代码也是，但更严格. 代码是写给人看的，然后顺便可以执行.</li>
</ul>
<h2 id="设计一门编程语言需要考虑什么问题？"><a href="#设计一门编程语言需要考虑什么问题？" class="headerlink" title="设计一门编程语言需要考虑什么问题？"></a>设计一门编程语言需要考虑什么问题？</h2><p>如果要实现一门现代编程语言，需要考虑哪些方面的问题？ 从语言的能力的角度， 它需要有</p>
<ul>
<li>类型系统<ul>
<li>如何表达基本类型？ 整型，字符型，布尔型.</li>
<li>如何表达非基本类型？ 类和函数谁是第一等公民？</li>
</ul>
</li>
<li>流程控制<ul>
<li>顺序，选择，循环</li>
</ul>
</li>
<li>常用的算法和数据结构<ul>
<li>顺序存储和链式存储。 比如数组，链表</li>
<li>字典</li>
<li>集合的各种操作。 比如sort, sum, filter…</li>
</ul>
</li>
<li>进程和线程<ul>
<li>如何处理高并发问题</li>
</ul>
</li>
<li>异常处理<ul>
<li>如果程序遇到非正常情况， 应该如何处理？</li>
</ul>
</li>
<li>时间<ul>
<li>任何语言都必须提供良好的API支持时间。包括时区转换，时间格式化等操作.</li>
</ul>
</li>
<li>网络<ul>
<li>如何收发消息？ NIO还是AIO?</li>
</ul>
</li>
<li>正则<ul>
<li>这个是大多数语言都会内置的功能。 正则表达式是一种声明式语言</li>
</ul>
</li>
<li>文件<ul>
<li>各种各样的文件操作和解析.</li>
</ul>
</li>
<li>数据库<ul>
<li>如何连接数据库</li>
<li>如何读写数据库</li>
</ul>
</li>
<li>内存的分配和回收<ul>
<li>如何合理的利用内存？</li>
</ul>
</li>
</ul>
<h3 id="编程语言和架构是什么关系？"><a href="#编程语言和架构是什么关系？" class="headerlink" title="编程语言和架构是什么关系？"></a>编程语言和架构是什么关系？</h3><p>编程语言和架构不是一个层次上的事物。<br>从设计重要性的角度来看， 架构的选择 &gt; 编程语言的选择. 编程语言不会决定架构的选择，但是会对架构的选择产生一些影响。 当选择一门编程语言的时候，选择的往往不是这门编程语言本身，而是选择的基于这门语言的框架和生态. 就好比，张三娶了李四，娶的不仅仅是李四，还包括李四的家庭</p>
<h2 id="编程语言的未来"><a href="#编程语言的未来" class="headerlink" title="编程语言的未来"></a>编程语言的未来</h2>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>React设计思路</title>
    <url>/2020/09/13/react-design/</url>
    <content><![CDATA[<p>React作为前端主流的UI库，逐渐占据了前端的大半壁江山。所以哪个前端如果不知道React， 那基本上可以算是大大的落伍了.<br>在这里，主要聊聊</p>
<ul>
<li>什么是React?</li>
<li>为什么是React?</li>
<li>React是如何实现的？</li>
<li>React的未来</li>
</ul>
<h2 id="什么是React"><a href="#什么是React" class="headerlink" title="什么是React?"></a>什么是React?</h2><p>  <img src="/images/2020/react-logo.png"><br>  React是一个UI库，所以 React的核心定位和使命是解决UI的问题.<br>  传统意义上操作UI的做法是:</p>
<ul>
<li>触发一个行为</li>
<li>以某种方式获取DOM</li>
<li>以某种方式更新DOM</li>
</ul>
  <span id="more"></span>
<p>  React的做法:</p>
<ul>
<li>触发一个行为</li>
<li>更新数据</li>
</ul>
<p>  React相对于传统的UI库有几个明显的不同</p>
<ul>
<li>抹去DOM的概念(除了一些特殊的场合需要操作原生的DOM). 这会带来额外的收益<ul>
<li>如果没有DOM的话，那是不是一套逻辑可以应用在桌面端，移动端？答案是肯定的.</li>
<li>最近几年加入前端界的朋友是不需要学习DOM的，这样学习成本就低了些.</li>
</ul>
</li>
<li>开发者只需要关注数据和UI之间的关系, UI=render(data). 具体一点, 关注<ul>
<li>数据如何存取？</li>
<li>拿到数据之后，如何构建一个好的数据模型为UI服务？</li>
<li>操作数据</li>
</ul>
</li>
</ul>
<h2 id="为什么是React"><a href="#为什么是React" class="headerlink" title="为什么是React?"></a>为什么是React?</h2><p>  React能得到快速的发展，离不开下面几个因素：</p>
<ul>
<li>大厂的加持。这年头背后得有个有钱的爸爸才能发展的好啊。</li>
<li>繁荣的生态。单纯的React解决不了大问题。 还需要配上Redux, redux-router一系列相关的类库和框架.</li>
<li>比较好的设计理念， UI=render(data). 相比于之前的库和框架，这个设计理念是React独有的</li>
</ul>
<h2 id="React是如何实现的？"><a href="#React是如何实现的？" class="headerlink" title="React是如何实现的？"></a>React是如何实现的？</h2><p>  这里不打算讨论非常细的东西，比如组件的生命周期，如何更新组件的状态等等。<br>  从宏观角度来看，在React实现上有两个绕不过去的概念</p>
<ul>
<li><p>JSX</p>
<pre class="line-numbers language-none"><code class="language-none">  class HelloMessage extends React.Component &#123;
  render() &#123;
    return (
      &lt;div&gt;
        Hello &#123;this.props.name&#125;
      &lt;&#x2F;div&gt;
    );
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看return里面的内容，是不是很熟悉？不就是模板么？对，如果非要说成模版也没错。 但在React这里可不可能这么叫，咱得换个说法，不然怎么显示出React和别人不一样呢？<br>从语法层面，这个叫JSX.<br>从抽象的角度来说，这个叫组件.<br>从实现的角度来说这个叫Virtual DOM<br>传通的UI设计是要分离CSS, Html和JS的， 这种分类的维度是基于技术层面的划分. JSX认为一段CSS, 一段Html, 一段JS组合在一起才算是一个完整意义上的实体，是可以单独交付出去的。所以这里带来了前端思维方式的变化。</p>
</li>
<li><p>Diff算法<br>上面说过，React对开发者是抹去了Dom的概念，但Web的展示还是基于Dom的，所以要将Virual DOM转为 真实DOM。 如何以一种更快更好的方式将Virtual DOM转为真实 DOM呢? 以后有时间单独讨论.</p>
</li>
</ul>
<h2 id="React的未来"><a href="#React的未来" class="headerlink" title="React的未来"></a>React的未来</h2><ul>
<li>React的设计理念, UI=render(data)在未来很长一段时间内很会稳定.</li>
<li>React和Vue的生态之间的竞争是一个看点.</li>
<li>React的许可协议将来会不会有变数？</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>前端</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux设计及相关</title>
    <url>/2020/09/14/redux-design/</url>
    <content><![CDATA[<p>基本上，一说到react, 正常会有一个词随之而出现，那就是Redux. 它们是一对好基友。<br>这篇文章主要是聊聊下面一些话题</p>
<ul>
<li>什么是Redux?</li>
<li>为什么是Redux?</li>
<li>React和Redux的关系是什么？</li>
<li>Redux的未来</li>
</ul>
<h2 id="什么是Redux"><a href="#什么是Redux" class="headerlink" title="什么是Redux?"></a>什么是Redux?</h2><p><img src="/images/2020/database.png"><br>Redux是一个存储数据的地方，这个地方你可以叫它为Store,或者JS对象，或者前端数据库，这些都是名，实际的内涵是存储数据.<br>既然是存储数据的地方， 那么接下来有几个问题就很自然了</p>
<ul>
<li>数据有哪些实体？</li>
<li>数据的实体有哪些行为？ 增，删，改，查。</li>
<li>有哪些方式能获得这些数据？</li>
<li>如何避免不同的实体有相同的冗余数据？<span id="more"></span>
对于以上问题，相信部分人可能会不耐烦了，不就是前端展示么？怎么会牵扯这么多东西.<br>这是因为现在的前端开发有一些不需要讨论的大前提：单页.<br>为什么需要单页呢？-给用户丝滑般的体验啊.<br><img src="/images/2020/chocolate.png"><br>大概的关系如下：单页 -&gt; 需要状态 -&gt; 需要存储状态的地方 -&gt; 维护状态</li>
</ul>
<h3 id="Redux的核心概念是什么？"><a href="#Redux的核心概念是什么？" class="headerlink" title="Redux的核心概念是什么？"></a>Redux的核心概念是什么？</h3><p>  <img src="/images/2020/redux-workflow.png"></p>
<ul>
<li>store</li>
<li>action</li>
<li>reducer</li>
</ul>
<h3 id="Redux的核心原则是什么？"><a href="#Redux的核心原则是什么？" class="headerlink" title="Redux的核心原则是什么？"></a>Redux的核心原则是什么？</h3><ul>
<li>单一数据源</li>
<li>数据是只读的</li>
<li>单向数据流</li>
</ul>
<h2 id="为什么是Redux"><a href="#为什么是Redux" class="headerlink" title="为什么是Redux?"></a>为什么是Redux?</h2><p>因为需要状态管理。可以有如下三个选项</p>
<ul>
<li>Flux</li>
<li>Redux</li>
<li>Mbox </li>
</ul>
<p>Redux是Flux的升级版，Mbox生态圈相对小一些。 所以一般情况下会选择Reduxs</p>
<h2 id="React和Redux的关系是什么？"><a href="#React和Redux的关系是什么？" class="headerlink" title="React和Redux的关系是什么？"></a>React和Redux的关系是什么？</h2><p><img src="/images/2020/react-redux.png"><br>前面提到了, React和Redux还是一对好基友。但React是否需要Redux？在下列情况下，是不需要Redux的</p>
<ul>
<li>项目比较简单，所有的状态保存在React组件里</li>
<li>每次请求的数据直接从后台api拿, api的性能很高，没有延迟</li>
<li>用户不需要好的的UI体验</li>
</ul>
<p>但仔细审核这三点，在大多数情况下，是不成立的.<br>所以在大多数情况，我们需要状态管理.</p>
<h2 id="Redux的未来"><a href="#Redux的未来" class="headerlink" title="Redux的未来?"></a>Redux的未来?</h2><p>Redux的方向大概有两个</p>
<ul>
<li>如何更好的规范数据实体之间的关系</li>
<li>如何提供api更好的操作数据</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码系列 - IOC和DI</title>
    <url>/2021/06/20/spring-ioc/</url>
    <content><![CDATA[<pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">[rectangle setX: 10 y: 10 width: 20 height: 20];

[rectangle setX: 10 y: 10 width: 20 height: 20];


[rectangle setX: 10 y: 10 width: 20 height: 20];

[rectangle setX: 10 y: 10 width: 20 height: 20];


[rectangle setX: 10 y: 10 width: 20 height: 20];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定位，加载和解析</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>englishtown<span class="token punctuation">.</span>vertx<span class="token punctuation">.</span>security<span class="token punctuation">.</span>constants</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constants</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> ACCESS_HEADER <span class="token operator">=</span> <span class="token string">"X-EF-ACCESS"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于一个系统的使用者来说，源码就是一个黑盒，不需要关心太多. 正如陀螺仪之于手表，集成电路之于CPU一样，仅仅需要了解这个系统可以做什么，以及这个系统不可以做什么就可以了.</p>
<ul>
<li>背景</li>
<li>IOC</li>
<li>DI</li>
</ul>
<span id="more"></span>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="为什么需要读源码？"><a href="#为什么需要读源码？" class="headerlink" title="为什么需要读源码？"></a>为什么需要读源码？</h3><p>  搞清楚目的和动机，往往比做什么和怎么做更重要.<br>  先说结论</p>
<ul>
<li>对于我们大多数人来说，不需要读源码或者说读了没什么用. 换言之，我们在读任何源码之前，要问一个问题，为什么要读它?</li>
</ul>
<p>  如果我们需要读源码，基本上就是下面两个大的理由</p>
<ul>
<li>为了源码而源码<ul>
<li>因为别人看了，我们也要看</li>
<li>为了装X或面试</li>
<li>….</li>
</ul>
</li>
<li>为了解决某个问题<ul>
<li>代码运行的时候遇到报错，需要跟踪源码，这种情况很少见，如果出现这种情况，只能说明这个框架是做的还是不够好.</li>
<li>吸取源码的一些思想和设计思路，应用到自己的项目中</li>
</ul>
</li>
</ul>
<h3 id="读源码的姿势"><a href="#读源码的姿势" class="headerlink" title="读源码的姿势"></a>读源码的姿势</h3><p> 读源码和读一本武侠小说或者宏观经济学没有大的区别，因为源码和书本质上都是信息，读源码就是萃取信息的过程。<br> 不同的阅读目的，需要用不同的姿势。这里的目的就预设为：吸取源码的一些思想和设计思路，应用到自己的项目中</p>
<ul>
<li><p>小说的主题和源码的初衷<br>一本书肯定有一个或者某几个主题，比如歌颂爱情，追求真理。 框架的源码也是的，就Spring来说是为了简化Java开发 - 说起来是简单的，但实现起来并不简单。</p>
</li>
<li><p>小说的线索和源码的设计原则和策略<br>就拿天龙八部来说，它的主线可以是侠义，恩仇，爱情。然后爱情这块就分为三个主人公的分线。Spring源码也可以认为有几条主线:IOC，AOP，POJO, 模版. 这些是Spring的起点和基石，贯穿了Spring的方方面面.</p>
</li>
<li><p>小说的结构和源码的的模块设计<br>小说可以分为几个章节，每个章节大概讲了什么，每个章节的编排顺序是什么。同理，源码可以分为几个模块，模块之间的关系是什么？</p>
</li>
<li><p>小说的细节和代码的细节<br>里面会有一些观点，然后为了证明这些观点会有事实和逻辑。同理，源码模块里的一些方法会有一些技术细节，比如if,else, try, catch, synchronized, 某个数据结构，或者某个事件的的触发. 所以在这里我们可以得出一个结论：如果读源码二话不说闷着头就跳进入到方法的细节里，这是不对的，是错误的方向.</p>
</li>
<li><p>看书读后感和看源码读后感<br>小时候记得往往要写个什么观后感，现在想想这个事还是挺重要的。看一本书，可以看到作者传递的思想和价值主张(value proposal),得到某个启发，某个思维模型或框架，或者某个精彩的案例和论证,或者优雅的遣词造句，这些是对写作文有帮助的. 看源码也是，举个命名方面的例子，Spring在定位Bean的过程中涉及到AbstractRefreshableConfigAplicationContext类， 这个类名就很长，由5个单词组成, 一般而言，项目中很少取这么长名字来给类命名. 所以Spring的作者传递了这样一个思想：能清楚的表达设计意图是最重要的，其次才是长不长的问题。</p>
</li>
<li><p>心态<br>如果用大口吃烤串的心态去看书和读源码，很显然是没有效果和收益的。现在大多数人比较浮躁，看东西讲究快和多，讲究快本身没有问题，但快了之后，质量就会下降。所以看经典框架的核心模块，要以喝茶的心态来看，也就是《思考，快与慢》里提到的”系统2”.</p>
</li>
<li><p>重要的的东西<br>根据二八法则，一本书里只有20%的东西是重要的，看书不是越多越好，而是看少而精的书，那么源码也不例外，不需要阅读很多框架的源码，也不需要阅读一个框架的所有源码，那如何找到这20%？这是另外一个话题</p>
</li>
</ul>
<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="IOC想要讲的故事"><a href="#IOC想要讲的故事" class="headerlink" title="IOC想要讲的故事"></a>IOC想要讲的故事</h3><p> IOC - Inversion of Control, 中文是控制反转， 不管是中文还是英文，从字面上很难理解它的意思, 这与我随便说个词语”依赖变换“没什么区别。<br> 让我们切换一个角度，看看在代码层面IOC意味着什么. 现在有类A和类B，传统的做法是类A依赖于类B，IOC的做法是，A不要依赖于B, 要依赖于B的抽象AbstractB. 比较一下前后的变化</p>
<ul>
<li>A -&gt; 具体的B</li>
<li>A -&gt; AbstractB -&gt; (某种方式指向) 具体B</li>
</ul>
<p> 这种变化让人想到了什么？AbstractB像是一个中介，隔离了A和具体的B. AbstractB侧重描述做什么，具体的B侧重于描述怎么做。<br> 所以可以得出一个结论: IOC真正的内涵是将做什么(what)和怎么做(how)隔离开了, 可以认为<strong>做什么</strong> 是某个企业几十年不会变的核心概念和流程, <strong>怎么做</strong> 为了达成某件事的手段是多样的，现在世界本身也是如此，付款的方式有现金和手机支付。所以如果一个复杂的系统没有基于IOC, 那么这个系统没有未来，如果一个系统基于IOC，这个复杂的系统才有演化的可能.</p>
<p>对于IOC，我们有这样的肖像刻画</p>
<ul>
<li>将做什么和怎么做<strong>隔离</strong>出来了 - 总感觉做开发的天天无脑的念叨<strong>隔离</strong>就可以了….</li>
<li>符合依赖倒置原则</li>
<li>符合好莱坞原则 - 体现在对象实例化的过程中</li>
</ul>
<p>对于开发者来说，IOC在框架层面是标配，就好比汽车有个ABS系统一样，如果现在买辆车，如果没有防抱死系统，那真的是很奇怪.</p>
<h3 id="有哪些框架支持IOC功能？"><a href="#有哪些框架支持IOC功能？" class="headerlink" title="有哪些框架支持IOC功能？"></a>有哪些框架支持IOC功能？</h3><ul>
<li>Spring算一个 - Spring提供了很多功能，我们可以只使用其中的IOC功能</li>
<li>.net的Autofac</li>
<li>HK2 - 轻量级的IOC框架，</li>
<li>如果没有上述框架，只能手写了</li>
</ul>
<h3 id="研究Spring-IOC的切入点"><a href="#研究Spring-IOC的切入点" class="headerlink" title="研究Spring IOC的切入点"></a>研究Spring IOC的切入点</h3><p>   要研究一个东西，可以有很多角度，但最好是遵循简单这个原则。<br>   一个比较简单的例子:<br>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定位，加载和解析</span>
<span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"defaultconstruct/user.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 实例化Bean,包含依赖注入的过程</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>  Spring IOC启动的大体过程</p>
<ul>
<li>定位 - 找到相应的BeanDefinition文件. 这是起点. 其中Refresh是核心方法.</li>
<li>加载 - 加载BeanDefinition文件.</li>
<li>注册 - 解析BeanDefinition,并放入IOC容器当中.</li>
</ul>
<h3 id="IOC-时序图"><a href="#IOC-时序图" class="headerlink" title="IOC 时序图"></a>IOC 时序图</h3><p> <img src="/images/spring/ioc.jpg" alt="avatar"></p>
<h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h2><h3 id="DI-时序图"><a href="#DI-时序图" class="headerlink" title="DI 时序图"></a>DI 时序图</h3><p> <img src="/images/spring/di.jpg" alt="avatar"></p>
<h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之武林盟主 - Spring</title>
    <url>/2020/10/20/spring/</url>
    <content><![CDATA[<p>许多年之后，当讨论起Java开发的时候，可以不讨论安卓开发，可以不讨论多线程，可以不讨论流，可以不讨论JVM, 但Spring是一个绕不过去的话题.<br>Spring从诞生到现在已经有20年左右的历史，这个生命不如linux, 但也足够长了.<br>在前端界，还找不到和Spring框架相提并论的框架，Spring的框架在Java领域是没有对手的，可以说找不到竞品，前端至少是React和vuejs两家独大，而且也是最近几年才出来的产物.<br>这篇文章主要闲聊</p>
<ul>
<li>什么是Spring?</li>
<li>为什么是Spring?</li>
<li>如何实现一个Spring?</li>
<li>Spring实践？</li>
<li>Spring的发展</li>
<li>拾遗</li>
</ul>
<span id="more"></span>
<h2 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring?"></a>什么是Spring?</h2><p>2002年10月, Rod Johnson出版了一版名为《Expoert One-on-One J2EE设计和开发》的书，书中指出了Java EE和EJB组件框架中的主要缺陷。在这本书里，他提出了基于普通Java类和注入依赖的更简单的方案.<br>在这本书发布不久之后，有两位开发者说服了Rod Johnson基于书上的代码创建一个开源基础框架的项目. 2003年三位开发者创建了一个项目, 开发者yann给框架取了一个很有诗意的名字”Spring”.有点类似中国文化里蕴含的一元复始，万象更新的意思.<br>所以Spring是一个框架，致力于简化Java开发</p>
<p>Spring有很多功能，如果不断的去砍掉一些功能，让Spring只具备最核心的功能，应该是</p>
<ul>
<li>IOC</li>
<li>AOP<br>这是Spring其他的功能的基础和起点</li>
</ul>
<p>Spring当前最新的版本是5.0, 5.0要求的最低JDK版本是8, JavaEE规范是7. Spring的大版本更新至少要基于两个因素</p>
<ul>
<li>一个最低的JDK版本 </li>
<li>特定的JavaEE规范 </li>
</ul>
<h2 id="为什么是Spring"><a href="#为什么是Spring" class="headerlink" title="为什么是Spring?"></a>为什么是Spring?</h2><p>这个问题很简单，在当时从框架层面简化Java开发的只有Spring框架，并没有其他框架，可谓一家独大.<br>就好比创业的时候，选择了一个赛道，然后这个赛道上只有一家企业，等这家企业壮大了，只要不作死，其他企业想进来也没有机会了.</p>
<h2 id="如何实现一个Spring"><a href="#如何实现一个Spring" class="headerlink" title="如何实现一个Spring?"></a>如何实现一个Spring?</h2><h3 id="整体设计目标"><a href="#整体设计目标" class="headerlink" title="整体设计目标"></a>整体设计目标</h3><p>  Spring框架所有做的事情都可以说是为了一个终极目的: 简化Java开发.</p>
<h3 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h3><ul>
<li>基于POJO的轻量级和最小侵入编程<ul>
<li>POJO是简单的，那就说明是容易理解的，而且不含有杂质.</li>
</ul>
</li>
<li>DI和面对接口实现松耦合编程<ul>
<li>隔离了接口和实现</li>
</ul>
</li>
<li>基于AOP和惯例的声明式编程<ul>
<li>AOP是为了隔离了核心功能和非核心功能</li>
<li>惯例是用户熟悉的事物</li>
</ul>
</li>
<li>基于AOP和模板减少样板式代码<ul>
<li>模版说明是一致的编程模型，减少重复代码.</li>
</ul>
</li>
</ul>
<h3 id="战略背后的思想"><a href="#战略背后的思想" class="headerlink" title="战略背后的思想"></a>战略背后的思想</h3><p>  基于上面的策略，可以总结出这些策略背后的思想</p>
<ul>
<li>符合用户的心智模型 - 简单，熟悉，一致<ul>
<li>用户喜欢简单和熟悉的东西. 因为简单的东西和熟悉的东西意味着可理解，可理解意味这可维护</li>
<li>一致的编程模型。 对于类似的东西，不可能用方法A处理事物A, 方法B处理事物B, 而是要用一个统一的方法处理事物A和事物B</li>
</ul>
</li>
<li>隔离<ul>
<li>隔离抽象和和具体，抽象代表着稳定，具体代表着不稳定</li>
<li>隔离核心和非核心，核心的东西代表着重要，非核心的东西代表着次要</li>
</ul>
</li>
</ul>
<p> 上面这两大思想可以用来指导架构设计和类库设计.</p>
<h3 id="模块图"><a href="#模块图" class="headerlink" title="模块图"></a>模块图</h3><p>  <img src="/images/2020/spring-framework-runtime.jpeg"></p>
<ul>
<li>Spring容器的三架马车, 三是个好数字，三生万物. Bean, Core, Context为Spring框架奠定了基石    * Bean<br>Bean是Spring组件核心中核心，正如一部电视剧的主角一样，挪走了主角了，这部剧就没有什么看点了. 正如面向对象编程里，对象是第一核心，剩下的是对象的关系和行为。Spring Bean也是如此, Bean是Spring起点. Bean主要回答了三个问题<ul>
<li>如何定义一个Bean</li>
<li>如何创建一个Bean</li>
<li>如何解析一个Bean    * Context<br>Context赋予了Bean更丰富的内涵，让Bean活跃起来,变的更有生命力</li>
<li>获得Bean列表</li>
<li>解析资源</li>
<li>发布事件</li>
<li>国际化    * Core<br>Core组件是一系列工具的集合, 它的某些概念与Bean没有直接关系，比如Log功能。Core这个名字其实取的不是特别好，会让人有点疑惑,会让人感觉Core组件就是核心， 核心意味着所有的组件都围绕着Core转，其实并不是，Spring的核心是Bean。拿打仗做个比喻, Bean是冲锋陷阵的士兵，Context是指挥官，协调管理这些士兵, 那么Core是什么呢？更多类似于后勤和伙夫, 从这里可以看出Core并不是核心. 所以把Core理解为Spring的瑞士军刀比较合适, 因为Core能提供某些贴心的小功能.</li>
</ul>
</li>
</ul>
<h2 id="Spring实践？"><a href="#Spring实践？" class="headerlink" title="Spring实践？"></a>Spring实践？</h2><h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><p>  展示一般而言与Web有关，这里的展示意义更加宽泛一点，可以指手机，手表等任何显示设备. 展示层实现策略有两大方向</p>
<ul>
<li>前后端不分离</li>
<li>前后端分离</li>
</ul>
<h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>  任何的信息都必须是可以存储的，或者叫做持久化。这样的信息是基本事实，可以给各种方式（比如机器学习）企业的决策提供依据。 数据存储有两大类型</p>
<ul>
<li>关系型数据</li>
<li>非关系型数据</li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>  用户流量增加之后，为了获得更好的用户体验，减轻数据库的压力，需要一个能抗事的家伙. 这个就是缓存.</p>
<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>  对于大多数系统，必须回答两个问题</p>
<ul>
<li>这个用户是谁？</li>
<li>这个用户能做什么？</li>
</ul>
<h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><p>  任何系统都不是孤立的，系统A想和系统B相互交流，有两种办法</p>
<ul>
<li>系统A调用系统B的接口</li>
<li>引入一个系统M来隔离系统A和系统B, 这样系统A和系统B就完成隔离开了，符合正交的特性。换句话以后系统A即使消亡了，也与系统B没有什么关系. 这个M往往称做消息系统或者消息中间件.</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>  系统出了故障，我们希望能快速的去解决故障，而不是两眼一抹黑。换句话说，我们能对系统有掌控。 一般来说有如下方式</p>
<ul>
<li>日志</li>
<li>监控</li>
</ul>
<h2 id="Spring的发展"><a href="#Spring的发展" class="headerlink" title="Spring的发展"></a>Spring的发展</h2><h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><blockquote>
<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p>
</blockquote>
<p>  Spring Boot不是Spring的功能升级，而是简化了Spring的构建. 使用Spring Boot</p>
<ul>
<li>没有繁琐的XML的配置</li>
<li>不需要操作Jar包之间的依赖关系</li>
<li>内置了Jetty容器，不像之前要生成一个war包，然后拷贝到特定的jetty目录下.</li>
</ul>
<p>  两个例子</p>
<ul>
<li>我们知道汽车有一键启动的功能，在此之前我们要掏出钥匙，插入钥匙，启动。 做的事情都是启动，但很明显一键启动完全提高了效率.</li>
<li>做过前端开发的朋友，应该知道create-react-app这个脚手架，可以大大的提搞开发者的效率，Spring-boot扮演的就是脚手架这个角色。 所以Spring boot从整个Spring的历史来看，它很重要，但没有革命性的东西。 </li>
</ul>
<h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><blockquote>
<p>Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems</p>
</blockquote>
<p>  从这里可以看出, Spring Cloud的定位和明确</p>
<ul>
<li>聚焦于分布式的问题 </li>
<li>提供一致的编程模型. 比如在这里模型下面，服务发现框架可以从容易的从ZooKeeper切换到Consul </li>
</ul>
<p>  所以Spring Cloud的目标是非常宏大, 它不像Spring Shiro是为了解决某个特定的领域的问题, 它要是统一解决分布式领域的各种问题，具体一点就是微服务和云原生相关的问题， 可谓雄心勃勃。 来看看Spring Cloud都提供来哪些工具</p>
<ul>
<li>Spring Cloud Eureka - 解决了服务注册和发现的问题<ul>
<li>竞品 - Nacos, k8s的Service(可以被Istio追踪，纳入servicemesh的管理)</li>
</ul>
</li>
<li>Spring Cloud Ribbon - 解决了如何将流量公平得分配到每台机器的问题.<ul>
<li>竞品 - k8s的Service</li>
</ul>
</li>
<li>Spring Cloud Hystrix - 解决流量过大时， 如何将让流量不再进来的问题.<ul>
<li>竞品 - Sentinel, k8s的Istio</li>
</ul>
</li>
<li>Spring Cloud Zuul - 解决了流量是否合法，以及流量进来之后去哪里的问题.<ul>
<li>竞品 - Kong, k8s的Ingress</li>
</ul>
</li>
<li>Spring Cloud Config - 解决了服务配置信息集中管理的问题<ul>
<li>竞品 - 携程的Apollo, k8s的ConfigMap和Secret</li>
</ul>
</li>
<li>Spring Cloud Stream - 解决了不同服务之间相互通信的问题.</li>
<li>Spring Cloud Bus - 解决了不同服务之间如何共享信息的问题</li>
<li>Spring Cloud Sleuth - 解决了如何了解服务全貌这个问题<ul>
<li>竞品 - 推特的Zipkin， 大众点评的CAT</li>
</ul>
</li>
<li>Spring Cloud Feign - 简化了服务的调用方式</li>
<li>Spring Boot Actuator - 解决了监控程序的问题<ul>
<li>竞品 - ZMon, DataDog</li>
</ul>
</li>
</ul>
<h2 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h2><p>官网中有一幅图，是从Spring boot到Spring Cloud, Spring Cloud DataFlow, 这幅图可以反应这三者之间的时间关系，但同时有个误区，它会给人传达这样一个意思</p>
<blockquote>
<p>小学生 -&gt; 中学生 -&gt; 大学生</p>
</blockquote>
<p>就是这三者是能力渐进增强的，其实并不是， Spring Boot充其量是个脚手架的角色，和Spring Cloud不是同一个层次的事物，放在一起不好比较.</p>
<p>如果把Spring, Spring Boot, Spring Cloud放在一起，那它们应该是一个什么样的关系呢？</p>
<blockquote>
<p>高尔夫1.4T -&gt; 高尔夫2.0T -&gt; 途观</p>
</blockquote>
<p>Spring Boot让Spring变得更快，Spring Cloud让Spring 能力更强</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>框架</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>系统的约束和动力</title>
    <url>/2020/09/18/system-restrain-power/</url>
    <content><![CDATA[<p><img src="/images/2020/car.png"><br>一个系统能发展是有动力，如果要让系统发展的好则需要约束。就好像汽车的前进是靠发动机，汽车的减速靠的是刹车，汽车行进的方向靠的是方向盘。发动机是动力，刹车和方向盘是约束.<br>那么动力和约束与生活有什么关系呢？ 让我们从直觉和感性的角度来一场探索之旅吧</p>
<ul>
<li>系统的动力</li>
<li>系统的约束</li>
<li>约束和动力之间的关系</li>
</ul>
<span id="more"></span>
<h2 id="系统的动力"><a href="#系统的动力" class="headerlink" title="系统的动力"></a>系统的动力</h2><p><img src="/images/2020/engine.jpeg"><br>一个系统的动力在不同的情况下可以有如下的表现形式</p>
<ul>
<li>人类的各种欲望，比如挣钱，获得胜利，获取别人尊重</li>
<li>一辆汽车的引擎</li>
<li>一个公司想盈利</li>
<li>动物生存和繁殖的本性，尽可能得获取更多的资源。</li>
<li>产品需求的不断变更</li>
<li>像系统的正反馈，是一个熵增的过程</li>
<li>一个人成长的力量，比如体能,目标，价值观</li>
</ul>
<h2 id="系统的约束"><a href="#系统的约束" class="headerlink" title="系统的约束"></a>系统的约束</h2><p><img src="/images/2020/steering-wheel.jpg"><br>一个系统的约束可以体现在如下方面</p>
<ul>
<li>有限的客观物质。比如一个吃糖里的水是有限的。</li>
<li>规则。人制定的法律制定</li>
<li>道德。一个组织内自发形成的非强制性约束</li>
<li>代码规范。长期以来形成的最佳实践。</li>
<li>项目的发布流程。</li>
<li>一辆汽车的刹车和方向盘</li>
<li>像系统的负反馈，是一个熵减的过程</li>
<li>阻碍一个人成长的要素，比如懒惰，恐惧，急躁，贪心, 骄傲, 自我认知失调 等等.</li>
<li>规范一个人的成长要素，比如自律，计划.</li>
</ul>
<p>所以约束有如下含义</p>
<ul>
<li>有限的资源。</li>
<li>只做什么，暗含着只在边界内做事</li>
<li>不做什么，暗含着不要在边界外做事。</li>
</ul>
<h2 id="约束和动力之间的关系"><a href="#约束和动力之间的关系" class="headerlink" title="约束和动力之间的关系"></a>约束和动力之间的关系</h2><p>没有约束，系统就要失去控制。<br>没有动力，系统就不会发展。<br>约束是保证系统更快更好的发展，达到一种平衡的状态。<br>一个人如果没有约束，最终会越来越堕落。<br>一个组织如果没有约束，最终会人心向背，分崩离析。<br>一个国家如果没有约束，最终会陷入混乱状态。</p>
<p>一个小孩在成长的过程中，需要家长和老师的教育，才能成为一个有健全人格的人。<br>一个项目从立项到完成，再到维护，如果没有建立一个很好的流程规范，项目的会变得很难维护。如果一个项目存在了10年左右的时间，那么肯定有好多人修改过，每个人都有自己的风格，如果修改代码的时候不遵循一定的规范，项目最终会变成脆弱的系统。</p>
]]></content>
      <categories>
        <category>思维</category>
      </categories>
      <tags>
        <tag>思维</tag>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>如何衡量一个人对技术框架的熟练度?</title>
    <url>/2020/08/29/tech-proficiency/</url>
    <content><![CDATA[<p>在日常开发中, 作为开发者大多数时间面对的是技术和业务, 在这篇文章里, 我主要想说说作为开发者, 对一项技术应该如何合理的去把握.<br>假象一下, 现在我们要学习一个新的技术框架, 可能是Spring boot也可能是React, 或者是Redis, 我们应该如何切入?<br>现在姑且从三个大的角度对技术的熟练度进行划分</p>
<ul>
<li>应用<ul>
<li>简单场景的应用</li>
<li>复杂场景的应用</li>
</ul>
</li>
<li>设计<ul>
<li>框架设计的初衷</li>
<li>框架的核心概念</li>
<li>框架的设计思路</li>
<li>框架的设计模式</li>
<li>框架的设计思想,原则和哲学</li>
</ul>
</li>
<li>实现<ul>
<li>核心模块的实现细节</li>
<li>一些模块实现的奇技淫巧</li>
</ul>
</li>
</ul>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="简单场景的应用"><a href="#简单场景的应用" class="headerlink" title="简单场景的应用"></a>简单场景的应用</h3><p>很不幸, 人往往是在框架或者特定的环境下做事的, 长此以往人会形成特定的习惯行为模式,这种特定的习惯会形成一个有陷阱的舒适圈.<br>在实际的工作中, 我们往往知道一个东西是如何使用的就是够了. 比如说这样一个例子, 现在要页面要实现一个新增用户的功能, 基本上需要写存储过程, 写DAL层, 写Service层, 写页面层(包括验证), 然后做相应的测试. 要完成这个例子基本上就是在一个框架下完成的, 每个公司都有自己相应的框架, 不同之处就是名称不一样.<br>在这样的场景下, 我们知道这个api是如何使用的就足够了, 我们也必然会变成一个api熟练工.<br>长此以往, 一年下来如果只是做这种类似的功能, 对自己能力的提升是没有任何帮助的, 换句话说你表面上有的只是一年的经历, 实际上是一个礼拜的经验. 但这事对个人来说只能说是常态, 但对组织来说是必须, 因为一个组织需要的是分工, 分工必然导致一些工作是简单的重复和可替代性, 这种模式下的做事方式是具有可预见性的</p>
<span id="more"></span>
<h3 id="复杂场景的应用"><a href="#复杂场景的应用" class="headerlink" title="复杂场景的应用"></a>复杂场景的应用</h3><p>复杂场景一般是指两种情况</p>
<ul>
<li>假设有模块A, 由项目组A负责, 模块A会被很多系统调用, 模块A依赖于模块B(项目组B负责), 模块B依赖于模块C(项目组C负责). 这里的复杂度可以细分为两种<ul>
<li>模块依赖的复杂度, 这里模块依赖会形成一个有向无环图, 如果是一个团队负责这些所有模块, 那么这个复杂度仅仅存在于团队内部.</li>
<li>如果是不同团队负责不同的模块, 那么就是组织之间沟通的复杂度. 这种类型的复杂度是一种玄学, 往往会伴随着如下名词或短语出现,“集成”,“扯皮”, “等他们数据准备好”, “被他们block住了”</li>
</ul>
</li>
<li>假设模块之间的关系是固定的, 那么随着用户数量的上升, 这个框架在性能方面是否还能扛得住? 量变会引起质变, 在其余什么都不变的情况下,仅仅是用户量的提升, 理论上会导致系统扛不住. 这里会有一个很自然而然的问题, 这个框架或者系统的极限是什么? 遗憾的是, 只有大公司才有会遇到这个问题, 对于大部分公司开发者而言, 是没有这样的实操经验的.</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在这个层次上，我们所需要就是会用就可以了，至于为什么要这么用，就不是很清楚了. 还真别说，这招在中小公司很管用.</p>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><h3 id="框架设计的初衷"><a href="#框架设计的初衷" class="headerlink" title="框架设计的初衷"></a>框架设计的初衷</h3><h3 id="框架的核心概念"><a href="#框架的核心概念" class="headerlink" title="框架的核心概念"></a>框架的核心概念</h3><h3 id="框架的设计思路"><a href="#框架的设计思路" class="headerlink" title="框架的设计思路"></a>框架的设计思路</h3><h3 id="框架的设计模式"><a href="#框架的设计模式" class="headerlink" title="框架的设计模式"></a>框架的设计模式</h3><h3 id="框架的设计思想-原则和哲学"><a href="#框架的设计思想-原则和哲学" class="headerlink" title="框架的设计思想, 原则和哲学"></a>框架的设计思想, 原则和哲学</h3><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="核心模块的实现细节"><a href="#核心模块的实现细节" class="headerlink" title="核心模块的实现细节"></a>核心模块的实现细节</h3><h3 id="一些模块实现的奇技淫巧"><a href="#一些模块实现的奇技淫巧" class="headerlink" title="一些模块实现的奇技淫巧"></a>一些模块实现的奇技淫巧</h3>]]></content>
  </entry>
  <entry>
    <title>三适原则</title>
    <url>/2020/08/29/three-principles/</url>
    <content><![CDATA[<p>三是我喜欢的数字之一.<br>某个时候, 我想是不是有些原则可以指导学习,工作或者生活呢?  这个原则不必然是根本性, 也不必然是很牛, 我只是想它在大多数情况下是正确的. 于是我总结出三适原则, 和几个朋友交流了一下这个三适原则, 他们对这个原则大多还是比较认可.<br>三适就是</p>
<ul>
<li>适度(moderate)</li>
<li>适应(adaptation)</li>
<li>适合(fit)</li>
</ul>
<h2 id="适度"><a href="#适度" class="headerlink" title="适度"></a>适度</h2><p>  <img src="/images/2020/teetertotter.png"><br>  我们常常说”凡事有个度“, “阴阳”, “刚柔并济”, “中庸”,“平衡”, “过犹不及”, “进可攻退可守”，“恰到好处” 差不多就是指这个意思.<br>  <span id="more"></span><br>  为什么适度很有用? 几个例子</p>
<ul>
<li>一个新人刚刚入职, 肯定是要表现自己的, 加班, 无论什么事都接下来, 领导很满意. 等过了试用期, 领导发现新人表现比之前差, 有点失望了. 这里的问题就在于新人在试用期用力过猛, 领导对他期望值很高, 导致后续乏力, 领导对他失望要很正常.</li>
<li>在NBA里, 有不同类型的球员, 有的暴发力一流, 有的力量一流, 有的三分很准. 但有一类球员, 他是靠节奏取胜的, 他没有爆发力, 也没有力量, 但他运球在该快的时候快, 该慢的时候时候慢, 节奏掌控的很好,代表球员是斯蒂夫纳什.</li>
<li>中国人说话讲究中庸之道, 不把话说太死, 这样说话就有回旋的余地, 这里也体现了灰度思维.</li>
<li>在学习的时候, 不能学习太长, 学习一段时间之后,就要强制休息. 精力分配要适度, 这样才能继续学习提供良好的基础.<h2 id="适应"><a href="#适应" class="headerlink" title="适应"></a>适应</h2><img src="/images/2020/ecosystem.jpg"><br>外部环境是在变化的, 作为人是否也要改变来适应这个变化? 一些例子和理论</li>
<li>物竞天择, 适者生存. 这是自然界最基本的规律.生物和生物之间相互竞争, 最终适应环境的生物活下来了,这里蕴含了生态思维和演化思维. 试想一个亚马孙丛林, 没有人去干涉它, 它始终能保证着活水源头, 物种的多样性.</li>
<li>现在开发技术更新的很快, 要不要学习? 答案是要学习, 否则无法适应技术发展的趋势. 但如何学习是另外一个单独的话题</li>
<li>一个软件的架构要适应业务的发展，要有弹性.</li>
</ul>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li>阿里技术专家里李运华提出了架构三大原则之一-演化原则。 演化原则和这里的适应原则内涵不谋而合。</li>
</ul>
<h2 id="适合"><a href="#适合" class="headerlink" title="适合"></a>适合</h2><p>  <img src="/images/2020/key.jpg"><br>  这里的适合更多的是强调一种匹配. 几个例子</p>
<ul>
<li>一把钥匙配一把锁, 因为锁的大小决定了钥匙的大小.</li>
<li>这对情侣真配真合适.</li>
<li>小李很适合做销售.</li>
<li>橘生淮南则为橘，生于淮北则为枳, 什么样的植物适合什么样的土壤.</li>
<li>有些人工作一段时间之后, 会抱怨为什么工作内容这么无聊呢? 也许他没有错, 这份工作也没错, 他只是不适合这份工作而已.</li>
</ul>
<h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><ul>
<li>如何用适合这个原则解释康威定律？<ul>
<li>康威定律的大体意思是：软件架构受限于组织架构的沟通方式。简单的说，有 项目组 A和项目组 B, 项目组 A负责数据访问层，项目组 B负责业务逻辑层， 那么业务逻辑层和数据访问层就可以通过RPC进行交互，如果数据访问层和业务逻辑层由同一个项目组负责， 那么就有可能将这两层放在同一个程序集里. 这里的模式是组织架构决定了软件架构， 所以软件架构要适合组织架构。 但有没有可能先定下软件架构，然后让组织架构适应软件架构呢？这是另外一个话题了</li>
</ul>
</li>
<li>阿里技术专家李运华在《从0开始学架构》里面提出了架构的三大原则之一-合适原则：“合适由于业界领先”</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>适应和适合可能会让人感觉差不多, 但适应是一个过程, 适合是适应的结果. 比如张三一开始不能适应这个职位, 但经过一段时间的调整, 最终适应了, 也就是和这个职位匹配了.<br>适度代表了平衡， 适应代表了代表了动态， 所以适度 + 适应代表了动态的平衡.<br>三是一个神奇的数字，一生二， 二生三，三生万物， 我喜欢三.</p>
]]></content>
      <categories>
        <category>认知</category>
      </categories>
      <tags>
        <tag>认知</tag>
      </tags>
  </entry>
  <entry>
    <title>系统的正确性 - 事务及相关</title>
    <url>/2020/10/25/transaction/</url>
    <content><![CDATA[<p>事务这个词在开发世界里默认是和数据库绑定在一起，但其实其他领域里也有事务这个词，比如会计事务所，律师事务所，不同领域的事务所指的意思是不一样的。 这里主要聊聊</p>
<ul>
<li>什么是事务</li>
<li>为什么是事务</li>
<li>如何实现一个事务</li>
<li>总结</li>
</ul>
<span id="more"></span>
<h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>在不加任何限定的情况下，这里的事务默认是指数据库领域的的事务，如果是其他领域的事务会特别说明。</p>
<h3 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h3><p>一般来说，如果一个数据库支持以下四个特性，我们说这个数据库支持事务</p>
<ul>
<li>Atomic <ul>
<li>一个事务由一系列操作组成，这些操作要么全部完成，要么不做。从系统的角度来看，这个事务只有完成和未完成两种状态，不存在完成一半这个说法。 换句话说，做事不要半吊子或者说做事有始有终.</li>
</ul>
</li>
<li>Consistent<ul>
<li>在事务执行之前和事务执行之后，整个系统的状态是符合逻辑的。</li>
<li>一致的概念往往是指A和B的状态行为一致，就比如军训的时候，我们要求大家的步伐一致。 但是数据库的一致性可不是这个意思，它的一致性更多的是从系统的角度来说逻辑上的正确性。 比如张三给李四转账20快，那么张三的余额就少了20块，李四的余额就多20块，这个从逻辑上来说是正确的。</li>
<li>一致性就是指系统的正确性.</li>
</ul>
</li>
<li>Isolation<ul>
<li>事务A和事务B在执行的过程中，是不会互相干扰对方的执行结果的正确性。</li>
<li>事务隐含了如下事情<ul>
<li>事务的操作对象是存储单元（表）</li>
<li>事务是并发的</li>
<li>锁是在并发过程中保持正确性的一种方式</li>
<li>事务的隔离级别是效率和正确性之间的权衡</li>
</ul>
</li>
</ul>
</li>
<li>Duraton<ul>
<li>事务完成之后数据变保存在存储单元里，并不能回滚。简单的说，就是覆水难收，落子无悔.</li>
<li>事务如果完成了一半，是可以回滚.</li>
</ul>
</li>
</ul>
<p>ACID给人的第一感觉这四个特性是平等的，正如古人所信奉的仁，义，礼，智，行，这五者是并列的。但ACID并不符合MECE原则， 更像是为了凑ACID这个单词. ACID正确的描述：</p>
<ul>
<li>从原子性，并发，存储三个维度采取策略，完成正确性这个目标</li>
</ul>
<p>这里的ACID这四个特性并没有涉及到具体的技术概念，换句话说，这是一种思想和策略，既然是思想和策略，那么意味着可以应用到宏观和微观层面.</p>
<h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>将上述事务的四大特性应用到分布式领域就是分布式事务.<br>在设计分布式事务的时候，有两大默认约束条件</p>
<ul>
<li>网络故障</li>
<li>通信延迟</li>
</ul>
<h3 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h3><p>Spring事务是为了支持数据库事务而提供的统一编程接口.</p>
<h3 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h3><p>Redis事务是由一系列命令组成，它满足:</p>
<ul>
<li>原子性 - 所有命令要么全部执行，要么不执行。 但Redis的原子性是伪原子性，为什么呢？因为只要有一个命令执行报错，它并不会回滚，所以Redis遇到命令执行失败，会继续执行下去，简单的说, Redis在原子性这方面更像是一个二愣子，一顿操作猛如虎.</li>
<li>隔离型 - 一个事务执行完毕，另外事务才会执行。这个更像是serializable的隔离级别.</li>
</ul>
<h3 id="Kafka事务"><a href="#Kafka事务" class="headerlink" title="Kafka事务"></a>Kafka事务</h3><p>Kafka的事务机制是保证生产者和消费者的操作在逻辑上是一致的 </p>
<h3 id="软件事务内存"><a href="#软件事务内存" class="headerlink" title="软件事务内存"></a>软件事务内存</h3><h3 id="Http事务"><a href="#Http事务" class="headerlink" title="Http事务"></a>Http事务</h3><p>HTTP事务在这里顺便提一下，它与上面所说的事务没有什么关系.<br>一个Http事务是由一个Http响应和一个Http请求组成.<br>Http事务是一家之言，有时候会让人和联想到数据库里的事务，但只要记住Http事务和别的事务没有任何关系.</p>
<h2 id="为什么是事务"><a href="#为什么是事务" class="headerlink" title="为什么是事务"></a>为什么是事务</h2><p>事务本质上是一种策略和机制，是为了保证系统的正确性，所以事务的出现是必然的.</p>
<h2 id="如何实现一个事务"><a href="#如何实现一个事务" class="headerlink" title="如何实现一个事务"></a>如何实现一个事务</h2><h3 id="如何实现分布式事务"><a href="#如何实现分布式事务" class="headerlink" title="如何实现分布式事务?"></a>如何实现分布式事务?</h3><ul>
<li>策略<ul>
<li>两阶段提交协议<ul>
<li>第一阶段：事务管理器发生CanCommit消息给资源管理器，每个资源管理器在本地执行操作但不提交（有点类似于正式打仗之前实战演练一遍），然后发送Yes/No给事务管理器， 代码本地操作成功或者失败。</li>
<li>第二阶段：事务处理器根据Yes/NO有如下操作<br>Yes - 发送DoCommit给各个资源处理器，执行剩下的操作，执行成功发送 HaveCommited给资源处理器<br>No - 发送DoAbort给各个资源处理器，本地执行成功的操作根据事务日志做回滚，回滚到一开始的状态，就好像什么都没发生一样， 然后发送HaveCommited给资源处理器.</li>
<li>事务管理器接受到资源管理器的HaveCommited， 整个事务执行完毕。</li>
<li>MysqlSql的InnoDB事务就是基于两阶段提交的</li>
<li>两阶段提交协议有点类似准备打仗的时候，司令问部下，你们都战术都演练好了吗？ 部下回答都演练好了，那么司令的回复是开打，如果有部下的回答是还没，那么司令的答复是不打.</li>
<li> 两阶段提交协议的缺点 </li>
<li>事务管理器必须等所有资源管理器等操作完毕才能继续下一步的操作，所以两阶段提交协议不太适合高并发场景</li>
<li>如果事务管理器挂了，那么整个系统就处于停滞状态</li>
<li>网络发生故障的时候，有些结点接受到DoCommit命令，就会执行操作，有些结点没有接受到就不会执行, 这样就导致数据不一直. 这个问题属于一个通用问题.</li>
<li>注意事项<ul>
<li>两阶段提交协议是数据库层面的协议，换句话说，相应的数据库必须支持XA协议，但一些数据库，比如MongoDB或者Cassandra并不支持XA协议, 同样Kafka也不支持.</li>
</ul>
</li>
</ul>
</li>
<li>三阶段提交协议<ul>
<li>三阶段提交协议是为了解决两阶段提交协议中的同步阻塞和网络故障导致的数据不一致问题</li>
<li>超时机制 - 在发送CanCommit之后，等待返回结果的这段时间内，有个时间限制，如果超过了这个限制，就放弃本次事务。 如果失败了再重试，而且失败了这个成本和代价是可以接受的，因为没有带来额外的数据损失. 超时时间和重试次数取决于业务本身.</li>
<li>将第一个Voting阶段拆分为CanCommit和PreCommit两个阶段.</li>
<li>不论是两阶段提交还是三阶段提交，它们<ul>
<li>是集中式事务管理，存在单点故障的风险</li>
<li>是同步调用</li>
<li>存在数据不一致的风险</li>
</ul>
</li>
</ul>
</li>
<li>TCC（Try-Confirm-Cancel）<ul>
<li>最早是由 Pat Helland 于 2007 年发表的一篇名为《Life beyond Distributed Transactions:an Apostate’s Opinion》的论文提出</li>
<li>TCC类似于两阶段提交协议，主要应用在业务层面，所以需要TCC框架.</li>
<li>由主业务方发起</li>
<li>不存在集中式事务管理单点故障的问题</li>
</ul>
</li>
<li>本地消息表<ul>
<li>本地消息表这个方案是由eBay提出</li>
<li>系统A不直接给消息中间件发送消息，而是将一个事务操作保存到消息表里。</li>
<li>系统A有个后台程序读取这个消息表，将读到的消息发送给消息中间件. 但也又可能发送失败，如果发送失败，接着发。所以系统A有如下特征<ul>
<li>消息不会丢失，但可能有重复</li>
<li>消息之间的顺序有保证</li>
</ul>
</li>
<li>系统B作为消费方，会遇到两个问题<ul>
<li>丢失消费 - 拿到消息之后，处理到一半机器挂了。 解决方案：使用ACK机制。 如果处理到一半，机器挂了，那么重启之后，还会继续收到同样的消息. </li>
<li>重复消费 - 在本地增加一个已经处理过的消息表，然后判断消息是不是已经处理过.</li>
</ul>
</li>
</ul>
</li>
<li>Saga事务<ul>
<li>Saga 事务源于 1987 年普林斯顿大学的 Hecto 和 Kenneth 发表的如何处理 long lived transaction（长活事务）论文</li>
<li>一个Saga事务是由一系列子事务组成</li>
<li>Saga事务由两种执行顺序<ul>
<li>T1, T2, T3, Tn </li>
<li>T1, T2, T3, Tn, Cn, C3, C2, C1</li>
</ul>
</li>
<li>Saga的两种恢复策略<ul>
<li>向前恢复: 如果T3执行失败，那么会一直重试T3直到成功为止.</li>
<li>向后恢复: 如果T3执行失败, 那么会执行C3, C2, C1做相应的补偿. 无论是补偿也好，还是rollback也巴，不纠结名词。 这里的补偿大体分为两类<ul>
<li>操作上真正的逆向， 比如 T3代表余额增加了10块钱，那么C3代表给余额减去10块钱.</li>
<li>操作上无法逆向，也就是覆水难收. 比如 T3代表火箭发射， 那么在这个时候C3是无法逆向的，T3失败的话，C3意味着召开一个新闻发布会。</li>
</ul>
</li>
</ul>
</li>
<li>Saga的子事务是如何组织的？<ul>
<li>协同式 - 每个子事务都知道整个事务的执行序列。事务和事务之间通过消息进行通信. 相当于一个团队里，每个人都有大局观, 积极主动性比较强.</li>
<li>编排式 - 有一个统一的编排器来统一管理子事务，和协同式是完全相反的思路，类似于一个团队里老大说了算的方式.</li>
</ul>
</li>
<li>Saga的缺点 <ul>
<li>Saga的事务不是隔离的，需要在应用层面采取某种策略和机制来保证.</li>
</ul>
</li>
<li>Saga的一些补充<ul>
<li>T和C是幂等的</li>
<li>无论执行 T, C还是执行C, T，这种两个操作逻辑上必须是等价的.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>基本定理<ul>
<li>CAP - CAP定理是在描述发生网络故障(Partition Tolerance)的时候, 一致性(Consistency)和可用性(Availability)不能两全. <ul>
<li>P - 分区容错性，白话一点，就是网络发生故障了，每个结点会形成一个隔离的区域. 网络一定会发生故障的，这是客观事实。 所以在讨论CAP的时候，我们往往是讨论当P发生时，应该怎么选C和A.</li>
<li>C - 在发生网络故障的时候，系统想要获得数据，必须等网络故障恢复，具体一点，用户看到是一个等待页面.</li>
<li>A - 在发生网络故障的时候，系统为了让用户不等待，可以给用户相对的可以接受的数据. </li>
</ul>
</li>
<li>BASE - Basically Available, Soft State eventually consistency, CAP是一个比较不接地气的定理, BASIC定理是CAP的一个补充。<ul>
<li>BA - 基本可用， 这个是主观性比较强的指标。 比如之前一个请求的响应时间是0.5秒， 现在一个请求的响应时间是2秒，那么这个两秒在业务层面是可以接受的。或者牺牲非核心业务和流量的可用性，保证核心业务和流量的可用性.</li>
<li>S - Soft Sate, 在不影响可用性的前提下, 允许同一时刻系统的状态存在中间状态. 比如将张三地址从A修改为B，突然发生了网络故障， 一部分机器上已经修改完，另一部分机器上没修改完，这时候不同机器查询张三的地址会得到不同的结果。 我们能不能容忍这种状态？取决于业务本身.</li>
<li>E - Eventually Consistency, 继续上面的例子，等网络故障恢复了，所有结点上的张三的地址都为B</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在上面说了这么多，无论是单机数据库事务，还是分布式数据库事务，还是应用层面的事务，都是为了解决一个问题：执行一系列操作，如何保证一系列操作完成之后，整个系统的状态是一致的？</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Welcome</title>
    <url>/2019/07/02/welcome/</url>
    <content><![CDATA[<ul>
<li>Hello, Welcome to Ricky World!</li>
</ul>
]]></content>
  </entry>
</search>
